C:"
==========================================================================
FermaT Transformation System
Copyright (C) 2001 Software Migrations Limited.
Email: martin@gkc.org.uk
Copyright (C) 2018 Doni Pracner
Email: doni.pracner@dmi.uns.ac.rs

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
==========================================================================";


@Test_Trans("Test 1 (not redundant) for Delete_Redundant_Statement",
(FILL Statements VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  PUSH(mjvm_mstack, mjvm_locals_0);
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  FOR i := tempa TO tempb STEP 1 DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END;
POP(mjvm_locals_0, mjvm_mstack) ENDVAR ENDFILL),
  <1,2,1,1,3>,
  TR_Delete_Redundant_Statement,
  < >,
  ("Fail"));

@Test_Trans("Test 2 (redundant) for Delete_Redundant_Statement",
(FILL Statements VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  PUSH(mjvm_mstack, mjvm_locals_0);
  tempb := 2;
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  FOR i := tempa TO tempb STEP 1 DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END;
POP(mjvm_locals_0, mjvm_mstack) ENDVAR ENDFILL),
  <1,2,1,1,2>,
  TR_Delete_Redundant_Statement,
  < >,
  (FILL Statements VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  PUSH(mjvm_mstack, mjvm_locals_0);
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  FOR i := tempa TO tempb STEP 1 DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END;
POP(mjvm_locals_0, mjvm_mstack) ENDVAR ENDFILL));

@Test_Trans("Test 3 (not redundant) for Delete_Redundant_Statement",
(FILL Statements VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  PUSH(mjvm_mstack, mjvm_locals_0);
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  WHILE tempa >= tempb DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END;
POP(mjvm_locals_0, mjvm_mstack) ENDVAR ENDFILL),
  <1,2,1,1,3>,
  TR_Delete_Redundant_Statement,
  < >,
  ("Fail"));
  
@Test_Trans("Test 4 (not redundant) for Delete_Redundant_Statement",
(FILL Statements VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  PUSH(mjvm_mstack, mjvm_locals_0);
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  IF tempa >= tempb
  THEN
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 FI
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END;
POP(mjvm_locals_0, mjvm_mstack) ENDVAR ENDFILL),
  <1,2,1,1,3>,
  TR_Delete_Redundant_Statement,
  < >,
  ("Fail"));

@Test_Trans("Test 5 (not redundant) for Delete_Redundant_Statement",
(FILL Statements
VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  mjvm_locals_0 := 2;
  tempb := mjvm_locals_0;
  WHILE tempa >= tempb DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END ENDVAR ENDFILL),
  <1,2,1,1,2>,
  TR_Delete_Redundant_Statement,
  < >,
  ("Fail"));

@Test_Trans("Test 6 (redundant) for Delete_Redundant_Statement",
(FILL Statements
VAR < tempa := 0,
      tempb := 0,
      mjvm_statics_2 := 10,
      mjvm_statics_3 := 0,
      mjvm_arrays := < >,
      mjvm_estack := < >,
      mjvm_mstack := < > >:
BEGIN
  mjvm_statics_2 := 10;
  tempb := mjvm_statics_2;
  WHILE tempa >= tempb DO
    tempb := mjvm_statics_3;
    Print_MJ(mjvm_locals_0, 5);
    mjvm_statics_3 := mjvm_statics_3 + 1;
    tempb := mjvm_locals_0 OD
WHERE
  PROC Print_MJ(val, format) ==
    PRINFLUSH(@Format(format, val)) END
  PROC Print_MJ_CHAR(val, format) ==
    PRINFLUSH(@Format(format, @List_To_String(<val>)))
  END
END ENDVAR ENDFILL),
  <1,2,1,1,1>,
  TR_Delete_Redundant_Statement,
  < >,
  ("Fail"));

@Test_Trans("Test 7 (redundant) for Delete_Redundant_Statement",
(FILL Statements
mjvm_locals_0 := 0;
      POP(mjvm_locals_0, mjvm_estack)  ENDFILL),
  <1>,
  TR_Delete_Redundant_Statement,
  < >,
  (FILL Statements
      POP(mjvm_locals_0, mjvm_estack)  ENDFILL))