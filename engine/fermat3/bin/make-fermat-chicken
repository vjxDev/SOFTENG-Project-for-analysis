#!/usr/bin/perl
# Build FermaT using chicken
#

BEGIN {
  $FermaT = $ENV{'FermaT'} || "/usr/local/fermat2";
  $FermaT =~ s/"//g; #"
  unshift(@INC, "$FermaT/config");
}

use fermat;
use warnings;

sub read_dir($);

# chicken options:
$opts = "-optimize-leaf-routines -unsafe -O3 -debug-level 0 -disable-interrupts";
$opts .= " -fixnum-arithmetic";

$opts = "-k";

chdir "$FermaT/src" or die;

@dirs = ("scheme", "adt", "trans", "wslib");

my $header = <<'END';
; Special code for chicken compiler:

(import chicken.file
        chicken.time
        chicken.syntax
        chicken.process)

(define-syntax defmacro
  (syntax-rules ()
    ((_ ?name ?args ?body ...)
     (define-syntax ?name
       (er-macro-transformer
         (lambda (e r c)
           (apply (lambda ?args ?body ...) (cdr e))))))))

(define get-internal-run-time cpu-time)

(define (force-output) #t)

(define integer-expt expt)

; End of special code for chicken compiler.
END

# Add the object files to @obj and get the list of global variables:
@obj = ();
@modules = ();
$odir = "$FermaT/chicken";
mkdir $odir unless -d $odir;
$odir .= "/$arch";
mkdir $odir unless -d $odir;
foreach $dir (@dirs) {
  mkdir "$odir/$dir" unless -d "$odir/$dir";
  foreach $file (grep(/\.scx$/, read_dir($dir))) {
    next if $file eq "patch.scm";
    next if $file =~ /^ADT2\.debug/;
    my $base = $file;
    $base =~ s/\.scx$//;
    push(@modules, $base);
    my $out = "$odir/$dir/$base.o";
    push(@obj, $out);
    next if newer($out, "$dir/$file");
    unlink($out);
    print "chicken compiling $dir/$file\n";
    # Output object file always goes in a in current dir:
    open(OUT, "|csc - -c $opts") or die "Can't run csc: $!\n";
    print OUT "(declare (unit $base))\n";
    print OUT $header;
    open(IN, "$dir/$file") or die "Can't open file `$dir/$file': $!\n";
    print OUT <IN>;
    close(IN);
    close(OUT);
    die "$out not created" unless -f "a";
    rename "a", $out;
  } # next file
} # next dir

if (!newer("csi.o", "csi.scm")) {
  print "chicken compiling csi.scm\n";
  open(OUT, "|csc - -c $opts") or die "Can't run csc: $!\n";
  foreach my $module (@modules) {
    print OUT "(declare (uses $module))\n";
  }
  print OUT $header;
  open(IN, "csi.scm") or die "Can't read csi.scm: $!\n";
  print OUT <IN>;
  close(IN);
  close(OUT);
  die "csi.o not created" unless -f "a";
  rename "a", "csi.o" or die "rename failed: $!\n";
}
unlink "a.c" if -f "a.c";
push(@obj, "csi.o");

#print "modules = @modules\n";

unlink("scmfmt.chicken");
system qq[csc -o scmfmt.chicken @obj];

if (-f "scmfmt.chicken") {
  print "scmfmt.chicken written\n";
  rename "$odir/scmfmt", "$odir/scmfmt.old" if -f "$odir/scmfmt";
  rename "scmfmt.chicken", "$odir/scmfmt";
} else {
  die "Failed to create scmfmt.chicken!\n";
}


sub read_dir($) {
  my ($dir) = @_;
  my @files = ();
  local(*DIR);
  opendir(DIR, $dir) or die "Can't read directory `$dir': $!\n";
  @files = sort grep { !/^\./ && !/^,/ } readdir(DIR);
  closedir(DIR);
  return(@files);
}

