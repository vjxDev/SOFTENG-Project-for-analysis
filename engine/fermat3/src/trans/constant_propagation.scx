(define (/foreach-constant_propagation-1
         //depth
         //a/s_/type)
  (@down)
  (set! /fl_flag1 0)
  (let while-loop ()
    (cond ((= /fl_flag1 0)
           (begin
             (cond ((and (= (@st (@i)) //t_/assignment)
                         (= (@size (@i)) 1)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/var_/lvalue)
                         (equal?
                           (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                           /cc_name)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                            //t_/variable)
                         (equal?
                           (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                           /cc1_name))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t
                           (@right)
                           (let while-loop ()
                             (cond ((and (@right?) (= (@st (@i)) //t_/comment))
                                    (@right)
                                    (while-loop))
                                   (#t #t)))
                           (cond ((= (@st (@i)) //t_/cond)
                                  (@down)
                                  (@down)
                                  (@rename /cc_name /cc1_name)
                                  (@up)
                                  (let while-loop ()
                                    (cond ((@right?)
                                           (begin
                                             (@right)
                                             (@down)
                                             (@rename /cc_name /cc1_name)
                                             (@up))
                                           (while-loop))
                                          (#t #t)))
                                  (@up)
                                  (set! /fl_flag1 0))
                                 (#t (set! /fl_flag1 0))))))
                   (#t (set! /fl_flag1 0)))
             (cond ((= /fl_flag1 0)
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))))
           (while-loop))
          (#t #t))))

(define (/foreach-constant_propagation-2
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/a_/proc_/call)
              (equal? (@v (list-ref (@i) (+ 1 1))) /pop_regs))
         (@delete))
        ((and (= (@st (@i)) //t_/assignment)
              (= (@size (@i)) 1)
              (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                 //t_/var_/lvalue)
              (member
                (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                /registers)
              (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                 //t_/variable)
              (member
                (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                /reg_inits))
         (@delete))))

(define (/foreach-constant_propagation-3
         //depth
         //a/s_/type)
  (cond ((@is_addr? (@i))
         (set! /addr
           (concat (@elts_used (@get_addr (@i))) /addr)))))

(define (/foreach-constant_propagation-4
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/assignment)
              (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                 //t_/variable)
              (or (@starts_with?
                    (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                    "v_")
                  (@starts_with?
                    (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                    "V_")))
         (set! //vcons
           (@set_union
             (@elts_assigned
               (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
             //vcons))
         (puthash
           //vcons_vals
           (@elts_assigned
             (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
           (@set_union
             (gethash
               //vcons_vals
               (@elts_assigned
                 (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))
             (list (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))))))))

(define (/foreach-constant_propagation-5
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/assignment)
              (not (null? (gethash
                            //vcons_vals
                            (@elts_assigned
                              (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))))
              (or (not (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                          //t_/variable))
                  (not (member
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                         (gethash
                           //vcons_vals
                           (@elts_assigned
                             (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))))))
         (puthash
           //vcons_vals
           (@elts_assigned
             (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
           '()))))

(define (/foreach-constant_propagation-6
         //depth
         //a/s_/type)
  (cond ((and (or (= (@st (@i)) //t_/variable)
                  (= (@st (@i)) //t_/struct))
              (= (if (vector? (gethash //vcons_vals (@elements (@i))))
                   (vector-length
                     (gethash //vcons_vals (@elements (@i))))
                   (length (gethash //vcons_vals (@elements (@i)))))
                 1))
         (@paste_over
           (@make //t_/variable
                  (car (gethash //vcons_vals (@elements (@i))))
                  '())))))

(define (/foreach-constant_propagation-7
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/struct)
              (@is_mem? (list-ref (@i) (+ 1 2)))
              (= (@st (@get_mem (list-ref (@i) (+ 1 2))))
                 //t_/variable))
         (puthash
           //d/s/e/c/ts
           (@v (@get_mem (list-ref (@i) (+ 1 2))))
           1)))
  (cond ((and (= (@st (@i)) //t_/aref)
              (@is_mem? (list-ref (@i) (+ 1 1)))
              (= (@st (@get_mem (list-ref (@i) (+ 1 1))))
                 //t_/variable))
         (puthash
           //d/s/e/c/ts
           (@v (@get_mem (list-ref (@i) (+ 1 1))))
           1))))

(define (/foreach-constant_propagation-8
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/struct_/lvalue)
              (@is_mem? (list-ref (@i) (+ 1 2)))
              (= (@st (@get_mem (list-ref (@i) (+ 1 2))))
                 //t_/variable))
         (puthash
           //d/s/e/c/ts
           (@v (@get_mem (list-ref (@i) (+ 1 2))))
           1))))

(define (/foreach-constant_propagation-9
         //depth
         //a/s_/type)
  (set! /name (@cp_var_name (@i)))
  (cond ((and (= (@st (@i)) //t_/plus)
              (= (@size (@i)) 2)
              (= (@st (list-ref (@i) (+ 1 1))) //t_/number)
              (= (@st (list-ref (@i) (+ 1 2))) //t_/string)
              (equal?
                (@v (list-ref (@i) (+ 1 2)))
                "hex 0x80000000")
              (not (null? (gethash
                            //code_/hash
                            (@v (list-ref (@i) (+ 1 1)))))))
         (@paste_over (list-ref (@i) (+ 1 1)))))
  (cond ((and (@is_mem_rel? (@i))
              (= (@st (@get_mem_rel (@i))) //t_/plus)
              (= (@st (list-ref (@get_mem_rel (@i)) (+ 1 1)))
                 //t_/variable)
              (= (@st (list-ref (@get_mem_rel (@i)) (+ 1 2)))
                 //t_/number)
              (= (@st (@get_mem_rel_n (@i))) //t_/number)
              (or (member
                    (@v (list-ref (@get_mem_rel (@i)) (+ 1 1)))
                    /reg_inits)
                  (member
                    (@v (list-ref (@get_mem_rel (@i)) (+ 1 1)))
                    /registers)))
         (let ((/name-save /name))
           (set! /name
             (@make_name
               (concat
                 (string-append
                   (@n_string
                     (@v (list-ref (@get_mem_rel (@i)) (+ 1 1))))
                   "__")
                 (@string
                   (@v (list-ref (@get_mem_rel (@i)) (+ 1 2)))))))
           (cond ((not (null? (@cp_get /l (list /name))))
                  (begin (display "c") (force-output))
                  (@paste_over (@cp_get /l (list /name)))
                  (set! /change (+ /change 1))))
           (set! /name /name-save))))
  (cond ((and (> (if (vector? (@posn))
                   (vector-length (@posn))
                   (length (@posn)))
                 1)
              (or (@is_addr? (@gparent))
                  (= (@st (@parent)) //t_/address_/of)
                  (and (= (@st (@gparent)) //t_/x_/funct_/call)
                       (equal?
                         (@v (list-ref (@gparent) (+ 1 1)))
                         /sizeof))))
         #t)
        ((and (> (if (vector? (@posn))
                   (vector-length (@posn))
                   (length (@posn)))
                 1)
              (= (@posn_n) 2)
              (or (= (@st (@parent)) //t_/rel_/seg)
                  (= (@st (@parent)) //t_/rel_/seg_/lvalue))
              (not (null? (@used (@i)))))
         (set! /p1 (list-ref (@parent) (+ 1 1)))
         (@edit)
         (set! //l (@cp_update //l))
         (cond ((null? (@used (@i)))
                (cond ((or (not (null? (@funct_calls (@i))))
                           (not (null? (@x_funct_calls (@i))))
                           (member /a_name (@variables /p1)))
                       (@end_edit))
                      (#t
                       (@paste_over
                         (@make //t_/plus
                                '()
                                (list (@i) (@make //t_/number 1 '()))))
                       (@end_edit)))
                (@right))
               (#t (@end_edit))))
        ((and (= (@st (@i)) //t_/sub_/seg)
              (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
              (= (@st (list-ref (@i) (+ 1 3))) //t_/number)
              (< (- (@v (list-ref (@i) (+ 1 3)))
                    (@v (list-ref (@i) (+ 1 2))))
                 4))
         (set! /name
           (@cp_var_name (list-ref (@i) (+ 1 1))))
         (cond ((not (null? /name))
                (set! /i (@v (list-ref (@i) (+ 1 2))))
                (set! /n 0)
                (set! /fl_flag1 0)
                (let while-loop ()
                  (cond ((= /fl_flag1 0)
                         (begin
                           (set! /val
                             (@cp_get /l (concat /name (list (- /i)))))
                           (cond ((null? /val) (set! /fl_flag1 1))
                                 ((not (= (@st /val) //t_/number))
                                  (set! /val '())
                                  (set! /fl_flag1 1))
                                 (#t
                                  (set! /n (+ (* /n 256) (@v /val)))
                                  (set! /i (+ /i 1))
                                  (cond ((> /i (@v (list-ref (@i) (+ 1 3))))
                                         (set! /fl_flag1 1))
                                        (#t (set! /fl_flag1 0))))))
                         (while-loop))
                        (#t #t)))
                (cond ((not (null? /val))
                       (begin
                         (display "b")
                         (begin
                           (display
                             (+ (- (@v (list-ref (@i) (+ 1 3)))
                                   (@v (list-ref (@i) (+ 1 2))))
                                1))
                           (force-output)))
                       (@paste_over (@make //t_/number /n '()))
                       (set! /change (+ /change 1)))))))
        ((and (= (@st (@i)) //t_/rel_/seg)
              (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
              (= (@st (list-ref (@i) (+ 1 3))) //t_/number)
              (<= (@v (list-ref (@i) (+ 1 3))) 4))
         (set! /name
           (@cp_var_name (list-ref (@i) (+ 1 1))))
         (cond ((not (null? /name))
                (set! /i (@v (list-ref (@i) (+ 1 2))))
                (set! /n 0)
                (set! /fl_flag1 0)
                (let while-loop ()
                  (cond ((= /fl_flag1 0)
                         (begin
                           (set! /val
                             (@cp_get /l (concat /name (list (- /i)))))
                           (cond ((null? /val) (set! /fl_flag1 1))
                                 ((not (= (@st /val) //t_/number))
                                  (set! /val '())
                                  (set! /fl_flag1 1))
                                 (#t
                                  (set! /n (+ (* /n 256) (@v /val)))
                                  (set! /i (+ /i 1))
                                  (cond ((>= /i
                                             (+ (@v (list-ref (@i) (+ 1 2)))
                                                (@v (list-ref (@i) (+ 1 3)))))
                                         (set! /fl_flag1 1))
                                        (#t (set! /fl_flag1 0))))))
                         (while-loop))
                        (#t #t)))
                (cond ((not (null? /val))
                       (begin
                         (display "b")
                         (begin
                           (display (@v (list-ref (@i) (+ 1 3))))
                           (force-output)))
                       (@paste_over (@make //t_/number /n '()))
                       (set! /change (+ /change 1)))))))
        ((and (= (@st (@i)) //t_/variable)
              (@ends_with? (@v (@i)) "_INDEX")))
        ((not (null? /name))
         (set! /val (@cp_get /l /name))
         (cond ((not (null? /val))
                (cond ((and (= (@posn_n) 2)
                            (= (@st (@parent)) //t_/struct))
                       #t)
                      ((and (= (@posn_n) 1)
                            (or (= (@st (@parent)) //t_/aref)
                                (= (@st (@parent)) //t_/sub_/seg)
                                (= (@st (@parent)) //t_/rel_/seg)
                                (= (@st (@parent)) //t_/final_/seg)))
                       #t)
                      ((and (> (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               1)
                            (@is_mem? (@parent))
                            (or (> (if (vector? /name)
                                     (vector-length /name)
                                     (length /name))
                                   1)
                                (not (member (car /name) /x86_regs)))
                            (or (= (@st (@gparent)) //t_/struct)
                                (= (@st (@gparent)) //t_/struct_/lvalue)))
                       #t)
                      ((and (> (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               1)
                            (@is_mem? (@gparent))
                            (or (> (if (vector? /name)
                                     (vector-length /name)
                                     (length /name))
                                   1)
                                (not (member (car /name) /x86_regs)))
                            (or (= (@st (@ggparent)) //t_/struct)
                                (= (@st (@ggparent)) //t_/struct_/lvalue)))
                       #t)
                      ((and (> (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               1)
                            (= (@posn_n) 2)
                            (= (@st (@gparent)) //t_/a_/proc_/call)
                            (@starts_with?
                              (@v (list-ref (@gparent) (+ 1 1)))
                              "PUT_"))
                       #t)
                      ((and (> (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               1)
                            (= (@st (@gparent)) //t_/a_/proc_/call)
                            (equal?
                              (@v (list-ref (@gparent) (+ 1 1)))
                              /call_via_ptr_pars))
                       #t)
                      ((and (= (@st /val) //t_/variable)
                            (= (@st (@i)) //t_/variable)
                            (not (member (@v (@i)) /registers))
                            (not (member (@v /val) /vcons)))
                       #t)
                      ((and (= (@st /val) //t_/variable)
                            (= (@st (@i)) //t_/variable)
                            (member (@v /val) /registers)
                            (member (@v (@i)) /registers))
                       #t)
                      ((and (> (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               0)
                            (not (null? (@parent)))
                            (@equal? (@parent) /val))
                       #t)
                      ((and (= (@st /val) //t_/minus)
                            (= (@st (list-ref /val (+ 1 1))) //t_/plus))
                       #t)
                      ((and (= (@st /val) //t_/variable)
                            (member (@v /val) /reg_inits)))
                      ((and (= (@st /val) //t_/variable)
                            (member (@v /val) //s/m/l/r/e/g/s)))
                      ((and (= (@st /val) //t_/variable)
                            (not (null? (gethash /rename (@v /val))))))
                      ((and (equal? (car /name) /a_name)
                            (member /a_name (@used /val))))
                      ((and (= (@st /val) //t_/variable)
                            (equal? (@v /val) /result_code)
                            (or (not (@up?))
                                (not (= (@gt (@parent)) //t_/condition)))))
                      ((and (@up?)
                            (= (@st /val) //t_/variable)
                            (equal? (@v /val) /r1_new)
                            (or (= (@gt (@parent)) //t_/assign)
                                (= (@gt (@parent)) //t_/expressions))
                            (not (and (> (if (vector? (@posn))
                                           (vector-length (@posn))
                                           (length (@posn)))
                                         2)
                                      (= (@st (@ggparent)) //t_/var)))))
                      (#t
                       (begin (display "x") (force-output))
                       (@paste_over /val)
                       (cond ((> /change 200)
                              (begin
                                (display "posn = ")
                                (begin
                                  (display (@posn))
                                  (newline)
                                  (force-output)))
                              (begin
                                (display "name = ")
                                (begin
                                  (display /name)
                                  (newline)
                                  (force-output)))
                              (begin (display "val = ") (force-output))
                              (@print_wsl /val "")
                              (begin
                                (display "change = ")
                                (begin
                                  (display /change)
                                  (newline)
                                  (force-output)))
                              (error "@CP_Update:" "too many updates!")))
                       (set! /change (+ /change 1)))))))))

(define (/foreach-constant_propagation-10
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/cond)
         (@down)
         (set! /fl_flag1 0)
         (let while-loop ()
           (cond ((= /fl_flag1 0)
                  (begin
                    (let ((/__/o/k 1))
                      (vector-set! /__/match_array 0 /n)
                      (set! /__/o/k
                        (@new_match
                          /%const__constant_propagation__2
                          (@i)
                          /__/o/k))
                      (cond ((= /__/o/k 1)
                             (let ((/__/s_save //s))
                               (set! //s (vector-ref /__/match_array 1))
                               (set! /call (car //s))
                               (set! //s /__/s_save)))))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-constant_propagation-11
         //depth
         //a/s_/type)
  (cond ((and #f
              (= (@st (@i)) //t_/call)
              (number? (@v (@i)))
              (< (@v (@i)) 0))
         (if (vector? //entries)
           (vector-set!
             //entries
             (- (- (@v (@i))) 1)
             (list 0 '()))
           (set! //entries
             (replace-nth
               //entries
               (- (@v (@i)))
               (list 0 '())))))))

(define (/foreach-constant_propagation-12
         //depth
         //a/s_/type)
  (cond ((and #f
              (= (@st (@i)) //t_/call)
              (number? (@v (@i)))
              (< (@v (@i)) 0))
         (if (vector? //entries)
           (vector-set!
             //entries
             (- (- (@v (@i))) 1)
             (list 0 '()))
           (set! //entries
             (replace-nth
               //entries
               (- (@v (@i)))
               (list 0 '())))))))

(define (/foreach-constant_propagation-13
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/equal)
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__9
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "c0") (force-output))
                  (@paste_over //b0)
                  (set! //b0 //mth_/false))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__10
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "c1") (force-output))
                  (@paste_over (@and (@not //b0) //b1))
                  (set! //b1 //mth_/false))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__11
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "c2") (force-output))
                  (@paste_over
                    (@and (@and (@not //b0) (@not //b1)) //b2)))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__12
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "c3") (force-output))
                  (@paste_over
                    (@and (@and (@and (@not //b0) (@not //b1)) (@not //b2))
                          //b3))))))
        ((= (@st (@i)) //t_/not_/equal)
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__13
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "C0") (force-output))
                  (@paste_over (@not //b0))
                  (set! //b0 //mth_/false))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__14
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "C1") (force-output))
                  (@paste_over (@or //b0 (@not //b1)))
                  (set! //b1 //mth_/false))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__15
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "C2") (force-output))
                  (@paste_over (@or (@or //b0 //b1) (@not //b2))))))
         (let ((/__/o/k 1))
           (vector-set! /__/match_array 0 /cc)
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__16
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (begin (display "C3") (force-output))
                  (@paste_over
                    (@or (@or (@or //b0 //b1) //b2) (@not //b3)))))))))

(define (/foreach-constant_propagation-14
         //depth
         //a/s_/type)
  (cond ((and (and (not (= (@st (@i)) //t_/and))
                   (not (= (@st (@i)) //t_/or))
                   (not (= (@st (@i)) //t_/not))
                   (not (= (@st (@i)) //t_/x_/b/funct_/call)))
              (member /cc_name (@variables (@i))))
         (let ((/__/o/k 1))
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__17
               (@i)
               /__/o/k))
           (cond ((not (= /__/o/k 1))
                  (let ((/__/o/k 1))
                    (set! /__/o/k
                      (@new_match
                        /%const__constant_propagation__18
                        (@i)
                        /__/o/k))
                    (cond ((not (= /__/o/k 1)) (set! //o/k 0))))))))))

(define (/foreach-constant_propagation-15
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__17
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1) (@paste_over //b1))
          (#t
           (let ((/__/o/k 1))
             (set! /__/o/k
               (@new_match
                 /%const__constant_propagation__18
                 (@i)
                 /__/o/k))
             (cond ((= /__/o/k 1) (@paste_over //b2))))))))

(define (/foreach-constant_propagation-16
         //depth
         //a/s_/type)
  (cond ((and (and (not (= (@st (@i)) //t_/and))
                   (not (= (@st (@i)) //t_/or))
                   (not (= (@st (@i)) //t_/not))
                   (not (= (@st (@i)) //t_/x_/b/funct_/call)))
              (member /cc_name (@variables (@i))))
         (let ((/__/o/k 1))
           (set! /__/o/k
             (@new_match
               /%const__constant_propagation__21
               (@i)
               /__/o/k))
           (cond ((not (= /__/o/k 1))
                  (let ((/__/o/k 1))
                    (set! /__/o/k
                      (@new_match
                        /%const__constant_propagation__22
                        (@i)
                        /__/o/k))
                    (cond ((not (= /__/o/k 1)) (set! //o/k 0))))))))))

(define (/foreach-constant_propagation-17
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__21
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1) (@paste_over //b1))
          (#t
           (let ((/__/o/k 1))
             (set! /__/o/k
               (@new_match
                 /%const__constant_propagation__22
                 (@i)
                 /__/o/k))
             (cond ((= /__/o/k 1) (@paste_over //b2))))))))

(define (/foreach-constant_propagation-18
         //depth
         //a/s_/type)
  (cond ((equal? (@variables (@i)) (list /cc_name))
         (set! /newtests '())
         (set! /tests /orig_tests)
         (let ((var-save /cc_val) (seq-save /orig_cc_values))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /cc_val (car for-tmp))
                    (begin
                      (set! //l (@cp_put0 //l (list /cc_name) /cc_val))
                      (@edit)
                      (let ((//migration-save //migration))
                        (set! //migration 1)
                        (set! //l (@cp_update //l))
                        (set! //migration //migration-save))
                      (cond ((= (@st (@i)) //t_/true)
                             (set! /newtests (cons (car /tests) /newtests))))
                      (@undo_edit)
                      (set! /tests (cdr /tests)))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /cc_val var-save))
         (cond ((= (if (vector? /newtests)
                     (vector-length /newtests)
                     (length /newtests))
                   0)
                (@paste_over (@make //t_/false '() '())))
               ((= (if (vector? /newtests)
                     (vector-length /newtests)
                     (length /newtests))
                   1)
                (@paste_over (car /newtests)))
               (#t (@paste_over (@make //t_/or '() /newtests)))))))

(define (/foreach-constant_propagation-19
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/call)
              (number? (@v (@i)))
              (equal? (- (@v (@i))) /dispatch))
         (@paste_over (@make //t_/call (- (+ //n 1)) '()))
         (@paste_before
           (@make //t_/comment
                  "FIXME: recursion detected!!"
                  '())))))

(define (/foreach-constant_propagation-20
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/variable)
              (equal? (@v (@i)) /destination))
         (@paste_over /val))))

(define (/foreach-constant_propagation-21
         //depth
         //a/s_/type)
  (cond ((and (= //o/k 1)
              (= (@st (@i)) //t_/assignment)
              (or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                     //t_/var_/lvalue)
                  (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                     //t_/struct_/lvalue))
              (@lr_equal?
                (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))
                /v))
         (cond ((and (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                        //t_/number)
                     (member
                       (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                       /dispatch_codes))
                (set! /values
                  (@set_union
                    (list (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                    /values)))
               ((and (or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                            //t_/variable)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                            //t_/struct))
                     (or (member
                           (@cp_var_name
                             (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                           //vcons)
                         (member
                           (@cp_var_name
                             (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                           //constants)))
                (set! /values
                  (@set_union
                    (list (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                    /values)))
               (#t (set! //o/k 0))))))

(define (/foreach-constant_propagation-22
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/number)
              (equal? (@v (@i)) /val))
         (@paste_over /notused)
         (begin (display "N") (force-output)))))

(define (/foreach-constant_propagation-23
         //depth
         //a/s_/type)
  (cond ((= (@st (list-ref (@i) (+ 1 (@size (@i)))))
            //t_/exit)
         (@paste_over (@skips)))))

(define (/foreach-constant_propagation-24
         //depth
         //a/s_/type)
  (cond ((and #f
              (= (@st (@i)) //t_/call)
              (number? (@v (@i)))
              (< (@v (@i)) 0))
         (if (vector? //entries)
           (vector-set!
             //entries
             (- (- (@v (@i))) 1)
             (list 0 '()))
           (set! //entries
             (replace-nth
               //entries
               (- (@v (@i)))
               (list 0 '())))))))

(define (/foreach-constant_propagation-25
         //depth
         //a/s_/type)
  (cond ((and #f
              (= (@st (@i)) //t_/call)
              (number? (@v (@i)))
              (< (@v (@i)) 0))
         (if (vector? //entries)
           (vector-set!
             //entries
             (- (- (@v (@i))) 1)
             (list 0 '()))
           (set! //entries
             (replace-nth
               //entries
               (- (@v (@i)))
               (list 0 '())))))))

(define (/foreach-constant_propagation-26
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/exit) (@left?))
         (set! /move 1)
         (@left))
        (#t (set! /move 0)))
  (cond ((and (= (@st (@i)) //t_/proc_/call)
              (not (@cs? (list-ref (@i) (+ 1 2))))
              (not (@cs? (list-ref (@i) (+ 1 3)))))
         (set! /calls
           (@set_union
             (list (@v (list-ref (@i) (+ 1 1))))
             /calls))
         (@paste_over (@skip)))
        (#t (set! //o/k 0)))
  (cond ((= /move 1) (@right))))

(define (/foreach-constant_propagation-27
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/assignment)
              (= (@size (@i)) 1))
         (cond ((and (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                        //t_/var_/lvalue)
                     (not (null? (gethash
                                   //d/s/e/c/ts
                                   (@v (list-ref
                                         (list-ref (@i) (+ 1 1))
                                         (+ 1 1))))))
                     (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                        //t_/variable)
                     (member
                       (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                       /registers))
                (cond ((null? (gethash
                                //d/s/e/c/t_reg
                                (@v (list-ref
                                      (list-ref (@i) (+ 1 1))
                                      (+ 1 1)))))
                       (puthash
                         //d/s/e/c/t_reg
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))))
                       (set! //d/s/e/c/t_list
                         (cons (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                               //d/s/e/c/t_list)))
                      ((not (equal?
                              (gethash
                                //d/s/e/c/t_reg
                                (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))
                              (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))))
                       (puthash
                         //d/s/e/c/t_bad
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                         1))))))))

(define (/foreach-constant_propagation-28
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__33
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__n_save /n) (/__v_save /v))
             (set! /n (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /v) //t_/variable)
                         (= (@st /n) //t_/number)
                         (or (member (@v /v) /registers)
                             (member (@v /v) /reg_inits)))
                    (set! /new
                      (@make_name
                        (concat
                          (string-append (@n_string (@v /v)) "__")
                          (@string (@v /n)))))
                    (@paste_over (@make //t_/variable /new '()))))
             (set! /n /__n_save)
             (set! /v /__v_save))))))

(define (/foreach-constant_propagation-29
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__34
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__n_save /n) (/__v_save /v))
             (set! /n (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /v) //t_/variable)
                         (= (@st /n) //t_/number)
                         (or (member (@v /v) /registers)
                             (member (@v /v) /reg_inits)))
                    (set! /new
                      (@make_name
                        (concat
                          (string-append (@n_string (@v /v)) "__")
                          (@string (@v /n)))))
                    (@paste_over (@make //t_/var_/lvalue /new '()))))
             (set! /n /__n_save)
             (set! /v /__v_save))))))

(define (/foreach-constant_propagation-30
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (@down)
         (set! /fl_flag1 0)
         (let while-loop ()
           (cond ((= /fl_flag1 0)
                  (begin
                    (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                   //t_/var_/lvalue)
                                (not (null? (gethash
                                              //d/s/e/c/ts
                                              (@v (list-ref (@i) (+ 1 1))))))
                                (null? (gethash
                                         //d/s/e/c/t_bad
                                         (@v (list-ref (@i) (+ 1 1))))))
                           (set! /name (@v (list-ref (@i) (+ 1 1))))
                           (cond ((null? (gethash //d/s/e/c/t_init /name))
                                  (puthash
                                    //d/s/e/c/t_init
                                    /name
                                    (list-ref (@i) (+ 1 2)))
                                  (puthash //d/s/e/c/t_init_count /name 1))
                                 ((@equal?
                                    (gethash //d/s/e/c/t_init /name)
                                    (list-ref (@i) (+ 1 2)))
                                  (puthash
                                    //d/s/e/c/t_init_count
                                    /name
                                    (+ (gethash //d/s/e/c/t_init_count /name)
                                       1)))
                                 ((and (= (@st (gethash //d/s/e/c/t_init /name))
                                          //t_/variable)
                                       (equal?
                                         (@variables (list-ref (@i) (+ 1 2)))
                                         (list (@v (gethash
                                                     //d/s/e/c/t_init
                                                     /name)))))
                                  (puthash
                                    //d/s/e/c/t_init
                                    /name
                                    (list-ref (@i) (+ 1 2)))
                                  (puthash //d/s/e/c/t_init_count /name 1))
                                 ((or (not (= //t_/variable
                                              (@st (list-ref (@i) (+ 1 2)))))
                                      (not (equal?
                                             (list (@v (list-ref (@i) (+ 1 2))))
                                             (@variables
                                               (gethash
                                                 //d/s/e/c/t_init
                                                 /name)))))
                                  (puthash //d/s/e/c/t_bad /name 1)))))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-constant_propagation-31
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (@down)
         (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                        //t_/var_/lvalue)
                     (member (@v (list-ref (@i) (+ 1 1))) /registers))
                (puthash
                  /reg_init_count
                  (@v (list-ref (@i) (+ 1 1)))
                  (+ (gethash
                       /reg_init_count
                       (@v (list-ref (@i) (+ 1 1))))
                     1))))
         (let while-loop ()
           (cond ((@right?)
                  (begin
                    (@right)
                    (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                   //t_/var_/lvalue)
                                (member
                                  (@v (list-ref (@i) (+ 1 1)))
                                  /registers))
                           (puthash
                             /reg_init_count
                             (@v (list-ref (@i) (+ 1 1)))
                             (+ (gethash
                                  /reg_init_count
                                  (@v (list-ref (@i) (+ 1 1))))
                                1)))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-constant_propagation-32
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/a_/proc_/call)
              (not (equal? (@v (list-ref (@i) (+ 1 1))) /pop_regs))
              (not (equal? (@v (list-ref (@i) (+ 1 1))) /chain_reg)))
         (let ((var-save /var) (seq-save (@assigned (@i))))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /var (car for-tmp))
                    (cond ((member /var /registers)
                           (puthash
                             /reg_init_count
                             /var
                             (+ (gethash /reg_init_count /var) 1))))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /var var-save)))))

(define (/foreach-constant_propagation-33
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (@down)
         (set! /fl_flag1 0)
         (let while-loop ()
           (cond ((= /fl_flag1 0)
                  (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                 //t_/var_/lvalue)
                              (not (null? (gethash
                                            //d/s/e/c/t_reg
                                            (@v (list-ref (@i) (+ 1 1))))))
                              (null? (gethash
                                       //d/s/e/c/t_bad
                                       (@v (list-ref (@i) (+ 1 1))))))
                         (begin (display "X") (force-output))
                         (@delete)
                         (cond ((> (@posn_n) (@size (@parent)))
                                (set! /fl_flag1 1))
                               (#t (set! /fl_flag1 0))))
                        ((@right?) (@right) (set! /fl_flag1 0))
                        (#t (set! /fl_flag1 1)))
                  (while-loop))
                 (#t #t)))
         (@up)
         (cond ((= (@size (@i)) 0) (@delete))))))

(define (/foreach-constant_propagation-34
         //depth
         //a/s_/type)
  (set! /dsects_done '())
  (@down_last)
  (set! /fl_flag2 0)
  (let while-loop ()
    (cond ((= /fl_flag2 0)
           (begin
             (cond ((= (@st (@i)) //t_/assignment)
                    (@down)
                    (set! /fl_flag1 0)
                    (let while-loop ()
                      (cond ((= /fl_flag1 0)
                             (cond ((not (and (= (@st (list-ref (@i) (+ 1 1)))
                                                 //t_/var_/lvalue)
                                              (member
                                                (@v (list-ref (@i) (+ 1 1)))
                                                /registers)
                                              (not (null? (gethash
                                                            /reg_/d/s/e/c/ts
                                                            (@v (list-ref
                                                                  (@i)
                                                                  (+ 1 1))))))
                                              (not (and (= (@st (list-ref
                                                                  (@i)
                                                                  (+ 1 2)))
                                                           //t_/variable)
                                                        (member
                                                          (@v (list-ref
                                                                (@i)
                                                                (+ 1 2)))
                                                          /reg_inits)))
                                              (null? (gethash
                                                       /done
                                                       (gethash
                                                         /reg_/d/s/e/c/ts
                                                         (@v (list-ref
                                                               (@i)
                                                               (+ 1 1))))))))
                                    (let ((var-save /name)
                                          (seq-save
                                            (@sort_list
                                              (@set_intersect
                                                /dsects_done
                                                (@set_difference
                                                  (@used (@i))
                                                  (@assigned (@i)))))))
                                      (if (vector? seq-save)
                                        (set! seq-save (vector-elts seq-save)))
                                      (let for-in-loop ((for-tmp seq-save))
                                        (cond ((not (null? for-tmp))
                                               (set! /name (car for-tmp))
                                               (begin
                                                 (set! /var
                                                   (@make //t_/var_/lvalue
                                                          /name
                                                          '()))
                                                 (set! /e
                                                   (gethash
                                                     //d/s/e/c/t_init
                                                     (@v /var)))
                                                 (@up)
                                                 (@paste_before
                                                   (@make 110
                                                          '()
                                                          (list (@make 6
                                                                       '()
                                                                       (list (@expn_to_var
                                                                               /var)
                                                                             (@var_to_expn
                                                                               /e))))))
                                                 (@right)
                                                 (@down))
                                               (for-in-loop (cdr for-tmp)))
                                              (#t #t)))
                                      (set! /name var-save))
                                    (set! /fl_flag1 1))
                                   (#t
                                    (let ((var-save /name)
                                          (seq-save
                                            (@sort_list
                                              (gethash
                                                /reg_/d/s/e/c/ts
                                                (@v (list-ref (@i) (+ 1 1)))))))
                                      (if (vector? seq-save)
                                        (set! seq-save (vector-elts seq-save)))
                                      (let for-in-loop ((for-tmp seq-save))
                                        (cond ((not (null? for-tmp))
                                               (set! /name (car for-tmp))
                                               (begin
                                                 (set! /var
                                                   (@make //t_/var_/lvalue
                                                          /name
                                                          '()))
                                                 (set! /e
                                                   (gethash
                                                     //d/s/e/c/t_init
                                                     (@v /var)))
                                                 (begin
                                                   (display " ")
                                                   (begin
                                                     (display (@n_string /name))
                                                     (begin
                                                       (display " ")
                                                       (force-output))))
                                                 (@up)
                                                 (@paste_after
                                                   (@make 110
                                                          '()
                                                          (list (@make 6
                                                                       '()
                                                                       (list (@expn_to_var
                                                                               /var)
                                                                             (@var_to_expn
                                                                               /e))))))
                                                 (@down))
                                               (for-in-loop (cdr for-tmp)))
                                              (#t #t)))
                                      (set! /name var-save))
                                    (set! /dsects_done
                                      (@set_union
                                        (gethash
                                          /reg_/d/s/e/c/ts
                                          (@v (list-ref (@i) (+ 1 1))))
                                        /dsects_done))
                                    (puthash
                                      /done
                                      (gethash
                                        /reg_/d/s/e/c/ts
                                        (@v (list-ref (@i) (+ 1 1))))
                                      1)
                                    (cond ((not (@right?)) (set! /fl_flag1 1))
                                          (#t (@right) (set! /fl_flag1 0)))))
                             (while-loop))
                            (#t #t)))
                    (@up))
                   ((and (= (@st (@i)) //t_/a_/proc_/call)
                         (not (equal? (@v (list-ref (@i) (+ 1 1))) /pop_regs)))
                    (let ((var-save /v)
                          (seq-save
                            (@sort_list
                              (@set_intersect (@assigned (@i)) /registers))))
                      (if (vector? seq-save)
                        (set! seq-save (vector-elts seq-save)))
                      (let for-in-loop ((for-tmp seq-save))
                        (cond ((not (null? for-tmp))
                               (set! /v (car for-tmp))
                               (cond ((and (not (null? (gethash
                                                         /reg_/d/s/e/c/ts
                                                         /v)))
                                           (null? (gethash
                                                    /done
                                                    (gethash
                                                      /reg_/d/s/e/c/ts
                                                      /v))))
                                      (let ((var-save /name)
                                            (seq-save
                                              (gethash /reg_/d/s/e/c/ts /v)))
                                        (if (vector? seq-save)
                                          (set! seq-save
                                            (vector-elts seq-save)))
                                        (let for-in-loop ((for-tmp seq-save))
                                          (cond ((not (null? for-tmp))
                                                 (set! /name (car for-tmp))
                                                 (begin
                                                   (set! /var
                                                     (@make //t_/var_/lvalue
                                                            /name
                                                            '()))
                                                   (set! /e
                                                     (gethash
                                                       //d/s/e/c/t_init
                                                       (@v /var)))
                                                   (begin
                                                     (display " ")
                                                     (begin
                                                       (display
                                                         (@n_string /name))
                                                       (begin
                                                         (display " ")
                                                         (force-output))))
                                                   (@paste_after
                                                     (@make 110
                                                            '()
                                                            (list (@make 6
                                                                         '()
                                                                         (list (@expn_to_var
                                                                                 /var)
                                                                               (@var_to_expn
                                                                                 /e)))))))
                                                 (for-in-loop (cdr for-tmp)))
                                                (#t #t)))
                                        (set! /name var-save))))
                               (for-in-loop (cdr for-tmp)))
                              (#t #t)))
                      (set! /v var-save))))
             (cond ((and (null? (@set_intersect /pointers (@assigned (@i))))
                         (not (null? (@set_intersect /pointers (@used (@i))))))
                    (let ((var-save /v)
                          (seq-save
                            (@set_intersect /pointers (@used (@i)))))
                      (if (vector? seq-save)
                        (set! seq-save (vector-elts seq-save)))
                      (let for-in-loop ((for-tmp seq-save))
                        (cond ((not (null? for-tmp))
                               (set! /v (car for-tmp))
                               (puthash /done /v '())
                               (for-in-loop (cdr for-tmp)))
                              (#t #t)))
                      (set! /v var-save))))
             (cond ((not (@left?)) (set! /fl_flag2 1))
                   (#t (@left) (set! /fl_flag2 0))))
           (while-loop))
          (#t #t))))

(define (/foreach-constant_propagation-35
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/comment)
              (equal? (@v (@i)) " <ENTRY POINT> "))
         (let while-loop ()
           (cond ((and (@right?) (= (@st (@i)) //t_/comment))
                  (@right)
                  (while-loop))
                 (#t #t)))
         (let while-loop ()
           (cond ((and (@right?)
                       (not (null? (@set_intersect (@used (@i)) /all_inits))))
                  (@right)
                  (while-loop))
                 (#t #t)))
         (cond ((@left?) (@left)))
         (set! /v (@make //t_/var_/lvalue /var '()))
         (set! /e (gethash //d/s/e/c/t_init /var))
         (@paste_after
           (@make 110
                  '()
                  (list (@make 6
                               '()
                               (list (@expn_to_var /v) (@var_to_expn /e))))))
         (@right)
         (cond ((@right?) (@right))))))

(define (/foreach-constant_propagation-36
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__26
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__e_save /e) (/__v_save /v))
             (set! /e (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /e) //t_/number)
                         (not (= (@v /e) 0))
                         (member (@v /e) /dispatch_codes))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt))))))
                   ((and (= (@st /e) //t_/negate)
                         (= (@st (list-ref /e (+ 1 1))) //t_/number)
                         (member
                           (- (@v (list-ref /e (+ 1 1))))
                           /dispatch_codes))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt))))))
                   ((and (= (@st /e) //t_/sub_/seg)
                         (= (@st (list-ref /e (+ 1 2))) //t_/number)))
                   ((and (or (= (@st /e) //t_/variable)
                             (= (@st /e) //t_/struct)
                             (= (@st /e) //t_/rel_/seg)
                             (= (@st /e) //t_/sub_/seg))
                         (or (member (@struct_elts /e) //r)
                             (and (= (@st /e) //t_/variable)
                                  (@starts_with? (@v /e) "NOTUSED_"))))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt)))))))
             (set! /e /__e_save)
             (set! /v /__v_save)))))
  (cond ((= (@st (@i)) //t_/var)
         (let ((var-save /var)
               (seq-save (@assigned (list-ref (@i) (+ 1 1)))))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /var (car for-tmp))
                    (cond ((@starts_with? /var "EODAD_")
                           (set! //r (@set_union //r (list (list /var))))))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /var var-save)))))

(define (/foreach-constant_propagation-37
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__26
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__e_save /e) (/__v_save /v))
             (set! /e (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /e) //t_/number)
                         (not (= (@v /e) 0))
                         (member (@v /e) /dispatch_codes))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt))))))
                   ((and (= (@st /e) //t_/negate)
                         (= (@st (list-ref /e (+ 1 1))) //t_/number)
                         (member
                           (- (@v (list-ref /e (+ 1 1))))
                           /dispatch_codes))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt))))))
                   ((and (= (@st /e) //t_/sub_/seg)
                         (= (@st (list-ref /e (+ 1 2))) //t_/number)))
                   ((and (or (= (@st /e) //t_/variable)
                             (= (@st /e) //t_/struct)
                             (= (@st /e) //t_/rel_/seg)
                             (= (@st /e) //t_/sub_/seg))
                         (or (member (@struct_elts /e) //r)
                             (and (= (@st /e) //t_/variable)
                                  (@starts_with? (@v /e) "NOTUSED_"))))
                    (set! /elt (@struct_elts /v))
                    (cond ((and (not (null? /elt))
                                (not (member /elt //r))
                                (not (equal? /elt (list /a_name))))
                           (set! /done 0)
                           (set! //r (@set_union //r (list /elt)))))))
             (set! /e /__e_save)
             (set! /v /__v_save)))))
  (cond ((= (@st (@i)) //t_/var)
         (let ((var-save /var)
               (seq-save (@assigned (list-ref (@i) (+ 1 1)))))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /var (car for-tmp))
                    (cond ((@starts_with? /var "EODAD_")
                           (set! //r (@set_union //r (list (list /var))))))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /var var-save)))))

(define (/foreach-constant_propagation-38
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (cond ((and (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                        //t_/number)
                     (not (null? (gethash
                                   //code_/hash
                                   (@v (list-ref
                                         (list-ref (@i) (+ 1 1))
                                         (+ 1 2))))))
                     (or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/var_/lvalue)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/struct_/lvalue)))
                (puthash
                  /var_value
                  (@struct_elts
                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                  (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))))))))

(define (/foreach-constant_propagation-39
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (cond ((or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                       //t_/var_/lvalue)
                    (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                       //t_/struct_/lvalue))
                (set! /elt
                  (@struct_elts
                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))
                (cond ((and (not (null? (gethash /var_value /elt)))
                            (or (not (= (@st (list-ref
                                               (list-ref (@i) (+ 1 1))
                                               (+ 1 2)))
                                        //t_/number))
                                (not (equal?
                                       (@v (list-ref
                                             (list-ref (@i) (+ 1 1))
                                             (+ 1 2)))
                                       (gethash /var_value /elt)))))
                       (puthash /var_value /elt '()))))))
        ((= (@st (@i)) //t_/a_/proc_/call)
         (let ((var-save /elt)
               (seq-save (@elts_assigned (@i))))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /elt (car for-tmp))
                    (cond ((not (null? (gethash /var_value /elt)))
                           (puthash /var_value /elt '())))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /elt var-save)))))

(define (/foreach-constant_propagation-40
         //depth
         //a/s_/type)
  (cond ((or (= (@st (@i)) //t_/variable)
             (= (@st (@i)) //t_/struct))
         (set! /elt (@struct_elts (@i)))
         (cond ((not (null? (gethash /var_value /elt)))
                (@paste_over
                  (@make //t_/number (gethash /var_value /elt) '()))
                (cond ((and (= (@st (@parent)) //t_/assign)
                            (= (@st (list-ref (@parent) (+ 1 1)))
                               //t_/var_/lvalue)
                            (equal?
                              (@v (list-ref (@parent) (+ 1 1)))
                              /destination))
                       (puthash /delete /elt (gethash /var_value /elt))
                       (set! /codes
                         (@set_union
                           (list (gethash /var_value /elt))
                           /codes)))))))))

(define (/foreach-constant_propagation-41
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (cond ((or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                       //t_/var_/lvalue)
                    (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                       //t_/struct_/lvalue))
                (set! /elt
                  (@struct_elts
                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))
                (cond ((not (null? (gethash /delete /elt))) (@delete))
                      ((and (member
                              (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                              /registers)
                            (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                               //t_/number)
                            (member
                              (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                              /codes))
                       (@delete))))))))

(define (/foreach-constant_propagation-42
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__26
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__e_save /e) (/__v_save /v))
             (set! /e (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /e) //t_/variable)
                         (= (@st /v) //t_/var_/lvalue)
                         (not (null? (gethash //d/s/e/c/ts (@v /v))))
                         (member (@v /e) /registers))
                    (puthash
                      //d/s/e/c/t_regs
                      (@v /v)
                      (@set_union
                        (gethash //d/s/e/c/t_regs (@v /v))
                        (list (@v /e))))))
             (set! /e /__e_save)
             (set! /v /__v_save))))))

(define (/foreach-constant_propagation-43
         //depth
         //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__26
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__e_save /e) (/__v_save /v))
             (set! /e (vector-ref /__/match_array 1))
             (set! /v (vector-ref /__/match_array 0))
             (cond ((and (= (@st /e) //t_/number)
                         (> (@v /e) 4)
                         (not (null? (gethash //codes (@v /e))))
                         (or (= (@st /v) //t_/struct_/lvalue)
                             (= (@st /v) //t_/sub_/seg_/lvalue)))
                    (set! //l1
                      (@set_union (list (car (@elements /v))) //l1)))
                   ((null? (@elements /e)) #t)
                   ((and (= (@st /e) //t_/variable)
                         (member (@v /e) /registers)
                         (or (= (@st /v) //t_/struct_/lvalue)
                             (= (@st /v) //t_/sub_/seg_/lvalue)))
                    (set! //l1
                      (@set_union (list (car (@elements /v))) //l1)))
                   ((and (= (@st /v) //t_/var_/lvalue)
                         (member (@v /v) /registers)
                         (or (= (@st /e) //t_/struct)
                             (= (@st /e) //t_/sub_/seg)))
                    (set! //l2
                      (@set_union (list (car (@elements /e))) //l2))))
             (set! /e /__e_save)
             (set! /v /__v_save))))))

(define (/foreach-constant_propagation-44
         //depth
         //a/s_/type)
  (cond ((or (= (@st (@i)) //t_/struct)
             (and (= (@st (@i)) //t_/sub_/seg)
                  (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
                  (= (@st (list-ref (@i) (+ 1 3))) //t_/number)
                  (= (- (@v (list-ref (@i) (+ 1 3)))
                        (@v (list-ref (@i) (+ 1 2))))
                     3)))
         (set! /name
           (gethash /new (car (@elements (@i)))))
         (cond ((not (null? /name))
                (puthash /rename /name (@i))
                (@paste_over (@make //t_/variable /name '())))))))

(define (/foreach-constant_propagation-45
         //depth
         //a/s_/type)
  (cond ((or (= (@st (@i)) //t_/struct_/lvalue)
             (and (= (@st (@i)) //t_/sub_/seg_/lvalue)
                  (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
                  (= (@st (list-ref (@i) (+ 1 3))) //t_/number)))
         (set! /name
           (gethash /new (car (@elements (@i)))))
         (cond ((not (null? /name))
                (puthash /rename /name (@lvalue_to_expn (@i)))
                (@paste_over (@make //t_/var_/lvalue /name '())))))))

(define (/foreach-constant_propagation-46
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/variable)
              (not (null? (gethash /rename (@v (@i))))))
         (@paste_over (gethash /rename (@v (@i)))))))

(define (/foreach-constant_propagation-47
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/var_/lvalue)
              (not (null? (gethash /rename (@v (@i))))))
         (@paste_over
           (@expn_to_lvalue (gethash /rename (@v (@i))))))))

(define /%const__constant_propagation__1
  (@make 110
         '()
         (list (@make 6
                      '()
                      (list (@make 501 (@make_name "r15") '())
                            (@make 217 -1 '()))))))

(define /%const__constant_propagation__2
  (@make 7
         '()
         (list (@make 313
                      '()
                      (list (@make 207 (@make_name "destination") '())
                            (@make 261 '() (list (@make 205 1 '())))))
               (@make 17 '() (list (@make 107 -2 '()))))))

(define /%const__constant_propagation__3
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -3 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -4 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          2
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17 '() (list (@make 145 '() '()))))))))

(define /%const__constant_propagation__4
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -3 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          2
                                                                          '()))))))))))))

(define /%const__constant_propagation__5
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '()))))))))))))

(define /%const__constant_propagation__6
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '()))))))))))))

(define /%const__constant_propagation__7
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          2
                                                                          '()))))))))))))

(define /%const__constant_propagation__8
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 506
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -3 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          3
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 512
                                                                          -2
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '()))))))))))))

(define /%const__constant_propagation__9
  (@make 313
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 0 '()))))

(define /%const__constant_propagation__10
  (@make 313
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 1 '()))))

(define /%const__constant_propagation__11
  (@make 313
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 2 '()))))

(define /%const__constant_propagation__12
  (@make 313
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 3 '()))))

(define /%const__constant_propagation__13
  (@make 318
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 0 '()))))

(define /%const__constant_propagation__14
  (@make 318
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 1 '()))))

(define /%const__constant_propagation__15
  (@make 318
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 2 '()))))

(define /%const__constant_propagation__16
  (@make 318
         '()
         (list (@make 261 '() (list (@make 205 1 '())))
               (@make 205 3 '()))))

(define /%const__constant_propagation__17
  (@make 313
         '()
         (list (@make 207 (@make_name "cc") '())
               (@make 205 0 '()))))

(define /%const__constant_propagation__18
  (@make 318
         '()
         (list (@make 207 (@make_name "cc") '())
               (@make 205 0 '()))))

(define /%const__constant_propagation__19
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -2 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -3 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          2
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17 '() (list (@make 145 '() '()))))))))

(define /%const__constant_propagation__20
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 305 -1 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 305 -2 '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          2
                                                                          '()))))))))))))

(define /%const__constant_propagation__21
  (@make 313
         '()
         (list (@make 207 (@make_name "cc") '())
               (@make 205 3 '()))))

(define /%const__constant_propagation__22
  (@make 318
         '()
         (list (@make 207 (@make_name "cc") '())
               (@make 205 3 '()))))

(define /%const__constant_propagation__23
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 313
                                   '()
                                   (list (@make 217 -1 '()) (@make 205 0 '())))
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          0
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 313
                                   '()
                                   (list (@make 263 -1 '()) (@make 217 -2 '())))
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          3
                                                                          '())))))))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 501
                                                                          (@make_name
                                                                            "cc")
                                                                          '())
                                                                   (@make 205
                                                                          1
                                                                          '()))))))))))))

(define /%const__constant_propagation__24
  (@make 17
         '()
         (list (@make 110
                      '()
                      (list (@make 6
                                   '()
                                   (list (@make 501 (@make_name "cc") '())
                                         (@make 217 -1 '()))))))))

(define /%const__constant_propagation__25
  (@make 17 '() (list (@make 145 '() '()))))

(define /%const__constant_propagation__26
  (@make 110
         '()
         (list (@make 6
                      '()
                      (list (@make 506 -1 '()) (@make 217 -2 '()))))))

(define /%const__constant_propagation__27
  (@make 110
         '()
         (list (@make 6
                      '()
                      (list (@make 501 (@make_name "destination") '())
                            (@make 212
                                   '()
                                   (list (@make 207 (@make_name "a") '())
                                         (@make 217 -1 '())
                                         (@make 205 4 '()))))))))

(define /%const__constant_propagation__28
  (@make 110
         '()
         (list (@make 6
                      '()
                      (list (@make 501 (@make_name "destination") '())
                            (@make 217 -1 '()))))))

(define /%const__constant_propagation__29
  (@make 101
         '()
         (list (@make 9 (@make_name "copy_result_code") '())
               (@make 10
                      '()
                      (list (@make 207 (@make_name "result_code") '())))
               (@make 12
                      '()
                      (list (@make 501 (@make_name "r15") '()))))))

(define /%const__constant_propagation__30
  (@make 110
         '()
         (list (@make 6
                      '()
                      (list (@make 506 -1 '())
                            (@make 261 '() (list (@make 205 2 '()))))))))

(define /%const__constant_propagation__31
  (@make 7
         '()
         (list (@make 308 '() '())
               (@make 17 '() (list (@make 145 '() '()))))))

(define /%const__constant_propagation__32
  (@make 133
         '()
         (list (@make 17
                      '()
                      (list (@make 107 -1 '())
                            (@make 114
                                   '()
                                   (list (@make 7
                                                '()
                                                (list (@make 313
                                                             '()
                                                             (list (@make 217
                                                                          -2
                                                                          '())
                                                                   (@make 217
                                                                          -3
                                                                          '())))
                                                      (@make 17
                                                             '()
                                                             (list (@make 107
                                                                          -4
                                                                          '())))))
                                         (@make 7
                                                '()
                                                (list (@make 308 '() '())
                                                      (@make 17
                                                             '()
                                                             (list (@make 145
                                                                          '()
                                                                          '())))))))
                            (@make 107 -5 '())
                            (@make 110
                                   '()
                                   (list (@make 6
                                                '()
                                                (list (@make 512 -2 '())
                                                      (@make 217 -6 '())))))
                            (@make 107 -7 '()))))))

(define /%const__constant_propagation__33
  (@make 212
         '()
         (list (@make 207 (@make_name "a") '())
               (@make 220
                      '()
                      (list (@make 217 -1 '()) (@make 217 -2 '())))
               (@make 205 4 '()))))

(define /%const__constant_propagation__34
  (@make 504
         '()
         (list (@make 501 (@make_name "a") '())
               (@make 220
                      '()
                      (list (@make 217 -1 '()) (@make 217 -2 '())))
               (@make 205 4 '()))))

(set! //bug_/fix
  "                                                    ")

(set! /reg_inits
  (@make_set
    (let ((l (list "__r0_init__"
                   "__r1_init__"
                   "__r2_init__"
                   "__r3_init__"
                   "__r4_init__"
                   "__r5_init__"
                   "__r6_init__"
                   "__r7_init__"
                   "__r8_init__"
                   "__r9_init__"
                   "__r10_init__"
                   "__r11_init__"
                   "__r12_init__"
                   "__r13_init__"
                   "__r14_init__"
                   "__r15_init__"))
          (map-result '()))
      (let while-loop ()
        (cond ((not (null? l))
               (set! map-result
                 (cons (@make_name (car l)) map-result))
               (set! l (cdr l))
               (while-loop))
              (#t #t)))
      (reverse map-result))))

(set! /date_time_functs
  (let ((l (list "system_time_bin"
                 "system_time_pkd"
                 "system_YYYYDDD_pkd"
                 "system_YYYYMMDD_pkd"
                 "system_MMDDYYYY_pkd"
                 "system_DDMMYYYY_pkd"
                 "system_time_pkds"
                 "system_YYYYDDD_pkds"
                 "system_YYYYMMDD_pkds"
                 "system_MMDDYYYY_pkds"
                 "system_DDMMYYYY_pkds"
                 "system_time_str"
                 "system_YYYYDDD_str"
                 "system_YYYYMMDD_str"
                 "system_MMDDYYYY_str"
                 "system_DDMMYYYY_str"
                 "system_CCYYDDD_pkds"
                 "system_CCYYDDD_str"))
        (map-result '()))
    (let while-loop ()
      (cond ((not (null? l))
             (set! map-result
               (cons (@make_name (car l)) map-result))
             (set! l (cdr l))
             (while-loop))
            (#t #t)))
    (reverse map-result)))

(set! //s/m/l/r/e/g/s '())

(set! //c/p_/result '())

(define (@constant_propagation_test)
  (cond ((or (= (@st (@i)) //t_/condition)
             (= (@st (@i)) //t_/expression))
         (@fail "Selection contains no statements"))
        (#t (@pass))))

(define (@constant_propagation_code //data)
  (let ((//l-save //l)
        (//entries-save //entries)
        (//call_/path-save //call_/path)
        (//constants-save //constants)
        (//vcons-save //vcons)
        (/vcons-save /vcons)
        (//d/s/e/c/ts-save //d/s/e/c/ts)
        (//c/p_/state-save //c/p_/state)
        (//state_/saves-save //state_/saves)
        (//unfold_/dispatch-save //unfold_/dispatch)
        (/calls_processed-save /calls_processed)
        (/call_depth-save /call_depth)
        (/call_budget-save /call_budget)
        (/effort-save /effort)
        (/initial_call_budget-save /initial_call_budget)
        (/registers-save /registers)
        (/x86_regs-save /x86_regs)
        (/cc_name-save /cc_name)
        (/cc1_name-save /cc1_name)
        (/zf_name-save /zf_name)
        (/cf_name-save /cf_name)
        (/r1_name-save /r1_name)
        (/r1_new-save /r1_new)
        (/push_regs-save /push_regs)
        (/pop_regs-save /pop_regs)
        (/chain_reg-save /chain_reg)
        (/reg_stack-save /reg_stack)
        (/call_stack-save /call_stack)
        (/call_via_ptr-save /call_via_ptr)
        (/call_via_ptr_pars-save /call_via_ptr_pars)
        (/pack-save /pack)
        (//e/x/e/c_/c/i/c/s-save //e/x/e/c_/c/i/c/s)
        (/result_code-save /result_code)
        (/mvi (@make_name "mvi"))
        (/true-save /true)
        (/false-save /false)
        (/destination-save /destination)
        (/dispatch-save /dispatch)
        (//a/s_/type (@as_type))
        (/exit_flag-save /exit_flag)
        (/sizeof-save /sizeof)
        (/dispatch_codes-save /dispatch_codes)
        (/return_elts-save /return_elts)
        (//code_/hash-save //code_/hash)
        (/rename-save /rename)
        (/posn '())
        (/orig_program-save /orig_program)
        (//notused_/value-save //notused_/value)
        (//absorb_/tries-save //absorb_/tries)
        (//migration-save //migration))
    (set! //l (list (list 0 '())))
    (set! //entries '())
    (set! //call_/path '())
    (set! //constants '())
    (set! //vcons '())
    (set! /vcons '())
    (set! //d/s/e/c/ts (my-make-hash-table 16))
    (set! //c/p_/state '())
    (set! //state_/saves 0)
    (set! //unfold_/dispatch 1)
    (set! /calls_processed 0)
    (set! /call_depth 0)
    (set! /call_budget 25600)
    (set! /effort 0)
    (set! /initial_call_budget 0)
    (set! /registers
      (@make_set
        (let ((l (list "r0"
                       "r1"
                       "r2"
                       "r3"
                       "r4"
                       "r5"
                       "r6"
                       "r7"
                       "r8"
                       "r9"
                       "r10"
                       "r11"
                       "r12"
                       "r13"
                       "r14"
                       "r15"
                       "ax"
                       "bx"
                       "cx"
                       "dx"
                       "bp"
                       "si"
                       "di"
                       "cs"
                       "ds"
                       "ss"
                       "es"))
              (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result
                     (cons (@make_name (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (set! /x86_regs
      (@make_set
        (let ((l (list "ax" "bx" "cx" "dx")) (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result
                     (cons (@make_name (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (set! /cc_name (@make_name "cc"))
    (set! /cc1_name (@make_name "cc1"))
    (set! /zf_name (@make_name "zf"))
    (set! /cf_name (@make_name "cf"))
    (set! /r1_name (@make_name "r1"))
    (set! /r1_new (@make_name "___r1_init___"))
    (set! /push_regs (@make_name "push_regs"))
    (set! /pop_regs (@make_name "pop_regs"))
    (set! /chain_reg (@make_name "chain_reg"))
    (set! /reg_stack (@make_name "reg_stack"))
    (set! /call_stack (@make_name "call_stack"))
    (set! /call_via_ptr (@make_name "call_via_ptr"))
    (set! /call_via_ptr_pars
      (@make_name "call_via_ptr_pars"))
    (set! /pack (@make_name "pack"))
    (set! //e/x/e/c_/c/i/c/s
      (@make_name "EXEC_CICS"))
    (set! /result_code (@make_name "result_code"))
    (set! /true (@make //t_/true '() '()))
    (set! /false (@make //t_/false '() '()))
    (set! /destination (@make_name "destination"))
    (set! /dispatch 0)
    (set! /exit_flag (@make_name "exit_flag"))
    (set! /sizeof (@make_name "sizeof"))
    (set! /dispatch_codes '())
    (set! /return_elts '())
    (set! //code_/hash (my-make-hash-table 16))
    (set! /rename (my-make-hash-table 16))
    (set! /orig_program (@i))
    (set! //notused_/value (my-make-hash-table 16))
    (set! //absorb_/tries
      (+ (quotient (@stat_count_nc (@program)) 100) 20))
    (set! //migration 1)
    (let ((/list (let ((l (@split (@string //data))) (map-result '()))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! map-result
                              (cons (@string_to_num (car l)) map-result))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   (reverse map-result))))
      (cond ((= (if (vector? /list)
                  (vector-length /list)
                  (length /list))
                3)
             (set! //migration
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 1 1))
                   (list-ref name (- 1 1)))))
             (set! /effort
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! /call_budget
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 3 1))
                   (list-ref name (- 3 1))))))
            ((= (if (vector? /list)
                  (vector-length /list)
                  (length /list))
                2)
             (set! /effort
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 1 1))
                   (list-ref name (- 1 1)))))
             (set! /call_budget
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1))))))
            ((and (= (if (vector? /list)
                       (vector-length /list)
                       (length /list))
                     1)
                  (> (let ((name /list))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     0))
             (set! /call_budget
               (let ((name /list))
                 (if (vector? name)
                   (vector-ref name (- 1 1))
                   (list-ref name (- 1 1))))))))
    (begin
      (display "Constant_Propagation effort = ")
      (begin
        (display /effort)
        (begin
          (display " budget = ")
          (begin
            (display /call_budget)
            (newline)
            (force-output)))))
    (set! /initial_call_budget /call_budget)
    (@foreach_stats
      /foreach-constant_propagation-1
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (cond ((member //t_/a_/s (@stat_types (@i)))
           (set! /posn (@posn))
           (@find_type //t_/a_/s)
           (set! /dispatch_codes
             (@cp_find_dispatch_codes (@make_name "dispatch")))
           (set! /return_elts
             (@cp_find_return_elts /dispatch_codes))
           (@goto '())
           (let ((var-save /code) (seq-save /dispatch_codes))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /code (car for-tmp))
                      (cond ((> /code 0) (puthash //code_/hash /code 1)))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /code var-save))
           (set! /rename
             (@fd_rename_dsect_code_stores
               //code_/hash
               /rename))
           (cond ((and #f (> /call_budget 200))
                  (@cp_once_called_codes //code_/hash)))
           (@goto /posn)
           (set! /return_elts
             (@set_union
               /return_elts
               (list (list (@make_name "r14")))))
           (set! /return_elts
             (@set_union
               /return_elts
               (@cp_find_return_elts /dispatch_codes))))
          (#t (set! /return_elts '())))
    (@edit)
    (@foreach_statement
      /foreach-constant_propagation-2
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! //constants '())
    (let ((var-save /v)
          (seq-save
            (@set_union
              (@set_difference (@used (@i)) (@assigned (@i)))
              /reg_inits)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /v (car for-tmp))
               (set! //constants (cons (list /v) //constants))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /v var-save))
    (set! //constants
      (@set_union
        (@make_set //constants)
        (@set_difference
          (@elts_used (@i))
          (@elts_assigned (@i)))))
    (@undo_edit)
    (let ((/new-save /new) (/elt-save /elt))
      (set! /new '())
      (set! /elt '())
      (let ((var-save /elt) (seq-save //constants))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /elt (car for-tmp))
                 (cond ((and (= (if (vector? /elt)
                                  (vector-length /elt)
                                  (length /elt))
                                1)
                             (@starts_with? (car /elt) "NOTUSED_"))
                        #t)
                       ((< (last-1 /elt) 0))
                       (#t (set! /new (cons /elt /new))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /elt var-save))
      (set! //constants (@make_set /new))
      (set! /new /new-save)
      (set! /elt /elt-save))
    (let ((/addr-save /addr))
      (set! /addr '())
      (@foreach_expn
        /foreach-constant_propagation-3
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (set! //constants
        (@set_difference //constants (@make_set /addr)))
      (set! /addr /addr-save))
    (let ((//vcons_vals-save //vcons_vals))
      (set! //vcons_vals (my-make-hash-table 16))
      (@foreach_statement
        /foreach-constant_propagation-4
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@foreach_statement
        /foreach-constant_propagation-5
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /reg) (seq-save /registers))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /reg (car for-tmp))
                 (begin
                   (set! //vcons
                     (@set_difference //vcons (list (list /reg))))
                   (puthash //vcons_vals (list (list /reg)) '()))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /reg var-save))
      (puthash
        //vcons_vals
        (list (list (@make_name "destination")))
        '())
      (@foreach_expn
        /foreach-constant_propagation-6
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /var) (seq-save (@variables (@i))))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /var (car for-tmp))
                 (cond ((or (@starts_with? /var "V_")
                            (@starts_with? /var "v_"))
                        (set! /vcons (@set_union (list /var) /vcons)))
                       ((@starts_with? /var "SMLREGS_")
                        (set! //s/m/l/r/e/g/s
                          (@set_union (list /var) //s/m/l/r/e/g/s))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /var var-save))
      (set! //vcons_vals //vcons_vals-save))
    (begin
      (display "Call Budget = ")
      (begin
        (display /call_budget)
        (newline)
        (force-output)))
    (set! //d/s/e/c/ts
      (@cp_find_dsects //d/s/e/c/ts))
    (begin
      (display "DSECTs = ")
      (begin
        (display
          (@join " "
                 (let ((l (@hash_keys //d/s/e/c/ts)) (map-result '()))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! map-result
                              (cons (@n_string (car l)) map-result))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   (reverse map-result))))
        (newline)
        (force-output)))
    (cond ((null? (@posn))
           (@cp_constant_dsect_pointers //d/s/e/c/ts)))
    (set! //l (@cp_generic //l))
    (set! //c/p_/result //l)
    (cond ((not (null? (@hash_keys /rename)))
           (set! /posn (@posn))
           (@goto '())
           (@fd_restore_dsect_code_stores /rename)
           (@goto /posn)))
    (begin (display " ") (newline) (force-output))
    (begin
      (display "Simplifying the result")
      (newline)
      (force-output))
    (@trans //t/r_/simplify "")
    (set! //l //l-save)
    (set! //entries //entries-save)
    (set! //call_/path //call_/path-save)
    (set! //constants //constants-save)
    (set! //vcons //vcons-save)
    (set! /vcons /vcons-save)
    (set! //d/s/e/c/ts //d/s/e/c/ts-save)
    (set! //c/p_/state //c/p_/state-save)
    (set! //state_/saves //state_/saves-save)
    (set! //unfold_/dispatch //unfold_/dispatch-save)
    (set! /calls_processed /calls_processed-save)
    (set! /call_depth /call_depth-save)
    (set! /call_budget /call_budget-save)
    (set! /effort /effort-save)
    (set! /initial_call_budget
      /initial_call_budget-save)
    (set! /registers /registers-save)
    (set! /x86_regs /x86_regs-save)
    (set! /cc_name /cc_name-save)
    (set! /cc1_name /cc1_name-save)
    (set! /zf_name /zf_name-save)
    (set! /cf_name /cf_name-save)
    (set! /r1_name /r1_name-save)
    (set! /r1_new /r1_new-save)
    (set! /push_regs /push_regs-save)
    (set! /pop_regs /pop_regs-save)
    (set! /chain_reg /chain_reg-save)
    (set! /reg_stack /reg_stack-save)
    (set! /call_stack /call_stack-save)
    (set! /call_via_ptr /call_via_ptr-save)
    (set! /call_via_ptr_pars /call_via_ptr_pars-save)
    (set! /pack /pack-save)
    (set! //e/x/e/c_/c/i/c/s //e/x/e/c_/c/i/c/s-save)
    (set! /result_code /result_code-save)
    (set! /true /true-save)
    (set! /false /false-save)
    (set! /destination /destination-save)
    (set! /dispatch /dispatch-save)
    (set! /exit_flag /exit_flag-save)
    (set! /sizeof /sizeof-save)
    (set! /dispatch_codes /dispatch_codes-save)
    (set! /return_elts /return_elts-save)
    (set! //code_/hash //code_/hash-save)
    (set! /rename /rename-save)
    (set! /orig_program /orig_program-save)
    (set! //notused_/value //notused_/value-save)
    (set! //absorb_/tries //absorb_/tries-save)
    (set! //migration //migration-save)))

(define (@cp_find_dsects //d/s/e/c/ts-par)
  (let ((//d/s/e/c/ts-save //d/s/e/c/ts)
        (funct-result '()))
    (set! //d/s/e/c/ts //d/s/e/c/ts-par)
    (@foreach_expn
      /foreach-constant_propagation-7
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@foreach_lvalue
      /foreach-constant_propagation-8
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! funct-result //d/s/e/c/ts)
    (set! //d/s/e/c/ts //d/s/e/c/ts-save)
    funct-result))

(define (@cp_save_state)
  (set! //state_/saves (+ //state_/saves 1))
  (set! //c/p_/state
    (cons /calls_processed //c/p_/state))
  (set! //c/p_/state
    (cons /call_budget //c/p_/state))
  (set! /call_budget (quotient /call_budget 2)))

(define (@cp_restore_state)
  (set! /call_budget (car //c/p_/state))
  (set! //c/p_/state (cdr //c/p_/state))
  (set! /calls_processed (car //c/p_/state))
  (set! //c/p_/state (cdr //c/p_/state)))

(set! //qry_/var_/name
  (@make_name "Qry_var_Name"))

(define (@cp_var_name //i)
  (let ((//r-save //r)
        (//s/t (@st //i))
        (funct-result '()))
    (set! //r '())
    (cond ((or (= //s/t //t_/variable)
               (= //s/t //t_/var_/lvalue))
           (set! //r (list (@v //i))))
          (#t
           (let ((//previous (@dtable_get //i //qry_/var_/name)))
             (cond ((null? //previous)
                    (cond ((or (= //s/t //t_/struct)
                               (= //s/t //t_/struct_/lvalue))
                           (cond ((@is_mem? (list-ref //i (+ 1 2)))
                                  (set! //r
                                    (concat
                                      (cons /a_name
                                            (@cp_var_name
                                              (@get_mem
                                                (list-ref //i (+ 1 2)))))
                                      (list (@v (list-ref //i (+ 1 1)))))))
                                 (#t
                                  (set! //r
                                    (concat
                                      (@cp_var_name (list-ref //i (+ 1 2)))
                                      (list (@v (list-ref //i (+ 1 1)))))))))
                          ((or (= //s/t //t_/aref)
                               (= //s/t //t_/aref_/lvalue))
                           (cond ((or (= (@st (list-ref //i (+ 1 1)))
                                         //t_/variable)
                                      (= (@st (list-ref //i (+ 1 1)))
                                         //t_/var_/lvalue))
                                  (cond ((@cp_all_numbers?
                                           (@cs (list-ref //i (+ 1 2))))
                                         (set! //r
                                           (cons (@v (list-ref //i (+ 1 1)))
                                                 (let ((l (@cs (list-ref
                                                                 //i
                                                                 (+ 1 2))))
                                                       (map-result '()))
                                                   (let while-loop ()
                                                     (cond ((not (null? l))
                                                            (set! map-result
                                                              (cons (@cp_minus_v
                                                                      (car l))
                                                                    map-result))
                                                            (set! l (cdr l))
                                                            (while-loop))
                                                           (#t #t)))
                                                   (reverse
                                                     map-result)))))))))))
                   (#t (set! //r (@dtable_value_part //previous)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@cp_minus_v //i) (- (@v //i)))

(define (@cp_all_numbers? /l)
  (or (null? /l)
      (and (= (@st (car /l)) //t_/number)
           (@cp_all_numbers? (cdr /l)))))

(define (@cp_variable? //i)
  (not (null? (@cp_var_name //i))))

(define (@cp_get //l //n)
  (if (null? //l)
    '()
    (if (equal? (car (car //l)) //n)
      (car (cdr (car //l)))
      (@cp_get (cdr //l) //n))))

(define (@cp_put //l //n //v)
  (let ((/old (@cp_get //l //n)))
    (if (or (equal? (car //n) /exit_flag)
            (and (not (null? /old)) (@equal? //v /old)))
      //l
      (cons (list //n //v) (@cp_remove //l //n)))))

(define (@cp_put0 //l //n //v)
  (if (or (null? //l)
          (> (let ((name (let ((name //l))
                           (if (vector? name)
                             (vector-ref name (- 1 1))
                             (list-ref name (- 1 1))))))
               (if (vector? name)
                 (vector-ref name (- 1 1))
                 (list-ref name (- 1 1))))
             0))
    (if (not (equal? (car //n) /exit_flag))
      (cons (list 0 (list (list //n //v))) //l)
      //l)
    (if (equal? (car //n) /exit_flag)
      (if (or (= (@v //v) 1)
              (and (> //c/p_/in_/preserves_/dest 1)
                   (> (@v //v) 1)))
        (cdr //l)
        //l)
      (cons (list 0
                  (@cp_put
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    //n
                    //v))
            (cdr //l)))))

(define (@cp_remove_sub //l-par //n-par)
  (let ((//n-save //n)
        (//l-save //l)
        (//r-save //r)
        (funct-result '()))
    (set! //n //n-par)
    (set! //l //l-par)
    (set! //r '())
    (cond ((null? //l) #t)
          ((@either_prefix?
             //n
             (let ((name (let ((name //l))
                           (if (vector? name)
                             (vector-ref name (- 1 1))
                             (list-ref name (- 1 1))))))
               (if (vector? name)
                 (vector-ref name (- 1 1))
                 (list-ref name (- 1 1)))))
           (set! //r (@cp_remove_sub (cdr //l) //n)))
          ((and (= (@st (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1)))))
                   //t_/variable)
                (equal?
                  (@v (let ((name (let ((name //l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 2 1))
                          (list-ref name (- 2 1)))))
                  (car //n)))
           (set! //r (@cp_remove_sub (cdr //l) //n)))
          ((and (= (@st (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1)))))
                   //t_/minus)
                (member
                  (car //n)
                  (@variables
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1)))))))
           (set! //r (@cp_remove_sub (cdr //l) //n)))
          ((and (= (@st (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1)))))
                   //t_/struct)
                (not (equal? //n (list /a_name))))
           (cond ((@either_prefix?
                    //n
                    (@struct_elts
                      (let ((name (let ((name //l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 2 1))
                          (list-ref name (- 2 1))))))
                  (set! //r (@cp_remove_sub (cdr //l) //n)))
                 (#t
                  (set! //r
                    (cons (car //l) (@cp_remove_sub (cdr //l) //n))))))
          (#t
           (set! //r
             (cons (car //l) (@cp_remove_sub (cdr //l) //n)))))
    (set! funct-result //r)
    (set! //n //n-save)
    (set! //l //l-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_remove //l //n)
  (if (and (= (if (vector? //n)
                (vector-length //n)
                (length //n))
              1)
           (not (null? (gethash //d/s/e/c/ts (car //n)))))
    (@cp_remove_sub
      (@cp_remove_sub //l //n)
      (cons /a_name //n))
    (@cp_remove_sub //l //n)))

(define (@cp_merge //l1-par //l2-par)
  (let ((//l2-save //l2)
        (//l1-save //l1)
        (//r-save //r)
        (funct-result '()))
    (set! //l2 //l2-par)
    (set! //l1 //l1-par)
    (set! //r '())
    (cond ((or (null? //l1) (null? //l2)) (set! //r '()))
          ((@equal?
             (let ((name (let ((name //l1))
                           (if (vector? name)
                             (vector-ref name (- 1 1))
                             (list-ref name (- 1 1))))))
               (if (vector? name)
                 (vector-ref name (- 2 1))
                 (list-ref name (- 2 1))))
             (@cp_get
               //l2
               (let ((name (let ((name //l1))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 1 1))
                   (list-ref name (- 1 1))))))
           (set! //r
             (cons (car //l1) (@cp_merge (cdr //l1) //l2))))
          (#t (set! //r (@cp_merge (cdr //l1) //l2))))
    (set! funct-result //r)
    (set! //l2 //l2-save)
    (set! //l1 //l1-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_merge_keep //l1-par //l2-par)
  (let ((//l2-save //l2)
        (//l1-save //l1)
        (//r-save //r)
        (funct-result '()))
    (set! //l2 //l2-par)
    (set! //l1 //l1-par)
    (set! //r '())
    (cond ((or (null? //l1) (null? //l2)) (set! //r '()))
          (#t
           (let ((/v1values (cdr (car //l1)))
                 (/v2 (@cp_get
                        //l2
                        (let ((name (let ((name //l1))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1)))))))
             (cond ((null? /v2)
                    (set! //r (@cp_merge_keep (cdr //l1) //l2)))
                   ((@cp_in? /v2 /v1values)
                    (set! //r
                      (cons (car //l1)
                            (@cp_merge_keep (cdr //l1) //l2))))
                   (#t
                    (set! //r
                      (cons (cons (let ((name (let ((name //l1))
                                                (if (vector? name)
                                                  (vector-ref name (- 1 1))
                                                  (list-ref name (- 1 1))))))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))
                                  (cons /v2 /v1values))
                            (@cp_merge_keep (cdr //l1) //l2))))))))
    (set! funct-result //r)
    (set! //l2 //l2-save)
    (set! //l1 //l1-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_in? /v //l)
  (and (not (null? //l))
       (or (@equal? /v (car //l))
           (@cp_in? /v (cdr //l)))))

(define (@cp_mergel //l1-par //l2-par)
  (let ((//l2-save //l2)
        (//l1-save //l1)
        (//r-save //r)
        (funct-result '()))
    (set! //l2 //l2-par)
    (set! //l1 //l1-par)
    (set! //r '())
    (cond ((null? //l1) (set! //r //l2))
          ((null? //l2) (set! //r //l1))
          ((< (let ((name (let ((name //l1))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1))))
              (let ((name (let ((name //l2))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1)))))
           (set! //r
             (cons (car //l1) (@cp_mergel (cdr //l1) //l2))))
          ((> (let ((name (let ((name //l1))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1))))
              (let ((name (let ((name //l2))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1)))))
           (set! //r
             (cons (car //l2) (@cp_mergel //l1 (cdr //l2)))))
          (#t
           (set! //r
             (cons (list (let ((name (let ((name //l1))
                                       (if (vector? name)
                                         (vector-ref name (- 1 1))
                                         (list-ref name (- 1 1))))))
                           (if (vector? name)
                             (vector-ref name (- 1 1))
                             (list-ref name (- 1 1))))
                         (@cp_merge
                           (let ((name (let ((name //l1))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))
                           (let ((name (let ((name //l2))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))))
                   (@cp_mergel (cdr //l1) (cdr //l2))))))
    (set! funct-result //r)
    (set! //l2 //l2-save)
    (set! //l1 //l1-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_constant_? //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 0)
    (cond ((@cp_constant_? //i)
           (@print_wsl //i "")
           (begin
             (display "-- is constant")
             (newline)
             (force-output))
           (set! //r 1))
          (#t
           (@print_wsl //i "")
           (begin
             (display "-- NOT constant")
             (newline)
             (force-output))
           (set! //r 0)))
    (set! funct-result (= //r 1))
    (set! //r //r-save)
    funct-result))

(define (@cp_constant? //i)
  (or (= (@st //i) //t_/number)
      (= (@st //i) //t_/string)
      (and (= (@st //i) //t_/struct)
           (@cp_constant? (list-ref //i (+ 1 2)))
           (member (@struct_elts //i) //constants))
      (and (= (@st //i) //t_/variable)
           (member (@struct_elts //i) //constants))
      (and (@is_mem? //i)
           (@cp_constant? (@get_mem //i)))
      (and (= (@st //i) //t_/negate)
           (= (@st (list-ref //i (+ 1 1))) //t_/number))
      (and (= (@st //i) //t_/minus)
           (= (@st (list-ref //i (+ 1 1))) //t_/variable)
           (member
             (list (@v (list-ref //i (+ 1 1))))
             //constants)
           (= (@st (list-ref //i (+ 1 2))) //t_/number))
      (and (= (@st //i) //t_/minus)
           (= (@st (list-ref //i (+ 1 1))) //t_/plus)
           (= (@st (list-ref (list-ref //i (+ 1 1)) (+ 1 1)))
              //t_/variable)
           (= (@st (list-ref (list-ref //i (+ 1 1)) (+ 1 2)))
              //t_/variable)
           (@is_addr? (list-ref //i (+ 1 2)))
           (= (@st (@get_addr (list-ref //i (+ 1 2))))
              //t_/struct)
           (equal?
             (car (@cp_struct_elts
                    (@get_addr (list-ref //i (+ 1 2)))))
             (@v (list-ref (list-ref //i (+ 1 1)) (+ 1 2)))))
      (and (@is_addr? //i)
           (or (= (@st (@get_addr //i)) //t_/struct)
               (= (@st (@get_addr //i)) //t_/variable))
           (not (member /a_name (@used (@get_addr //i)))))
      (and (= (@st //i) //t_/x_/funct_/call)
           (member
             (@v (list-ref //i (+ 1 1)))
             /date_time_functs))
      (and (= (@st //i) //t_/variable)
           (member (@v //i) /vcons))
      (equal? (@variables //i) (list /a_name))
      (and (= (@st //i) //t_/array)
           (@cp_constant? (list-ref //i (+ 1 1)))
           (@cp_constant? (list-ref //i (+ 1 2))))
      (and (= (@st //i) //t_/sequence)
           (@cp_constant? (list-ref //i (+ 1 1))))
      (and (= (@gt //i) //t_/expressions)
           (not (@cs? //i)))
      (and (= (@gt //i) //t_/expressions)
           (@cs? //i)
           (@cp_constant? (list-ref //i (+ 1 1)))
           (@cp_constant?
             (@make //t_/expressions '() (cdr (@cs //i)))))))

(define (@cp_struct_elts //i)
  (let ((//r (@struct_elts //i)))
    (cond ((and (> (if (vector? //r)
                     (vector-length //r)
                     (length //r))
                   1)
                (equal? (car //r) /a_name))
           (set! //r (cdr //r))))
    //r))

(define (@cp_generic //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//g/t (@gt (@i))))
      (cond ((= //g/t //t_/statement)
             (set! //l (@cp_statement //l)))
            ((= //g/t //t_/expression)
             (set! //l (@cp_update //l)))
            ((= //g/t //t_/condition)
             (set! //l (@cp_update //l)))
            ((= //g/t //t_/definition)
             (set! //l (@cp_definition //l)))
            ((= //g/t //t_/lvalue)
             (set! //l (@cp_update //l)))
            ((= //g/t //t_/guarded)
             (set! //l (@cp_guarded //l)))
            ((= //g/t //t_/action)
             (set! //l (@cp_action //l)))
            ((= //g/t //t_/statements)
             (set! //l (@cp_statements //l)))
            ((= //g/t //t_/expressions)
             (set! //l (@cp_update //l)))
            ((= //g/t //t_/lvalues)
             (set! //l (@cp_update //l)))
            ((= //g/t //t_/assigns)
             (set! //l (@cp_assigns //l)))
            ((= //g/t //t_/definitions)
             (set! //l (@cp_definitions //l)))
            ((= //g/t //t_/actions)
             (set! //l (@cp_actions //l)))
            (#t
             (begin
               (display "UNKNOWN GENERIC TYPE: ")
               (begin
                 (display (@type_name //g/t))
                 (begin
                   (display "(")
                   (begin
                     (display //g/t)
                     (begin
                       (display ") at ")
                       (begin
                         (display (@posn))
                         (newline)
                         (force-output))))))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_update //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/name-save /name)
          (/val-save /val)
          (/l-save /l)
          (/change-save /change)
          (/i-save /i)
          (/n-save /n)
          (/p1-save /p1))
      (set! /name '())
      (set! /val '())
      (set! /l '())
      (set! /change 0)
      (set! /i 0)
      (set! /n 0)
      (set! /p1 '())
      (cond ((= //migration 0))
            ((and (not (null? //l))
                  (= (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     0)
                  (not (null? (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1)))))))
             (set! /l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (@ateach_expn
               /foreach-constant_propagation-9
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (cond ((> /change 0) (@trans //t/r_/simplify "")))))
      (set! /name /name-save)
      (set! /val /val-save)
      (set! /l /l-save)
      (set! /change /change-save)
      (set! /i /i-save)
      (set! /n /n-save)
      (set! /p1 /p1-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_clobber //l)
  (cond ((and (not (null? //l))
              (= (let ((name (let ((name //l))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))))
                   (if (vector? name)
                     (vector-ref name (- 1 1))
                     (list-ref name (- 1 1))))
                 0))
         (if (vector? //l)
           (let ((sub (vector-ref //l (- 1 1))))
             (if (vector? sub)
               (vector-set! sub (- 2 1) '())
               (set! sub (replace-nth sub 2 '())))
             (vector-set! //l (- 1 1) sub))
           (let ((sub (car (nthcdr (- 1 1) //l))))
             (if (vector? sub)
               (vector-set! sub (- 2 1) '())
               (set! sub (replace-nth sub 2 '())))
             (set! //l (replace-nth //l 1 sub))))))
  //l)

(define (@cp_clobber_broke //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (begin (display "B") (force-output))
    (cond ((<= /initial_call_budget 200)
           (set! //l (@cp_clobber //l)))
          ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (if (vector? //l)
             (let ((sub (vector-ref //l (- 1 1))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_clobber_zeros
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_clobber_zeros
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))))))
               (vector-set! //l (- 1 1) sub))
             (let ((sub (car (nthcdr (- 1 1) //l))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_clobber_zeros
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_clobber_zeros
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))))))
               (set! //l (replace-nth //l 1 sub))))
           (let ((var-save /n)
                 (seq-save (@gen_tvs (@i) (@as_type))))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /n (car for-tmp))
                      (cond ((> /n 0)
                             (begin
                               (display "<")
                               (begin
                                 (display /n)
                                 (begin (display ">") (force-output))))
                             (set! //l
                               (@cp_exit_sub
                                 (let ((name (let ((name //l))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1))))
                                 /n
                                 //l))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /n var-save))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_all_but /l /except)
  (if (null? /l)
    '()
    (if (member
          (let ((name (let ((name (let ((name /l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 1 1))
                          (list-ref name (- 1 1))))))
            (if (vector? name)
              (vector-ref name (- 1 1))
              (list-ref name (- 1 1))))
          /except)
      (cons (let ((name /l))
              (if (vector? name)
                (vector-ref name (- 1 1))
                (list-ref name (- 1 1))))
            (@cp_all_but (cdr /l) /except))
      (@cp_all_but (cdr /l) /except))))

(define (@cp_clobber_list /l-par /clobbered)
  (let ((/l-save /l)
        (/elt-save /elt)
        (funct-result '()))
    (set! /l /l-par)
    (set! /elt '())
    (let ((var-save /elt) (seq-save /clobbered))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /elt (car for-tmp))
               (cond ((or (> (if (vector? /elt)
                               (vector-length /elt)
                               (length /elt))
                             1)
                          (not (equal? (car /elt) /a_name)))
                      (set! /l (@cp_remove /l /elt))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /elt var-save))
    (set! funct-result /l)
    (set! /l /l-save)
    (set! /elt /elt-save)
    funct-result))

(set! //e/n/t/r/c (@make_name "ENTRC"))

(define (@cp_clobber_zeros /l-par)
  (let ((/l-save /l)
        (//r-save //r)
        (/tpf_call 0)
        (funct-result '()))
    (set! /l /l-par)
    (set! //r '())
    (cond ((and (= (@st (@i)) //t_/a_/proc_/call)
                (equal? (@v (list-ref (@i) (+ 1 1))) //e/n/t/r/c))
           (set! /tpf_call 1)))
    (let ((var-save /pair) (seq-save /l))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /pair (car for-tmp))
               (cond ((or (equal?
                            (let ((name /pair))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))
                            (list /reg_stack))
                          (equal?
                            (let ((name /pair))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))
                            (list /call_stack)))
                      (set! //r (cons /pair //r)))
                     ((and (= (if (vector?
                                    (let ((name /pair))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))
                                (vector-length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1)))))
                                (length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                              1)
                           (@starts_with?
                             (@n_string
                               (let ((name (let ((name /pair))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1)))))
                             "F_"))
                      (set! //r (cons /pair //r)))
                     ((and (= (if (vector?
                                    (let ((name /pair))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))
                                (vector-length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1)))))
                                (length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                              1)
                           (@starts_with?
                             (@n_string
                               (let ((name (let ((name /pair))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1)))))
                             "HANDLE_"))
                      (set! //r (cons /pair //r)))
                     ((and (= (if (vector?
                                    (let ((name /pair))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))
                                (vector-length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1)))))
                                (length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                              1)
                           (@starts_with?
                             (@n_string
                               (let ((name (let ((name /pair))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1)))))
                             "DPMS")
                           (@digits?
                             (let ((s (@n_string
                                        (let ((name (let ((name /pair))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- 1 1))
                                                        (list-ref
                                                          name
                                                          (- 1 1))))))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1)))))))
                               (substring s 4 (string-length s)))))
                      (set! //r (cons /pair //r)))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (@starts_with?
                             (@n_string
                               (@v (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))))
                             "V_"))
                      (set! //r (cons /pair //r)))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (@starts_with?
                             (@n_string
                               (@v (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))))
                             "v_"))
                      (set! //r (cons /pair //r)))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (equal?
                             (@v (let ((name /pair))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1)))))
                             (@make_name "___r1_init___")))
                      (set! //r (cons /pair //r)))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (equal?
                             (@v (let ((name /pair))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1)))))
                             (@make_name "__r14_init__")))
                      (set! //r (cons /pair //r)))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (member
                             (@v (let ((name /pair))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1)))))
                             /reg_inits))
                      (set! //r (cons /pair //r)))
                     ((and (or (not (= (@st (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1)))))
                                       //t_/number))
                               (< (@v (let ((name /pair))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1)))))
                                  //c/p_/special_/value))
                           (not (member
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))
                                  /return_elts))))
                     ((and (= /tpf_call 1)
                           (= (if (vector?
                                    (let ((name /pair))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))
                                (vector-length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1)))))
                                (length
                                  (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                              1)
                           (member
                             (car (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1)))))
                             /registers)
                           (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/number)
                           (< (@v (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 2 1))
                                      (list-ref name (- 2 1)))))
                              //c/p_/special_/value)
                           (null? (gethash
                                    //code_/hash
                                    (@v (let ((name /pair))
                                          (if (vector? name)
                                            (vector-ref name (- 2 1))
                                            (list-ref name (- 2 1)))))))))
                     ((= (@st (let ((name /pair))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1)))))
                         //t_/string))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/variable)
                           (not (member
                                  (@v (let ((name /pair))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1)))))
                                  /reg_inits))
                           (not (member
                                  (@v (let ((name /pair))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1)))))
                                  /registers))
                           (not (@starts_with?
                                  (@n_string
                                    (@v (let ((name /pair))
                                          (if (vector? name)
                                            (vector-ref name (- 2 1))
                                            (list-ref name (- 2 1))))))
                                  "V_"))
                           (not (@starts_with?
                                  (@n_string
                                    (@v (let ((name /pair))
                                          (if (vector? name)
                                            (vector-ref name (- 2 1))
                                            (list-ref name (- 2 1))))))
                                  "v_"))))
                     ((and (= (@st (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                              //t_/number)
                           (= (@v (let ((name /pair))
                                    (if (vector? name)
                                      (vector-ref name (- 2 1))
                                      (list-ref name (- 2 1)))))
                              0))
                      (cond ((and (> (if (vector?
                                           (let ((name /pair))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1)))))
                                       (vector-length
                                         (let ((name /pair))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1)))))
                                       (length
                                         (let ((name /pair))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1))))))
                                     1)
                                  (< (last-1
                                       (let ((name /pair))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1)))))
                                     0))
                             (let ((/e1-save /e1)
                                   (/e2-save /e2)
                                   (/e3 (@cp_get
                                          /l
                                          (concat
                                            (butlast-1
                                              (let ((name /pair))
                                                (if (vector? name)
                                                  (vector-ref name (- 1 1))
                                                  (list-ref name (- 1 1)))))
                                            (list (- (last-1
                                                       (let ((name /pair))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1)))))
                                                     1))))))
                               (set! /e1
                                 (@cp_get
                                   /l
                                   (concat
                                     (butlast-1
                                       (let ((name /pair))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1)))))
                                     (list (- (last-1
                                                (let ((name /pair))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1)))))
                                              3)))))
                               (set! /e2
                                 (@cp_get
                                   /l
                                   (concat
                                     (butlast-1
                                       (let ((name /pair))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1)))))
                                     (list (- (last-1
                                                (let ((name /pair))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1)))))
                                              2)))))
                               (cond ((and (not (null? /e1))
                                           (= (@st /e1) //t_/number)
                                           (not (= (@v /e1) 0)))
                                      (set! //r (cons /pair //r)))
                                     ((and (not (null? /e2))
                                           (= (@st /e2) //t_/number)
                                           (not (= (@v /e2) 0)))
                                      (set! //r (cons /pair //r)))
                                     ((and (not (null? /e3))
                                           (= (@st /e3) //t_/number)
                                           (not (= (@v /e3) 0)))
                                      (set! //r (cons /pair //r)))
                                     (#t))
                               (set! /e1 /e1-save)
                               (set! /e2 /e2-save)))
                            (#t)))
                     (#t (set! //r (cons /pair //r))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /pair var-save))
    (set! funct-result (reverse //r))
    (set! /l /l-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_x_proc //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (if (vector? //l)
             (let ((sub (vector-ref //l (- 1 1))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_all_but
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (@used (@i))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_all_but
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (@used (@i))))))
               (vector-set! //l (- 1 1) sub))
             (let ((sub (car (nthcdr (- 1 1) //l))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_all_but
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (@used (@i))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_all_but
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (@used (@i))))))
               (set! //l (replace-nth //l 1 sub))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_a_proc //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (cond ((and (equal? (@v (list-ref (@i) (+ 1 1))) /push_regs)
                       (member
                         /reg_stack
                         (@variables (list-ref (@i) (+ 1 3)))))
                  (set! //l
                    (@cp_push_regs
                      (@cs (list-ref (@i) (+ 1 2)))
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        (list /reg_stack))
                      //l)))
                 ((and (equal? (@v (list-ref (@i) (+ 1 1))) /pop_regs)
                       (member
                         /reg_stack
                         (@variables (list-ref (@i) (+ 1 3)))))
                  (set! //l
                    (@cp_pop_regs
                      (@cs (list-ref (@i) (+ 1 3)))
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        (list /reg_stack))
                      //l)))
                 (#t
                  (cond ((or (and (not (member
                                         (@make_name "vpp")
                                         (@assigned (@i))))
                                  (not (equal?
                                         (@v (list-ref (@i) (+ 1 1)))
                                         /pack))
                                  (not (equal?
                                         (@v (list-ref (@i) (+ 1 1)))
                                         //e/x/e/c_/c/i/c/s))
                                  (not (member
                                         (@make_name "regs")
                                         (@assigned (@i)))))
                             (equal?
                               (@v (list-ref (@i) (+ 1 1)))
                               /call_via_ptr)
                             (equal?
                               (@v (list-ref (@i) (+ 1 1)))
                               /call_via_ptr_pars))
                         (@down_to 2)
                         (set! //l (@cp_update //l))
                         (@up)))
                  (cond ((and (or (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr)
                                  (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr_pars))
                              (= (@st (list-ref
                                        (list-ref (@i) (+ 1 2))
                                        (+ 1 1)))
                                 //t_/variable)
                              (equal?
                                (@v (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))
                                (@make_name "result_code")))
                         (let ((/p (@posn_n)) (/v-save /v))
                           (set! /v '())
                           (set! /fl_flag1 0)
                           (let while-loop ()
                             (cond ((= /fl_flag1 0)
                                    (begin
                                      (let ((/__/o/k 1))
                                        (set! /__/o/k
                                          (@new_match
                                            /%const__constant_propagation__1
                                            (@i)
                                            /__/o/k))
                                        (cond ((= /__/o/k 1)
                                               (let ((/__e_save /e))
                                                 (set! /e
                                                   (vector-ref
                                                     /__/match_array
                                                     0))
                                                 (cond ((and (= (@st /e)
                                                                //t_/variable)
                                                             (or (@starts_with?
                                                                   (@v /e)
                                                                   "V_")
                                                                 (@starts_with?
                                                                   (@v /e)
                                                                   "v_")))
                                                        (set! /v /e)))
                                                 (set! /e /__e_save)))))
                                      (cond ((not (@left?)) (set! /fl_flag1 1))
                                            (#t
                                             (@left)
                                             (cond ((and (not (= (@st (@i))
                                                                 //t_/comment))
                                                         (not (= (@st (@i))
                                                                 //t_/assignment))
                                                         (not (= (@st (@i))
                                                                 //t_/a_/proc_/call)))
                                                    (set! /fl_flag1 1))
                                                   (#t (set! /fl_flag1 0))))))
                                    (while-loop))
                                   (#t #t)))
                           (@to /p)
                           (cond ((not (null? /v))
                                  (@down_to 2)
                                  (@down)
                                  (@paste_over /v)
                                  (@up)
                                  (@up)))
                           (set! /v /v-save))))
                  (cond ((and (or (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr)
                                  (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr_pars))
                              (= (@st (list-ref
                                        (list-ref (@i) (+ 1 2))
                                        (+ 1 1)))
                                 //t_/variable)
                              (or (@starts_with?
                                    (@v (list-ref
                                          (list-ref (@i) (+ 1 2))
                                          (+ 1 1)))
                                    "v_")
                                  (@starts_with?
                                    (@v (list-ref
                                          (list-ref (@i) (+ 1 2))
                                          (+ 1 1)))
                                    "V_")))
                         (let ((/name-save /name))
                           (set! /name
                             (@v (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))))
                           (@down)
                           (@paste_over
                             (@name (@make_name
                                      (let ((s (@n_string /name)))
                                        (substring s 2 (string-length s))))))
                           (@right)
                           (@down)
                           (@delete)
                           (@up)
                           (@up)
                           (set! /name /name-save)))
                        ((and (or (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr)
                                  (equal?
                                    (@v (list-ref (@i) (+ 1 1)))
                                    /call_via_ptr_pars))
                              (= (@st (list-ref
                                        (list-ref (@i) (+ 1 2))
                                        (+ 1 1)))
                                 //t_/negate)
                              (= (@st (list-ref
                                        (list-ref
                                          (list-ref (@i) (+ 1 2))
                                          (+ 1 1))
                                        (+ 1 1)))
                                 //t_/number)
                              (> /dispatch 0)
                              (not (null? (let ((name //bodies))
                                            (if (vector? name)
                                              (vector-ref name (- /dispatch 1))
                                              (list-ref
                                                name
                                                (- /dispatch 1)))))))
                         (let ((/n-save /n) (/posn (@posn)) (/call-save /call))
                           (set! /n
                             (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))
                           (set! /call '())
                           (@edit)
                           (@new_program
                             (let ((name //bodies))
                               (if (vector? name)
                                 (vector-ref name (- /dispatch 1))
                                 (list-ref name (- /dispatch 1)))))
                           (@foreach_statement
                             /foreach-constant_propagation-10
                             0
                             (@as_type)
                             0)
                           (cond ((null? (@program)) (@new_program (@skips))))
                           (@undo_edit)
                           (cond ((not (null? /call)) (@paste_over /call)))
                           (set! /n /n-save)
                           (set! /call /call-save))))
                  (cond ((and (not (null? //a_/proc_/call_/filter))
                              (member
                                /os_name
                                (@assigned (list-ref (@i) (+ 1 3)))))
                         (if (vector? //l)
                           (let ((sub (vector-ref //l (- 1 1))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_all_but
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))
                                   //a_/proc_/call_/filter))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_all_but
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     //a_/proc_/call_/filter))))
                             (vector-set! //l (- 1 1) sub))
                           (let ((sub (car (nthcdr (- 1 1) //l))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_all_but
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))
                                   //a_/proc_/call_/filter))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_all_but
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     //a_/proc_/call_/filter))))
                             (set! //l (replace-nth //l 1 sub)))))
                        ((member
                           /os_name
                           (@assigned (list-ref (@i) (+ 1 3))))
                         (if (vector? //l)
                           (let ((sub (vector-ref //l (- 1 1))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_clobber_zeros
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_clobber_zeros
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))))))
                             (vector-set! //l (- 1 1) sub))
                           (let ((sub (car (nthcdr (- 1 1) //l))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_clobber_zeros
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_clobber_zeros
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))))))
                             (set! //l (replace-nth //l 1 sub))))))
                  (cond ((and (not (null? //l))
                              (= (let ((name (let ((name //l))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))
                                 0))
                         (if (vector? //l)
                           (let ((sub (vector-ref //l (- 1 1))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_clobber_list
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))
                                   (@elts_assigned (@i))))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_clobber_list
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     (@elts_assigned (@i))))))
                             (vector-set! //l (- 1 1) sub))
                           (let ((sub (car (nthcdr (- 1 1) //l))))
                             (if (vector? sub)
                               (vector-set!
                                 sub
                                 (- 2 1)
                                 (@cp_clobber_list
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))
                                   (@elts_assigned (@i))))
                               (set! sub
                                 (replace-nth
                                   sub
                                   2
                                   (@cp_clobber_list
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     (@elts_assigned (@i))))))
                             (set! //l (replace-nth //l 1 sub))))))
                  (cond ((and (> /dispatch 0)
                              (not (null? (let ((name //bodies))
                                            (if (vector? name)
                                              (vector-ref name (- /dispatch 1))
                                              (list-ref
                                                name
                                                (- /dispatch 1))))))
                              (equal?
                                (@v (list-ref (@i) (+ 1 1)))
                                /call_via_ptr)
                              (@cp_reg_init_var?
                                (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))))
                         (@paste_over (@make //t_/call (- (+ //n 1)) '()))))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_reg_init_var? //i)
  (let ((//r-save //r)
        (/val-save /val)
        (funct-result '()))
    (set! //r 0)
    (set! /val '())
    (cond ((and (= (@st //i) //t_/variable)
                (member (@v //i) /reg_inits))
           (set! //r 1))
          (#t
           (set! /val
             (@cp_get
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1))))
               (@cp_var_name //i)))
           (cond ((and (not (null? /val))
                       (= (@st /val) //t_/variable)
                       (member (@v /val) /reg_inits))
                  (set! //r 1)))))
    (set! funct-result (= //r 1))
    (set! //r //r-save)
    (set! /val /val-save)
    funct-result))

(define (@cp_push_regs /regs /stack_val //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/vals '()) (/val-save /val) (/name-save /name))
      (set! /val '())
      (set! /name '())
      (let ((var-save /reg) (seq-save /regs))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /reg (car for-tmp))
                 (begin
                   (set! /val '())
                   (set! /name (@cp_var_name /reg))
                   (cond ((and (not (null? /name))
                               (not (null? (@cp_get
                                             (let ((name (let ((name //l))
                                                           (if (vector? name)
                                                             (vector-ref
                                                               name
                                                               (- 1 1))
                                                             (list-ref
                                                               name
                                                               (- 1 1))))))
                                               (if (vector? name)
                                                 (vector-ref name (- 2 1))
                                                 (list-ref name (- 2 1))))
                                             /name))))
                          (set! /val
                            (@cp_get
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              /name)))
                         ((@cp_constant? /reg) (set! /val /reg)))
                   (cond ((null? /val)
                          (set! /vals (cons (@cp_make_seq '()) /vals)))
                         (#t (set! /vals (cons /val /vals)))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /reg var-save))
      (set! /vals (@cp_make_seq (reverse /vals)))
      (cond ((or (null? /stack_val)
                 (not (= (@st /stack_val) //t_/sequence)))
             (set! /stack_val (@cp_make_seq (list /vals))))
            (#t
             (set! /stack_val
               (@cp_make_seq
                 (cons /vals (@cs (list-ref /stack_val (+ 1 1))))))))
      (if (vector? //l)
        (let ((sub (vector-ref //l (- 1 1))))
          (if (vector? sub)
            (vector-set!
              sub
              (- 2 1)
              (@cp_put
                (let ((name (let ((name //l))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))))
                  (if (vector? name)
                    (vector-ref name (- 2 1))
                    (list-ref name (- 2 1))))
                (list /reg_stack)
                /stack_val))
            (set! sub
              (replace-nth
                sub
                2
                (@cp_put
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /reg_stack)
                  /stack_val))))
          (vector-set! //l (- 1 1) sub))
        (let ((sub (car (nthcdr (- 1 1) //l))))
          (if (vector? sub)
            (vector-set!
              sub
              (- 2 1)
              (@cp_put
                (let ((name (let ((name //l))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))))
                  (if (vector? name)
                    (vector-ref name (- 2 1))
                    (list-ref name (- 2 1))))
                (list /reg_stack)
                /stack_val))
            (set! sub
              (replace-nth
                sub
                2
                (@cp_put
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /reg_stack)
                  /stack_val))))
          (set! //l (replace-nth //l 1 sub))))
      (set! /val /val-save)
      (set! /name /name-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_make_seq /comps)
  (@make //t_/sequence
         '()
         (list (@make //t_/expressions '() /comps))))

(define (@cp_pop_regs /regs /stack_val //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? /stack_val))
                (= (@st /stack_val) //t_/sequence)
                (@cs? (list-ref /stack_val (+ 1 1))))
           (let ((/vals (@cs (list-ref
                               (list-ref (list-ref /stack_val (+ 1 1)) (+ 1 1))
                               (+ 1 1))))
                 (/val-save /val))
             (set! /val '())
             (set! /stack_val
               (@cp_make_seq
                 (cdr (@cs (list-ref /stack_val (+ 1 1))))))
             (set! //l
               (@cp_put0 //l (list /reg_stack) /stack_val))
             (let ((var-save /reg) (seq-save /regs))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /reg (car for-tmp))
                        (cond ((member (@v /reg) /registers)
                               (set! /val
                                 (let ((name /vals))
                                   (if (vector? name)
                                     (vector-ref
                                       name
                                       (- (+ (gethash
                                               //c/p_/reg_/to_/num
                                               (@v /reg))
                                             1)
                                          1))
                                     (list-ref
                                       name
                                       (- (+ (gethash
                                               //c/p_/reg_/to_/num
                                               (@v /reg))
                                             1)
                                          1)))))
                               (cond (#f
                                      (begin
                                        (display (@n_string (@v /reg)))
                                        (begin (display " = ") (force-output)))
                                      (@pp_item /val 80 "")))
                               (cond ((and (= (@st /val) //t_/sequence)
                                           (not (@cs? (list-ref /val (+ 1 1)))))
                                      (if (vector? //l)
                                        (let ((sub (vector-ref //l (- 1 1))))
                                          (if (vector? sub)
                                            (vector-set!
                                              sub
                                              (- 2 1)
                                              (@cp_remove
                                                (let ((name (let ((name //l))
                                                              (if (vector? name)
                                                                (vector-ref
                                                                  name
                                                                  (- 1 1))
                                                                (list-ref
                                                                  name
                                                                  (- 1 1))))))
                                                  (if (vector? name)
                                                    (vector-ref name (- 2 1))
                                                    (list-ref name (- 2 1))))
                                                (list (@v /reg))))
                                            (set! sub
                                              (replace-nth
                                                sub
                                                2
                                                (@cp_remove
                                                  (let ((name (let ((name //l))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 2 1))
                                                      (list-ref name (- 2 1))))
                                                  (list (@v /reg))))))
                                          (vector-set! //l (- 1 1) sub))
                                        (let ((sub (car (nthcdr (- 1 1) //l))))
                                          (if (vector? sub)
                                            (vector-set!
                                              sub
                                              (- 2 1)
                                              (@cp_remove
                                                (let ((name (let ((name //l))
                                                              (if (vector? name)
                                                                (vector-ref
                                                                  name
                                                                  (- 1 1))
                                                                (list-ref
                                                                  name
                                                                  (- 1 1))))))
                                                  (if (vector? name)
                                                    (vector-ref name (- 2 1))
                                                    (list-ref name (- 2 1))))
                                                (list (@v /reg))))
                                            (set! sub
                                              (replace-nth
                                                sub
                                                2
                                                (@cp_remove
                                                  (let ((name (let ((name //l))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 2 1))
                                                      (list-ref name (- 2 1))))
                                                  (list (@v /reg))))))
                                          (set! //l (replace-nth //l 1 sub)))))
                                     (#t
                                      (if (vector? //l)
                                        (let ((sub (vector-ref //l (- 1 1))))
                                          (if (vector? sub)
                                            (vector-set!
                                              sub
                                              (- 2 1)
                                              (@cp_put
                                                (let ((name (let ((name //l))
                                                              (if (vector? name)
                                                                (vector-ref
                                                                  name
                                                                  (- 1 1))
                                                                (list-ref
                                                                  name
                                                                  (- 1 1))))))
                                                  (if (vector? name)
                                                    (vector-ref name (- 2 1))
                                                    (list-ref name (- 2 1))))
                                                (list (@v /reg))
                                                /val))
                                            (set! sub
                                              (replace-nth
                                                sub
                                                2
                                                (@cp_put
                                                  (let ((name (let ((name //l))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 2 1))
                                                      (list-ref name (- 2 1))))
                                                  (list (@v /reg))
                                                  /val))))
                                          (vector-set! //l (- 1 1) sub))
                                        (let ((sub (car (nthcdr (- 1 1) //l))))
                                          (if (vector? sub)
                                            (vector-set!
                                              sub
                                              (- 2 1)
                                              (@cp_put
                                                (let ((name (let ((name //l))
                                                              (if (vector? name)
                                                                (vector-ref
                                                                  name
                                                                  (- 1 1))
                                                                (list-ref
                                                                  name
                                                                  (- 1 1))))))
                                                  (if (vector? name)
                                                    (vector-ref name (- 2 1))
                                                    (list-ref name (- 2 1))))
                                                (list (@v /reg))
                                                /val))
                                            (set! sub
                                              (replace-nth
                                                sub
                                                2
                                                (@cp_put
                                                  (let ((name (let ((name //l))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 2 1))
                                                      (list-ref name (- 2 1))))
                                                  (list (@v /reg))
                                                  /val))))
                                          (set! //l
                                            (replace-nth //l 1 sub))))))))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /reg var-save))
             (set! /val /val-save)))
          ((and #f (null? /stack_val))
           (if (vector? //l)
             (let ((sub (vector-ref //l (- 1 1))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_put
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (list (@make_name "r14"))
                     (@make //t_/number 0 '())))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_put
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (list (@make_name "r14"))
                       (@make //t_/number 0 '())))))
               (vector-set! //l (- 1 1) sub))
             (let ((sub (car (nthcdr (- 1 1) //l))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_put
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (list (@make_name "r14"))
                     (@make //t_/number 0 '())))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_put
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (list (@make_name "r14"))
                       (@make //t_/number 0 '())))))
               (set! //l (replace-nth //l 1 sub))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_push //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (let ((/v-save /v)
                 (/val-save /val)
                 (/stack (@cp_var_name (list-ref (@i) (+ 1 1))))
                 (/stack_val '()))
             (set! /v (@cp_var_name (list-ref (@i) (+ 1 2))))
             (set! /val '())
             (set! //l (@cp_update //l))
             (cond ((@cp_constant? (list-ref (@i) (+ 1 2)))
                    (set! /val (list-ref (@i) (+ 1 2))))
                   ((not (null? /v))
                    (set! /val
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        /v))))
             (cond ((null? /val) (set! /val (@cp_make_seq '()))))
             (cond ((not (null? /stack))
                    (set! /stack_val
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        /stack))
                    (cond ((or (null? /stack_val)
                               (not (= (@st /stack_val) //t_/sequence)))
                           (set! /stack_val (@cp_make_seq (list /val))))
                          (#t
                           (set! /stack_val
                             (@cp_make_seq
                               (cons /val
                                     (@cs (list-ref /stack_val (+ 1 1))))))))
                    (if (vector? //l)
                      (let ((sub (vector-ref //l (- 1 1))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_put
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              /stack
                              /stack_val))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_put
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))
                                /stack
                                /stack_val))))
                        (vector-set! //l (- 1 1) sub))
                      (let ((sub (car (nthcdr (- 1 1) //l))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_put
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              /stack
                              /stack_val))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_put
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))
                                /stack
                                /stack_val))))
                        (set! //l (replace-nth //l 1 sub))))))
             (set! /v /v-save)
             (set! /val /val-save))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_pop //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (let ((/v-save /v)
                 (/val-save /val)
                 (/stack (@cp_var_name (list-ref (@i) (+ 1 2))))
                 (/stack_val '()))
             (set! /v (@cp_var_name (list-ref (@i) (+ 1 1))))
             (set! /val '())
             (cond ((not (null? /stack))
                    (set! /stack_val
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        /stack))
                    (cond ((and (not (null? /stack_val))
                                (= (@st /stack_val) //t_/sequence)
                                (@cs? (list-ref /stack_val (+ 1 1))))
                           (set! /val
                             (list-ref (list-ref /stack_val (+ 1 1)) (+ 1 1)))
                           (set! //l
                             (@cp_put0
                               //l
                               /stack
                               (@cp_make_seq
                                 (cdr (@cs (list-ref /stack_val (+ 1 1)))))))
                           (cond ((and (= (@st /val) //t_/sequence)
                                       (not (@cs? (list-ref /val (+ 1 1)))))
                                  (cond ((not (null? /v))
                                         (if (vector? //l)
                                           (let ((sub (vector-ref //l (- 1 1))))
                                             (if (vector? sub)
                                               (vector-set!
                                                 sub
                                                 (- 2 1)
                                                 (@cp_remove
                                                   (let ((name (let ((name //l))
                                                                 (if (vector?
                                                                       name)
                                                                   (vector-ref
                                                                     name
                                                                     (- 1 1))
                                                                   (list-ref
                                                                     name
                                                                     (- 1
                                                                        1))))))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref name (- 2 1))))
                                                   /v))
                                               (set! sub
                                                 (replace-nth
                                                   sub
                                                   2
                                                   (@cp_remove
                                                     (let ((name (let ((name //l))
                                                                   (if (vector?
                                                                         name)
                                                                     (vector-ref
                                                                       name
                                                                       (- 1 1))
                                                                     (list-ref
                                                                       name
                                                                       (- 1
                                                                          1))))))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 2 1))
                                                         (list-ref
                                                           name
                                                           (- 2 1))))
                                                     /v))))
                                             (vector-set! //l (- 1 1) sub))
                                           (let ((sub (car (nthcdr
                                                             (- 1 1)
                                                             //l))))
                                             (if (vector? sub)
                                               (vector-set!
                                                 sub
                                                 (- 2 1)
                                                 (@cp_remove
                                                   (let ((name (let ((name //l))
                                                                 (if (vector?
                                                                       name)
                                                                   (vector-ref
                                                                     name
                                                                     (- 1 1))
                                                                   (list-ref
                                                                     name
                                                                     (- 1
                                                                        1))))))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref name (- 2 1))))
                                                   /v))
                                               (set! sub
                                                 (replace-nth
                                                   sub
                                                   2
                                                   (@cp_remove
                                                     (let ((name (let ((name //l))
                                                                   (if (vector?
                                                                         name)
                                                                     (vector-ref
                                                                       name
                                                                       (- 1 1))
                                                                     (list-ref
                                                                       name
                                                                       (- 1
                                                                          1))))))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 2 1))
                                                         (list-ref
                                                           name
                                                           (- 2 1))))
                                                     /v))))
                                             (set! //l
                                               (replace-nth //l 1 sub)))))))
                                 (#t
                                  (cond ((not (null? /v))
                                         (if (vector? //l)
                                           (let ((sub (vector-ref //l (- 1 1))))
                                             (if (vector? sub)
                                               (vector-set!
                                                 sub
                                                 (- 2 1)
                                                 (@cp_put
                                                   (let ((name (let ((name //l))
                                                                 (if (vector?
                                                                       name)
                                                                   (vector-ref
                                                                     name
                                                                     (- 1 1))
                                                                   (list-ref
                                                                     name
                                                                     (- 1
                                                                        1))))))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref name (- 2 1))))
                                                   /v
                                                   /val))
                                               (set! sub
                                                 (replace-nth
                                                   sub
                                                   2
                                                   (@cp_put
                                                     (let ((name (let ((name //l))
                                                                   (if (vector?
                                                                         name)
                                                                     (vector-ref
                                                                       name
                                                                       (- 1 1))
                                                                     (list-ref
                                                                       name
                                                                       (- 1
                                                                          1))))))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 2 1))
                                                         (list-ref
                                                           name
                                                           (- 2 1))))
                                                     /v
                                                     /val))))
                                             (vector-set! //l (- 1 1) sub))
                                           (let ((sub (car (nthcdr
                                                             (- 1 1)
                                                             //l))))
                                             (if (vector? sub)
                                               (vector-set!
                                                 sub
                                                 (- 2 1)
                                                 (@cp_put
                                                   (let ((name (let ((name //l))
                                                                 (if (vector?
                                                                       name)
                                                                   (vector-ref
                                                                     name
                                                                     (- 1 1))
                                                                   (list-ref
                                                                     name
                                                                     (- 1
                                                                        1))))))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref name (- 2 1))))
                                                   /v
                                                   /val))
                                               (set! sub
                                                 (replace-nth
                                                   sub
                                                   2
                                                   (@cp_put
                                                     (let ((name (let ((name //l))
                                                                   (if (vector?
                                                                         name)
                                                                     (vector-ref
                                                                       name
                                                                       (- 1 1))
                                                                     (list-ref
                                                                       name
                                                                       (- 1
                                                                          1))))))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 2 1))
                                                         (list-ref
                                                           name
                                                           (- 2 1))))
                                                     /v
                                                     /val))))
                                             (set! //l
                                               (replace-nth //l 1 sub)))))))))
                          ((not (null? /v))
                           (if (vector? //l)
                             (let ((sub (vector-ref //l (- 1 1))))
                               (if (vector? sub)
                                 (vector-set!
                                   sub
                                   (- 2 1)
                                   (@cp_remove
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     /v))
                                 (set! sub
                                   (replace-nth
                                     sub
                                     2
                                     (@cp_remove
                                       (let ((name (let ((name //l))
                                                     (if (vector? name)
                                                       (vector-ref name (- 1 1))
                                                       (list-ref
                                                         name
                                                         (- 1 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 2 1))
                                           (list-ref name (- 2 1))))
                                       /v))))
                               (vector-set! //l (- 1 1) sub))
                             (let ((sub (car (nthcdr (- 1 1) //l))))
                               (if (vector? sub)
                                 (vector-set!
                                   sub
                                   (- 2 1)
                                   (@cp_remove
                                     (let ((name (let ((name //l))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     /v))
                                 (set! sub
                                   (replace-nth
                                     sub
                                     2
                                     (@cp_remove
                                       (let ((name (let ((name //l))
                                                     (if (vector? name)
                                                       (vector-ref name (- 1 1))
                                                       (list-ref
                                                         name
                                                         (- 1 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 2 1))
                                           (list-ref name (- 2 1))))
                                       /v))))
                               (set! //l (replace-nth //l 1 sub))))))))
             (set! /v /v-save)
             (set! /val /val-save))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_spec //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (if (vector? //l)
             (let ((sub (vector-ref //l (- 1 1))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_clobber_list
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (@elts_assigned (@i))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_clobber_list
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (@elts_assigned (@i))))))
               (vector-set! //l (- 1 1) sub))
             (let ((sub (car (nthcdr (- 1 1) //l))))
               (if (vector? sub)
                 (vector-set!
                   sub
                   (- 2 1)
                   (@cp_clobber_list
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1))))
                     (@elts_assigned (@i))))
                 (set! sub
                   (replace-nth
                     sub
                     2
                     (@cp_clobber_list
                       (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       (@elts_assigned (@i))))))
               (set! //l (replace-nth //l 1 sub))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_skip //l) //l)

(define (@cp_statement //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//s/t (@st (@i))))
      (cond ((= //s/t //t_/a_/proc_/call)
             (set! //l (@cp_a_proc //l)))
            ((= //s/t //t_/m/w_/proc_/call)
             (set! //l (@cp_a_proc //l)))
            ((= //s/t //t_/x_/proc_/call)
             (set! //l (@cp_x_proc //l)))
            ((= //s/t //t_/stat_/place)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/stat_/pat_/one)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/stat_/pat_/many)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/stat_/pat_/any)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/abort) (set! //l (@cp_abort //l)))
            ((= //s/t //t_/assert)
             (set! //l (@cp_assert //l)))
            ((= //s/t //t_/assignment)
             (set! //l (@cp_assignment //l)))
            ((= //s/t //t_/a_/s) (set! //l (@cp_a_s //l)))
            ((= //s/t //t_/call) (set! //l (@cp_call //l)))
            ((= //s/t //t_/comment)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/cond) (set! //l (@cp_cond //l)))
            ((= //s/t //t_/d_/if) (set! //l (@cp_cond //l)))
            ((= //s/t //t_/d_/do) (set! //l (@cp_d_do //l)))
            ((= //s/t //t_/exit) (set! //l (@cp_exit //l)))
            ((= //s/t //t_/for) (set! //l (@cp_for //l)))
            ((= //s/t //t_/for_/in)
             (set! //l (@cp_for_in //l)))
            ((= //s/t //t_/foreach_/stat)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/stats)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/t/s)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/t/ss)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/s/t/s)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/cond)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/foreach_/expn)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/floop) (set! //l (@cp_floop //l)))
            ((= //s/t //t_/join)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/pop) (set! //l (@cp_pop //l)))
            ((= //s/t //t_/push) (set! //l (@cp_push //l)))
            ((= //s/t //t_/proc_/call)
             (set! //l (@cp_proc_call //l)))
            ((= //s/t //t_/spec) (set! //l (@cp_spec //l)))
            ((= //s/t //t_/skip) (set! //l (@cp_skip //l)))
            ((= //s/t //t_/var) (set! //l (@cp_var //l)))
            ((= //s/t //t_/where) (set! //l (@cp_where //l)))
            ((= //s/t //t_/while) (set! //l (@cp_while //l)))
            ((= //s/t //t_/ifmatch_/stat)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/ifmatch_/expn)
             (set! //l (@cp_clobber //l)))
            ((= //s/t //t_/m/w_/proc)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/m/w_/funct)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/m/w_/b/funct)
             (set! //l (@cp_skip //l)))
            ((= //s/t //t_/print)
             (set! //l (@cp_update //l)))
            ((= //s/t //t_/prinflush)
             (set! //l (@cp_update //l)))
            ((null? //s/t)
             (error "@CP_Statement:" "Bad statement" //s/t))
            (#t
             (begin
               (display "UNKNOWN STATEMENT: ")
               (begin
                 (display (@type_name //s/t))
                 (begin
                   (display "(")
                   (begin
                     (display //s/t)
                     (begin
                       (display ") at ")
                       (begin
                         (display (@posn))
                         (newline)
                         (force-output))))))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_action //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (@down_to 2)
    (set! //l (@cp_statements //l))
    (@up)
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_actions //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (@down)
    (set! //l (@cp_action //l))
    (let while-loop ()
      (cond ((@right?)
             (begin (@right) (set! //l (@cp_action //l)))
             (while-loop))
            (#t #t)))
    (@up)
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_definitions //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (@down)
    (set! //l (@cp_definition //l))
    (let while-loop ()
      (cond ((@right?)
             (begin (@right) (set! //l (@cp_definition //l)))
             (while-loop))
            (#t #t)))
    (@up)
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_definition //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((= (@st (@i)) //t_/proc)
           (@down_to 4)
           (let ((//l-save //l))
             (set! //l (list (list 0 '())))
             (set! //l (@cp_statements //l))
             (set! //l //l-save))
           (@up)))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_statements //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/loop_check 0))
      (cond ((not (= (@st (@i)) //t_/statements))
             (error "@CP_Statements:"
                    "wrong type:"
                    (@st (@i))))
            ((and #f (< /call_budget 100))
             (begin (display "/") (force-output))
             (set! //l (@cp_clobber_broke //l))
             (@foreach_statement
               /foreach-constant_propagation-11
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips)))))
            ((and (> //state_/saves /initial_call_budget)
                  (> /initial_call_budget 200))
             (begin (display "#") (force-output))
             (set! //l (@cp_clobber_broke //l))
             (@foreach_statement
               /foreach-constant_propagation-12
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips)))))
            (#t
             (@down)
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (begin
                        (cond ((null? //l) (set! /fl_flag1 1))
                              (#t (set! /fl_flag1 0)))
                        (cond ((= /fl_flag1 0)
                               (cond ((and (= (@st (@i)) //t_/cond) (@right?))
                                      (@cp_cc_check)
                                      (cond ((= //migration 1)
                                             (@cp_maybe_move_flag //l)))
                                      (cond ((= //migration 1)
                                             (@cp_maybe_expand //l)))))
                               (cond ((and (= (@st (@i)) //t_/cond)
                                           (@left?)
                                           (= //migration 1))
                                      (set! //l (@cp_maybe_absorb_left //l))))
                               (set! //l (@cp_statement //l))
                               (cond ((or (null? //l)
                                          (> (let ((name (let ((name //l))
                                                           (if (vector? name)
                                                             (vector-ref
                                                               name
                                                               (- 1 1))
                                                             (list-ref
                                                               name
                                                               (- 1 1))))))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))
                                             0))
                                      (cond ((not (<= /initial_call_budget 200))
                                             (set! /fl_flag1 1))
                                            (#t
                                             (set! //l (list (list 0 '())))
                                             (set! /fl_flag1 0))))
                                     (#t (set! /fl_flag1 0)))
                               (cond ((= /fl_flag1 0)
                                      (cond ((@is_improper?)
                                             (cond ((@right?) (@delete_rest)))
                                             (set! /fl_flag1 1))
                                            ((and (not (null? //entries))
                                                  (@regular? (@i)))
                                             (set! /fl_flag1 1))
                                            ((not (@right?)) (set! /fl_flag1 1))
                                            (#t
                                             (@right)
                                             (set! /loop_check
                                               (+ /loop_check 1))
                                             (cond ((> /loop_check 30000)
                                                    (error "!!!Loop checker failed!!!")
                                                    (set! /fl_flag1 1))
                                                   (#t
                                                    (set! /fl_flag1 0))))))))))
                      (while-loop))
                     (#t #t)))
             (@up))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_cc_check)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__3
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__/b3_save //b3)
                 (/__/b2_save //b2)
                 (/__cc_save /cc)
                 (/__/b1_save //b1))
             (set! //b3 (vector-ref /__/match_array 3))
             (set! //b2 (vector-ref /__/match_array 2))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc //b1 //b2 //b3 /true)
             (set! //b3 /__/b3_save)
             (set! //b2 /__/b2_save)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save)))))
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__4
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__/b2_save //b2)
                 (/__cc_save /cc)
                 (/__/b1_save //b1))
             (set! //b2 (vector-ref /__/match_array 2))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc //b1 //b2 /true /false)
             (set! //b2 /__/b2_save)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save)))))
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__5
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__cc_save /cc) (/__/b1_save //b1))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc //b1 /true /false /false)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save)))))
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__6
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__cc_save /cc) (/__/b1_save //b1))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc (@not //b1) /true /false /false)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save)))))
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__7
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__cc_save /cc) (/__/b1_save //b1))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc //b1 /false /true /false)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save)))))
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match
        /%const__constant_propagation__8
        (@i)
        /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__/b2_save //b2)
                 (/__cc_save /cc)
                 (/__/b1_save //b1))
             (set! //b2 (vector-ref /__/match_array 2))
             (set! /cc (vector-ref /__/match_array 1))
             (set! //b1 (vector-ref /__/match_array 0))
             (@cp_cc_set /cc //b1 (@not //b2) /false /true)
             (set! //b2 /__/b2_save)
             (set! /cc /__cc_save)
             (set! //b1 /__/b1_save))))))

(define (@cp_cc_set
         /cc-par
         //b0-par
         //b1-par
         //b2-par
         //b3-par)
  (let ((//b3-save //b3)
        (//b2-save //b2)
        (//b1-save //b1)
        (//b0-save //b0)
        (/cc-save /cc))
    (set! //b3 //b3-par)
    (set! //b2 //b2-par)
    (set! //b1 //b1-par)
    (set! //b0 //b0-par)
    (set! /cc /cc-par)
    (cond ((= (@st /cc) //t_/var_/lvalue)
           (let ((/call_types-save /call_types)
                 (/vars-save /vars))
             (set! /call_types
               (if (= //assume_/a_/s_/regular 1)
                 (@make_set
                   (list //t_/proc_/call
                         //t_/x_/proc_/call
                         //t_/m/w_/proc_/call))
                 (@make_set
                   (list //t_/call
                         //t_/proc_/call
                         //t_/x_/proc_/call
                         //t_/m/w_/proc_/call))))
             (set! /vars
               (@set_union
                 (@set_union
                   (@set_union
                     (@set_union
                       (list (list (@v /cc)))
                       (@elts_used //b0))
                     (@elts_used //b1))
                   (@elts_used //b2))
                 (@elts_used //b3)))
             (@right)
             (let ((/posn_n (@posn_n)))
               (@cp_cc_statements /cc //b0 //b1 //b2 //b3 /vars)
               (@to /posn_n))
             (@left)
             (set! /call_types /call_types-save)
             (set! /vars /vars-save))))
    (set! //b3 //b3-save)
    (set! //b2 //b2-save)
    (set! //b1 //b1-save)
    (set! //b0 //b0-save)
    (set! /cc /cc-save)))

(define (@cp_cc_statements
         /cc-par
         //b0-par
         //b1-par
         //b2-par
         //b3-par
         /vars-par)
  (let ((/vars-save /vars)
        (//b3-save //b3)
        (//b2-save //b2)
        (//b1-save //b1)
        (//b0-save //b0)
        (/cc-save /cc))
    (set! /vars /vars-par)
    (set! //b3 //b3-par)
    (set! //b2 //b2-par)
    (set! //b1 //b1-par)
    (set! //b0 //b0-par)
    (set! /cc /cc-par)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (cond ((and (or (= (@st (@i)) //t_/cond)
                               (= (@st (@i)) //t_/d_/if))
                           (member (@v /cc) (@used (@i))))
                      (let ((/-result-
                              (@cp_cc_cond /cc //b0 //b1 //b2 //b3 /vars)))
                        (set! /cc (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! //b0 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! //b1 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! //b2 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! //b3 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /vars (car /-result-))
                        (set! /-result- (cdr /-result-)))))
               (cond ((= (@st (@i)) //t_/comment) (set! /fl_flag1 0))
                     ((not (null? (@set_intersect
                                    (@stat_types (@i))
                                    /call_types)))
                      (set! /fl_flag1 1))
                     ((and (member //t_/a_/proc_/call (@stat_types (@i)))
                           (not (null? //a_/proc_/call_/filter))
                           (not (@set_subset?
                                  (@make_set
                                    (let ((l /vars) (map-result '()))
                                      (let while-loop ()
                                        (cond ((not (null? l))
                                               (set! map-result
                                                 (cons (car (car l))
                                                       map-result))
                                               (set! l (cdr l))
                                               (while-loop))
                                              (#t #t)))
                                      (reverse map-result)))
                                  //a_/proc_/call_/filter)))
                      (set! /fl_flag1 1))
                     ((@elt_clash_list? /vars (@elts_assigned (@i)))
                      (set! /fl_flag1 1))
                     ((member (@v /cc) (@assigned (@i)))
                      (set! /fl_flag1 1))
                     (#t (set! /fl_flag1 0)))
               (cond ((= /fl_flag1 0)
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))))
             (while-loop))
            (#t #t)))
    (set! /vars /vars-save)
    (set! //b3 //b3-save)
    (set! //b2 //b2-save)
    (set! //b1 //b1-save)
    (set! //b0 //b0-save)
    (set! /cc /cc-save)))

(define (@cp_cc_cond
         /cc-par
         //b0-par
         //b1-par
         //b2-par
         //b3-par
         /vars-par)
  (let ((/vars-save /vars)
        (//b3-save //b3)
        (//b2-save //b2)
        (//b1-save //b1)
        (//b0-save //b0)
        (/cc-save /cc)
        (funct-result '()))
    (set! /vars /vars-par)
    (set! //b3 //b3-par)
    (set! //b2 //b2-par)
    (set! //b1 //b1-par)
    (set! //b0 //b0-par)
    (set! /cc /cc-par)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down)
               (cond ((member (@v /cc) (@used (@i)))
                      (@foreach_cond
                        /foreach-constant_propagation-13
                        0
                        (@as_type)
                        0)
                      (cond ((null? (@program)) (@new_program (@skips))))))
               (@right)
               (cond ((member (@v /cc) (@used (@i)))
                      (@down)
                      (@cp_cc_statements /cc //b0 //b1 //b2 //b3 /vars)
                      (@up)))
               (@up)
               (cond ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0))))
             (while-loop))
            (#t #t)))
    (@up)
    (set! funct-result
      (list /cc //b0 //b1 //b2 //b3 /vars))
    (set! /vars /vars-save)
    (set! //b3 //b3-save)
    (set! //b2 //b2-save)
    (set! //b1 //b1-save)
    (set! //b0 //b0-save)
    (set! /cc /cc-save)
    funct-result))

(define (@cp_maybe_expand //l-par)
  (let ((//l-save //l))
    (set! //l //l-par)
    (let ((//p1 (@posn))
          (//p2 '())
          (/cond1 (@i))
          (/used '())
          (//o/k-save //o/k)
          (/cc_assigned 0)
          (/comments '())
          (/var-save /var)
          (/clash 0)
          (/v1 '())
          (/v2 '()))
      (set! //o/k 0)
      (set! /var 0)
      (cond ((and (= (@st (list-ref
                            (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                            (+ 1 1)))
                     //t_/assignment)
                  (= (@st (list-ref
                            (list-ref
                              (list-ref
                                (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                (+ 1 1))
                              (+ 1 1))
                            (+ 1 1)))
                     //t_/var_/lvalue)
                  (equal?
                    (@v (list-ref
                          (list-ref
                            (list-ref
                              (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                              (+ 1 1))
                            (+ 1 1))
                          (+ 1 1)))
                    /cc_name))
             (set! /used
               (@set_union
                 (list (list /cc_name))
                 (@elts_used (@i))))
             (set! //o/k 1)
             (set! /cc_assigned 1)))
      (@right)
      (set! /fl_flag2 0)
      (let while-loop ()
        (cond ((= /fl_flag2 0)
               (cond ((not (@right?)) (set! /fl_flag2 1))
                     ((and (= (@st (@i)) //t_/assignment)
                           (or (= //o/k 1)
                               (and (= (@st (list-ref
                                              (list-ref (@i) (+ 1 1))
                                              (+ 1 1)))
                                       //t_/var_/lvalue)
                                    (equal?
                                      (@v (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 1)))
                                      /destination))
                               (and (= (@st (list-ref
                                              (list-ref (@i) (+ 1 1))
                                              (+ 1 2)))
                                       //t_/number)
                                    (member
                                      (@v (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 2)))
                                      /dispatch_codes))))
                      (set! //o/k 0)
                      (let ((var-save /var)
                            (seq-save (@elts_assigned (@i))))
                        (if (vector? seq-save)
                          (set! seq-save (vector-elts seq-save)))
                        (let for-in-loop ((for-tmp seq-save))
                          (cond ((not (null? for-tmp))
                                 (set! /var (car for-tmp))
                                 (cond ((and (@elt_clash? /used /var)
                                             (not (and (= (@st (@i))
                                                          //t_/assignment)
                                                       (= (@st (list-ref
                                                                 (list-ref
                                                                   (@i)
                                                                   (+ 1 1))
                                                                 (+ 1 1)))
                                                          //t_/var_/lvalue)
                                                       (not (null? (gethash
                                                                     //d/s/e/c/ts
                                                                     (@v (list-ref
                                                                           (list-ref
                                                                             (@i)
                                                                             (+ 1
                                                                                1))
                                                                           (+ 1
                                                                              1)))))))))
                                        (set! //o/k (- 1))))
                                 (for-in-loop (cdr for-tmp)))
                                (#t #t)))
                        (set! /var var-save))
                      (@right)
                      (set! /fl_flag2 0))
                     ((= (@st (@i)) //t_/comment)
                      (@right)
                      (set! /fl_flag2 0))
                     ((and (= (@st (@i)) //t_/cond)
                           (= /cc_assigned 1)
                           (not (member /cc_name (@used (@i)))))
                      (@down)
                      (set! /fl_flag1 0)
                      (let while-loop ()
                        (cond ((= /fl_flag1 0)
                               (begin
                                 (cond ((@gen_improper?
                                          (list-ref (@i) (+ 1 2))
                                          "Reg")
                                        (set! /fl_flag1 0))
                                       ((and (= (@size (list-ref (@i) (+ 1 2)))
                                                1)
                                             (= (@st (list-ref
                                                       (list-ref (@i) (+ 1 2))
                                                       (+ 1 1)))
                                                //t_/skip))
                                        (set! /fl_flag1 0))
                                       (#t (set! /fl_flag1 2)))
                                 (cond ((= /fl_flag1 0)
                                        (cond ((not (@right?))
                                               (set! /fl_flag1 1))
                                              (#t
                                               (@right)
                                               (set! /fl_flag1 0))))))
                               (while-loop))
                              (#t #t)))
                      (cond ((= /fl_flag1 2) (set! /fl_flag2 1))
                            (#t (@up) (@right) (set! /fl_flag2 0))))
                     (#t (set! /fl_flag2 1)))
               (while-loop))
              (#t #t)))
      (cond ((and (= (@st (@i)) //t_/cond)
                  (equal? //o/k (- 1)))
             (let while-loop ()
               (cond ((and (not (= (@st (list-ref
                                          (@parent)
                                          (+ 1 (- (@posn_n) 1))))
                                   //t_/assignment))
                           (@trans? //t/r_/absorb_/left))
                      (@trans //t/r_/absorb_/left "")
                      (while-loop))
                     (#t #t)))
             (cond ((@trans? //t/r_/absorb_/left)
                    (@trans //t/r_/absorb_/left "")))
             (set! //p2 (@posn))))
      (cond ((= (@st (@i)) //t_/cond)
             (set! //p2 (@posn))
             (cond ((= /cc_assigned 1)
                    (set! //o/k (@cp_simple_cc0 //p1 //p2 //o/k))
                    (cond ((= //o/k 0)
                           (set! //o/k (@cp_simple_cc3 //p1 //p2 //o/k))))))
             (cond ((= //o/k 1)
                    (@left)
                    (let while-loop ()
                      (cond ((not (= (@st (@i)) //t_/cond))
                             (begin
                               (cond ((= (@st (@i)) //t_/comment)
                                      (set! /comments (cons (@i) /comments))
                                      (@paste_over (@skip))))
                               (@left))
                             (while-loop))
                            (#t #t)))
                    (@right)
                    (let while-loop ()
                      (cond ((not (= (@st (@i)) //t_/cond))
                             (@right)
                             (while-loop))
                            (#t #t)))))
             (set! //o/k 0)
             (set! /vars (@cp_multi_valued_vars /cond1 //l))
             (cond ((and (null? /vars)
                         (= (if (vector? (@elts_assigned /cond1))
                              (vector-length (@elts_assigned /cond1))
                              (length (@elts_assigned /cond1)))
                            1)
                         (= (@size (list-ref (list-ref /cond1 (+ 1 1)) (+ 1 2)))
                            1)
                         (= (@st (list-ref
                                   (list-ref (list-ref /cond1 (+ 1 1)) (+ 1 2))
                                   (+ 1 1)))
                            //t_/assignment)
                         (= (@st (list-ref
                                   (list-ref
                                     (list-ref
                                       (list-ref
                                         (list-ref /cond1 (+ 1 1))
                                         (+ 1 2))
                                       (+ 1 1))
                                     (+ 1 1))
                                   (+ 1 2)))
                            //t_/number))
                    (set! /vars (@elts_assigned /cond1))))
             (@down)
             (let while-loop ()
               (cond ((and (or (not (= //t_/cond
                                       (@st (list-ref
                                              (list-ref (@i) (+ 1 2))
                                              (+ 1 1)))))
                               (null? (@set_intersect
                                        (@elts_used
                                          (list-ref
                                            (list-ref
                                              (list-ref (@i) (+ 1 2))
                                              (+ 1 1))
                                            (+ 1 1)))
                                        /vars)))
                           (null? (@set_intersect
                                    (@elts_used (list-ref (@i) (+ 1 1)))
                                    /vars))
                           (@right?))
                      (@right)
                      (while-loop))
                     (#t #t)))
             (cond ((not (null? (@set_intersect
                                  (@elts_used (list-ref (@i) (+ 1 1)))
                                  /vars)))
                    (set! //o/k 1))
                   ((and (= //t_/cond
                            (@st (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))))
                         (not (null? (@set_intersect
                                       (@elts_used
                                         (list-ref
                                           (list-ref
                                             (list-ref (@i) (+ 1 2))
                                             (+ 1 1))
                                           (+ 1 1)))
                                       /vars))))
                    (set! //o/k 1)))
             (@goto //p1)
             (cond ((= //o/k 0)
                    (let while-loop ()
                      (cond ((not (null? /comments))
                             (begin
                               (@paste_before (car /comments))
                               (@right)
                               (set! /comments (cdr /comments)))
                             (while-loop))
                            (#t #t))))
                   (#t
                    (@paste_over (@skip))
                    (let while-loop ()
                      (cond ((< (@posn_n) (last-1 //p2))
                             (begin (set! //l (@cp_statement //l)) (@right))
                             (while-loop))
                            (#t #t)))
                    (@goto //p2)
                    (let while-loop ()
                      (cond ((not (null? /comments))
                             (begin
                               (@paste_before (car /comments))
                               (@right)
                               (set! /comments (cdr /comments)))
                             (while-loop))
                            (#t #t)))
                    (@paste_before /cond1)
                    (cond ((and (not (null? //l))
                                (= (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   0))
                           (@cp_maybe_expand_cc //l /vars))))))
            ((and (= (@st (@i)) //t_/call)
                  (equal? (- (@v (@i))) /dispatch))
             (set! //p2 (@posn))
             (@goto //p1)
             (cond ((equal? (@assigned (@i)) (list /cc_name)))
                   (#t
                    (set! //absorb_/tries (- //absorb_/tries 1))
                    (cond ((> //absorb_/tries 0)
                           (begin (display " ") (newline) (force-output))
                           (begin
                             (display "Expanding a Cond over CALL dispatch (")
                             (begin
                               (display //absorb_/tries)
                               (begin (display ") ") (force-output))))
                           (let ((/n-save /n))
                             (set! /n (- (last-1 //p2) (last-1 //p1)))
                             (let while-loop ()
                               (cond ((> /n 1)
                                      (begin
                                        (cond ((= (@st (list-ref
                                                         (@parent)
                                                         (+ 1 (+ (@posn_n) 1))))
                                                  //t_/comment)
                                               (@trans
                                                 //t/r_/move_/to_/right
                                                 ""))
                                              (#t
                                               (@trans //t/r_/absorb_/right "")
                                               (begin
                                                 (display "E")
                                                 (force-output))))
                                        (set! /n (- /n 1)))
                                      (while-loop))
                                     (#t #t)))
                             (set! /n /n-save))
                           (@trans //t/r_/absorb_/right "")
                           (begin (display "E") (newline) (force-output))
                           (@goto //p1))))))
            ((and (= (@st (@i)) //t_/proc_/call) (@right?))
             (set! //p2 (@posn))
             (@right)
             (let while-loop ()
               (cond ((and (@right?)
                           (or (= (@st (@i)) //t_/comment)
                               (= (@st (@i)) //t_/proc_/call)))
                      (@right)
                      (while-loop))
                     (#t #t)))
             (cond ((or (and (= (@st (@i)) //t_/call)
                             (equal? (- (@v (@i))) /dispatch))
                        (and (<= (@total_size (@i)) 12)
                             (> (@call_freq (- /dispatch) (@i)) 0)))
                    (set! /vars (@cp_multi_valued_vars /cond1 //l))
                    (@goto //p1)
                    (cond ((not (null? /vars))
                           (@paste_over (@skip))
                           (@goto //p2)
                           (@paste_before /cond1)
                           (let while-loop ()
                             (cond ((and (or (= (@st (list-ref
                                                       (@parent)
                                                       (+ 1 (+ (@posn_n) 1))))
                                                //t_/comment)
                                             (= (@st (list-ref
                                                       (@parent)
                                                       (+ 1 (+ (@posn_n) 1))))
                                                //t_/proc_/call))
                                         (@trans? //t/r_/expand_/forward))
                                    (@trans //t/r_/expand_/forward "")
                                    (while-loop))
                                   (#t #t)))
                           (cond ((@trans? //t/r_/expand_/forward)
                                  (@trans //t/r_/expand_/forward "")))
                           (begin (display "F") (force-output)))))
                   (#t (@goto //p1))))
            (#t (@goto //p1)))
      (set! //o/k //o/k-save)
      (set! /var /var-save))
    (set! //l //l-save)))

(define (@cp_simple_cc0 //p1 //p2 //o/k-par)
  (let ((//o/k-save //o/k) (funct-result '()))
    (set! //o/k //o/k-par)
    (set! //o/k 1)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down)
               (@foreach_cond
                 /foreach-constant_propagation-14
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips))))
               (@up)
               (cond ((= //o/k 0) (set! /fl_flag1 1))
                     ((@right?) (@right) (set! /fl_flag1 0))
                     (#t (set! /fl_flag1 1))))
             (while-loop))
            (#t #t)))
    (@up)
    (cond ((= //o/k 1)
           (@goto //p1)
           (let ((/__/o/k 1))
             (set! /__/o/k
               (@new_match
                 /%const__constant_propagation__19
                 (@i)
                 /__/o/k))
             (cond ((= /__/o/k 1)
                    (let ((/__/b3_save //b3)
                          (/__/b2_save //b2)
                          (/__/b1_save //b1))
                      (set! //b3 (vector-ref /__/match_array 2))
                      (set! //b2 (vector-ref /__/match_array 1))
                      (set! //b1 (vector-ref /__/match_array 0))
                      (cond ((not (member /cc_name (@variables //b1)))
                             (set! //b2 (@not //b1))
                             (@goto //p2)
                             (@cp_replace_cc0 //b1 //b2))
                            (#t (set! //o/k 0)))
                      (set! //b3 /__/b3_save)
                      (set! //b2 /__/b2_save)
                      (set! //b1 /__/b1_save)))
                   (#t
                    (let ((/__/o/k 1))
                      (set! /__/o/k
                        (@new_match
                          /%const__constant_propagation__20
                          (@i)
                          /__/o/k))
                      (cond ((= /__/o/k 1)
                             (let ((/__/b2_save //b2) (/__/b1_save //b1))
                               (set! //b2 (vector-ref /__/match_array 1))
                               (set! //b1 (vector-ref /__/match_array 0))
                               (cond ((not (member /cc_name (@variables //b1)))
                                      (set! //b2 (@not //b1))
                                      (@goto //p2)
                                      (@cp_replace_cc0 //b1 //b2))
                                     (#t (set! //o/k 0)))
                               (set! //b2 /__/b2_save)
                               (set! //b1 /__/b1_save)))
                            (#t (@goto //p2) (set! //o/k 0)))))))))
    (set! funct-result //o/k)
    (set! //o/k //o/k-save)
    funct-result))

(define (@cp_replace_cc0 //b1-par //b2-par)
  (let ((//b2-save //b2) (//b1-save //b1))
    (set! //b2 //b2-par)
    (set! //b1 //b1-par)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down)
               (@foreach_cond
                 /foreach-constant_propagation-15
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips))))
               (@up)
               (cond ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0))))
             (while-loop))
            (#t #t)))
    (@up)
    (set! //b2 //b2-save)
    (set! //b1 //b1-save)))

(define (@cp_simple_cc3 //p1 //p2 //o/k-par)
  (let ((//o/k-save //o/k) (funct-result '()))
    (set! //o/k //o/k-par)
    (set! //o/k 1)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down)
               (@foreach_cond
                 /foreach-constant_propagation-16
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips))))
               (@up)
               (cond ((= //o/k 0) (set! /fl_flag1 1))
                     ((@right?) (@right) (set! /fl_flag1 0))
                     (#t (set! /fl_flag1 1))))
             (while-loop))
            (#t #t)))
    (@up)
    (cond ((= //o/k 1)
           (@goto //p1)
           (let ((/__/o/k 1))
             (set! /__/o/k
               (@new_match
                 /%const__constant_propagation__23
                 (@i)
                 /__/o/k))
             (cond ((= /__/o/k 1)
                    (let ((/__e2_save /e2) (/__e1_save /e1))
                      (set! /e2 (vector-ref /__/match_array 1))
                      (set! /e1 (vector-ref /__/match_array 0))
                      (@goto //p2)
                      (cond ((or (and (= (@st /e2) //t_/number)
                                      (not (= (@v /e2) 0)))
                                 (and (= (@st /e2) //t_/string)
                                      (not (equal? (@v /e2) "hex 0x00"))))
                             (cond ((not (member /cc_name (@variables /e1)))
                                    (@cp_replace_cc3
                                      (@make //t_/equal '() (list /e1 /e2))
                                      (@make //t_/not_/equal
                                             '()
                                             (list /e1 /e2))))
                                   (#t (set! //o/k 0))))
                            (#t (set! //o/k 0)))
                      (set! /e2 /__e2_save)
                      (set! /e1 /__e1_save)))
                   (#t (@goto //p2) (set! //o/k 0))))))
    (set! funct-result //o/k)
    (set! //o/k //o/k-save)
    funct-result))

(define (@cp_replace_cc3 //b1-par //b2-par)
  (let ((//b2-save //b2) (//b1-save //b1))
    (set! //b2 //b2-par)
    (set! //b1 //b1-par)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down)
               (@foreach_cond
                 /foreach-constant_propagation-17
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips))))
               (@up)
               (cond ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0))))
             (while-loop))
            (#t #t)))
    (@up)
    (set! //b2 //b2-save)
    (set! //b1 //b1-save)))

(define (@cp_maybe_expand_cc //l-par /vars-par)
  (let ((/vars-save /vars) (//l-save //l))
    (set! /vars /vars-par)
    (set! //l //l-par)
    (let ((/cc_values '())
          (/ok 1)
          (/n-save /n)
          (/tests-save /tests)
          (/cc_val-save /cc_val)
          (/size 0)
          (/p 0))
      (set! /n '())
      (set! /tests '())
      (set! /cc_val '())
      (set! /cc_val
        (@cp_get
          (let ((name (let ((name //l))
                        (if (vector? name)
                          (vector-ref name (- 1 1))
                          (list-ref name (- 1 1))))))
            (if (vector? name)
              (vector-ref name (- 2 1))
              (list-ref name (- 2 1))))
          (list /cc_name)))
      (let ((var-save /guard) (seq-save (@cs (@i))))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /guard (car for-tmp))
                 (cond ((not (@gen_improper? /guard "Reg"))
                        (set! /size (+ /size 1))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /guard var-save))
      (cond ((<= /size 2)
             (cond ((@trans? //t/r_/expand_/forward)
                    (@trans //t/r_/expand_/forward "")
                    (begin (display "2") (force-output)))))
            ((not (member (list /cc_name) /vars)) #t)
            (#t
             (@down)
             (set! /test /true)
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (begin
                        (set! /tests
                          (cons (@and /test (list-ref (@i) (+ 1 1)))
                                /tests))
                        (set! /test
                          (@and /test (@not (list-ref (@i) (+ 1 1)))))
                        (@down_to 2)
                        (let ((/__/o/k 1))
                          (set! /__/o/k
                            (@new_match
                              /%const__constant_propagation__24
                              (@i)
                              /__/o/k))
                          (cond ((= /__/o/k 1)
                                 (let ((/__n_save /n))
                                   (set! /n (vector-ref /__/match_array 0))
                                   (cond ((= (@st /n) //t_/number)
                                          (set! /cc_values
                                            (cons /n /cc_values)))
                                         (#t (set! /ok 0)))
                                   (set! /n /__n_save)))
                                (#t
                                 (let ((/__/o/k 1))
                                   (set! /__/o/k
                                     (@new_match
                                       /%const__constant_propagation__25
                                       (@i)
                                       /__/o/k))
                                   (cond ((= /__/o/k 1)
                                          (cond ((not (null? /cc_val))
                                                 (set! /cc_values
                                                   (cons /cc_val /cc_values)))
                                                (#t (set! /ok 0))))
                                         ((not (@is_improper?))
                                          (set! /ok 0)))))))
                        (@up)
                        (cond ((or (not (@right?)) (not (= /ok 1)))
                               (set! /fl_flag1 1))
                              (#t (@right) (set! /fl_flag1 0))))
                      (while-loop))
                     (#t #t)))
             (set! /tests (reverse /tests))
             (set! /cc_values (reverse /cc_values))
             (@up)
             (cond ((= /ok 1)
                    (@right)
                    (@cp_fix_cc_conds /cc_values /tests)))))
      (set! /n /n-save)
      (set! /tests /tests-save)
      (set! /cc_val /cc_val-save))
    (set! /vars /vars-save)
    (set! //l //l-save)))

(define (@cp_fix_cc_conds
         /orig_cc_values-par
         /orig_tests-par)
  (let ((/orig_tests-save /orig_tests)
        (/orig_cc_values-save /orig_cc_values))
    (set! /orig_tests /orig_tests-par)
    (set! /orig_cc_values /orig_cc_values-par)
    (let ((/tests-save /tests)
          (/newtests-save /newtests)
          (/p (@posn_n))
          (/cc_val-save /cc_val)
          (/vars-save /vars))
      (set! /tests '())
      (set! /newtests '())
      (set! /cc_val '())
      (set! /vars
        (@set_union
          (let ((l (let ((l /orig_tests) (map-result '()))
                     (let while-loop ()
                       (cond ((not (null? l))
                              (set! map-result
                                (cons (@variables (car l)) map-result))
                              (set! l (cdr l))
                              (while-loop))
                             (#t #t)))
                     (reverse map-result)))
                (reduce-result '()))
            (cond ((null? l) '())
                  (#t
                   (set! reduce-result (car l))
                   (set! l (cdr l))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! reduce-result
                              (@set_union reduce-result (car l)))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   reduce-result)))
          (list /cc_name)))
      (set! /fl_flag2 0)
      (let while-loop ()
        (cond ((= /fl_flag2 0)
               (begin
                 (@down)
                 (set! /fl_flag1 0)
                 (let while-loop ()
                   (cond ((= /fl_flag1 0)
                          (begin
                            (@down)
                            (@foreach_cond
                              /foreach-constant_propagation-18
                              0
                              (@as_type)
                              0)
                            (cond ((null? (@program)) (@new_program (@skips))))
                            (@right)
                            (@down)
                            (cond ((and (= (@st (@i)) //t_/cond)
                                        (member /cc_name (@variables (@i))))
                                   (@cp_fix_cc_conds
                                     /orig_cc_values
                                     /orig_tests)))
                            (@up)
                            (@up)
                            (cond ((not (@right?)) (set! /fl_flag1 1))
                                  (#t (@right) (set! /fl_flag1 0))))
                          (while-loop))
                         (#t #t)))
                 (@up)
                 (cond ((or (not (null? (@set_intersect
                                          /vars
                                          (@assigned (@i)))))
                            (member //t_/proc_/call (@stat_types (@i))))
                        (set! /fl_flag2 1))
                       ((not (@right?)) (set! /fl_flag2 1))
                       (#t
                        (@right)
                        (set! /fl_flag1 0)
                        (let while-loop ()
                          (cond ((= /fl_flag1 0)
                                 (cond ((and (= (@st (@i)) //t_/cond)
                                             (member
                                               /cc_name
                                               (@variables (@i))))
                                        (set! /fl_flag1 1))
                                       ((not (null? (@set_intersect
                                                      /vars
                                                      (@assigned (@i)))))
                                        (set! /fl_flag1 2))
                                       ((member
                                          //t_/proc_/call
                                          (@stat_types (@i)))
                                        (set! /fl_flag1 2))
                                       ((@right?) (@right) (set! /fl_flag1 0))
                                       (#t (set! /fl_flag1 2)))
                                 (while-loop))
                                (#t #t)))
                        (cond ((= /fl_flag1 2) (set! /fl_flag2 1))
                              (#t (set! /fl_flag2 0))))))
               (while-loop))
              (#t #t)))
      (let while-loop ()
        (cond ((> (@posn_n) /p) (@left) (while-loop))
              (#t #t)))
      (set! /tests /tests-save)
      (set! /newtests /newtests-save)
      (set! /cc_val /cc_val-save)
      (set! /vars /vars-save))
    (set! /orig_tests /orig_tests-save)
    (set! /orig_cc_values /orig_cc_values-save)))

(define (@cp_maybe_move_flag //l-par)
  (let ((//l-save //l))
    (set! //l //l-par)
    (cond ((and (= (@size (@i)) 2)
                (= (@size (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                   1)
                (= (@size (list-ref (list-ref (@i) (+ 1 2)) (+ 1 2)))
                   1)
                (= (@st (list-ref
                          (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                          (+ 1 1)))
                   //t_/assignment)
                (= (@st (list-ref
                          (list-ref (list-ref (@i) (+ 1 2)) (+ 1 2))
                          (+ 1 1)))
                   //t_/assignment)
                (= (@st (list-ref
                          (list-ref
                            (list-ref
                              (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                              (+ 1 1))
                            (+ 1 1))
                          (+ 1 1)))
                   //t_/var_/lvalue)
                (= (@st (list-ref
                          (list-ref
                            (list-ref
                              (list-ref (list-ref (@i) (+ 1 2)) (+ 1 2))
                              (+ 1 1))
                            (+ 1 1))
                          (+ 1 1)))
                   //t_/var_/lvalue)
                (or (equal?
                      (@v (list-ref
                            (list-ref
                              (list-ref
                                (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                (+ 1 1))
                              (+ 1 1))
                            (+ 1 1)))
                      /zf_name)
                    (equal?
                      (@v (list-ref
                            (list-ref
                              (list-ref
                                (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                (+ 1 1))
                              (+ 1 1))
                            (+ 1 1)))
                      /cf_name)))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (@right)
                      (cond ((not (or (= (@st (@i)) //t_/assignment)
                                      (= (@st (@i)) //t_/comment)))
                             (@left)
                             (set! /fl_flag1 1))
                            (#t
                             (@left)
                             (cond ((not (@trans? //t/r_/move_/to_/right))
                                    (set! /fl_flag1 1))
                                   (#t
                                    (@trans //t/r_/move_/to_/right "")
                                    (cond ((not (@right?))
                                           (@paste_after (@skip))
                                           (set! /fl_flag1 1))
                                          (#t (set! /fl_flag1 0))))))))
                    (while-loop))
                   (#t #t)))))
    (set! //l //l-save)))

(set! //m/v/v_/depth 0)

(define (@cp_multi_valued_vars /cond //l-par)
  (let ((//l-save //l)
        (/ll '())
        (/orig/l //l-par)
        (/vars-save /vars)
        (/ok 0)
        (//unfold_/dispatch-save //unfold_/dispatch)
        (funct-result '()))
    (set! //l //l-par)
    (set! /vars '())
    (set! //unfold_/dispatch 0)
    (set! //m/v/v_/depth (+ //m/v/v_/depth 1))
    (cond ((< //m/v/v_/depth 2)
           (@cp_save_state)
           (@edit)
           (@new_program /cond)
           (@down)
           (set! //l (@cp_guarded //l))
           (cond ((not (null? //l))
                  (set! /ll
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1)))))))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t
                           (@down)
                           (@edit)
                           (set! /orig/l (@cp_deny_condition /orig/l))
                           (@undo_edit)
                           (@up)
                           (set! //l /orig/l)
                           (@right)
                           (set! //l (@cp_guarded //l))
                           (cond ((and (not (null? //l))
                                       (= (let ((name (let ((name //l))
                                                        (if (vector? name)
                                                          (vector-ref
                                                            name
                                                            (- 1 1))
                                                          (list-ref
                                                            name
                                                            (- 1 1))))))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))
                                          0))
                                  (set! /ll
                                    (@cp_merge_keep
                                      /ll
                                      (let ((name (let ((name //l))
                                                    (if (vector? name)
                                                      (vector-ref name (- 1 1))
                                                      (list-ref
                                                        name
                                                        (- 1 1))))))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1))))))))
                           (cond ((= (@st (list-ref (@i) (+ 1 1))) //t_/true)
                                  (set! /fl_flag1 1))
                                 (#t (set! /fl_flag1 0)))))
                    (while-loop))
                   (#t #t)))
           (let while-loop ()
             (cond ((not (null? /ll))
                    (begin
                      (cond ((and (> (if (vector?
                                           (let ((name /ll))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1)))))
                                       (vector-length
                                         (let ((name /ll))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1)))))
                                       (length
                                         (let ((name /ll))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1))))))
                                     2)
                                  (not (member
                                         //t_/variable
                                         (let ((l (cdr (let ((name /ll))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1))))))
                                               (map-result '()))
                                           (let while-loop ()
                                             (cond ((not (null? l))
                                                    (set! map-result
                                                      (cons (@st (car l))
                                                            map-result))
                                                    (set! l (cdr l))
                                                    (while-loop))
                                                   (#t #t)))
                                           (reverse map-result))))
                                  (not (member
                                         //t_/x_/funct_/call
                                         (let ((l (cdr (let ((name /ll))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1))))))
                                               (map-result '()))
                                           (let while-loop ()
                                             (cond ((not (null? l))
                                                    (set! map-result
                                                      (cons (@st (car l))
                                                            map-result))
                                                    (set! l (cdr l))
                                                    (while-loop))
                                                   (#t #t)))
                                           (reverse map-result)))))
                             (set! /vars
                               (cons (let ((name (let ((name /ll))
                                                   (if (vector? name)
                                                     (vector-ref name (- 1 1))
                                                     (list-ref name (- 1 1))))))
                                       (if (vector? name)
                                         (vector-ref name (- 1 1))
                                         (list-ref name (- 1 1))))
                                     /vars))))
                      (set! /ll (cdr /ll)))
                    (while-loop))
                   (#t #t)))
           (@undo_edit)
           (@cp_restore_state)))
    (set! //m/v/v_/depth (- //m/v/v_/depth 1))
    (set! funct-result (@make_set /vars))
    (set! //l //l-save)
    (set! /vars /vars-save)
    (set! //unfold_/dispatch //unfold_/dispatch-save)
    funct-result))

(define (@cp_guarded //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (@down)
    (set! //l (@cp_update //l))
    (set! //l (@cp_assert_condition //l))
    (cond ((= (@st (@i)) //t_/false) (set! //l '()))
          (#t (@right) (set! //l (@cp_statements //l))))
    (@up)
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_assert //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (@down)
    (set! //l (@cp_update //l))
    (set! //l (@cp_assert_condition //l))
    (@up)
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_assert_condition //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((= (@st (@i)) //t_/equal)
           (cond ((and (@cp_variable? (list-ref (@i) (+ 1 1)))
                       (@cp_constant? (list-ref (@i) (+ 1 2))))
                  (set! //l
                    (@cp_put0_if_safe
                      //l
                      (@cp_var_name (list-ref (@i) (+ 1 1)))
                      (list-ref (@i) (+ 1 2)))))
                 ((and (@cp_variable? (list-ref (@i) (+ 1 2)))
                       (@cp_constant? (list-ref (@i) (+ 1 1))))
                  (set! //l
                    (@cp_put0_if_safe
                      //l
                      (@cp_var_name (list-ref (@i) (+ 1 2)))
                      (list-ref (@i) (+ 1 1)))))))
          ((= (@st (@i)) //t_/and)
           (@down)
           (set! //l (@cp_assert_condition //l))
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@right)
                      (set! //l (@cp_assert_condition //l)))
                    (while-loop))
                   (#t #t)))
           (@up))
          ((= (@st (@i)) //t_/not)
           (@down)
           (set! //l (@cp_deny_condition //l))
           (@up)))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_deny_condition //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((= (@st (@i)) //t_/not_/equal)
           (cond ((and (@cp_variable? (list-ref (@i) (+ 1 1)))
                       (@cp_constant? (list-ref (@i) (+ 1 2))))
                  (set! //l
                    (@cp_put0_if_safe
                      //l
                      (@cp_var_name (list-ref (@i) (+ 1 1)))
                      (list-ref (@i) (+ 1 2)))))
                 ((and (@cp_variable? (list-ref (@i) (+ 1 2)))
                       (@cp_constant? (list-ref (@i) (+ 1 1))))
                  (set! //l
                    (@cp_put0_if_safe
                      //l
                      (@cp_var_name (list-ref (@i) (+ 1 2)))
                      (list-ref (@i) (+ 1 1)))))))
          ((= (@st (@i)) //t_/or)
           (@down)
           (set! //l (@cp_deny_condition //l))
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@right)
                      (set! //l (@cp_deny_condition //l)))
                    (while-loop))
                   (#t #t)))
           (@up))
          ((= (@st (@i)) //t_/not)
           (@down)
           (set! //l (@cp_assert_condition //l))
           (@up)))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_put0_if_safe //l //n //v)
  (if (or (null? //l)
          (> (let ((name (let ((name //l))
                           (if (vector? name)
                             (vector-ref name (- 1 1))
                             (list-ref name (- 1 1))))))
               (if (vector? name)
                 (vector-ref name (- 1 1))
                 (list-ref name (- 1 1))))
             0))
    (if (not (equal? (car //n) /exit_flag))
      (cons (list 0 (list (list //n //v))) //l)
      //l)
    (if (equal? (car //n) /exit_flag)
      (if (or (= (@v //v) 1)
              (and (> //c/p_/in_/preserves_/dest 1)
                   (> (@v //v) 1)))
        (cdr //l)
        //l)
      (cons (list 0
                  (@cp_put_if_safe
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    //n
                    //v))
            (cdr //l)))))

(define (@cp_put_if_safe //l //n //v)
  (let ((/old (@cp_get //l //n)))
    (if (or (equal? (car //n) /exit_flag)
            (and (not (null? /old)) (@equal? //v /old)))
      //l
      (cons (list //n //v) //l))))

(define (@cp_assignment //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (set! //l (@cp_assigns //l))
    (cond ((not (@cs? (@i)))
           (@paste_over (@make //t_/skip '() '()))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_assigns //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((or (null? //l)
               (not (= (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))
                       0)))
           #t)
          ((and (= (@size (@i)) 1)
                (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                   //t_/var_/lvalue)
                (equal?
                  (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                  /exit_flag)
                (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                   //t_/number))
           (cond ((or (= (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                         1)
                      (and (> //c/p_/in_/preserves_/dest 1)
                           (> (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                              1)))
                  (set! //l (cdr //l)))))
          ((and (= (@size (@i)) 1)
                (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                   //t_/var_/lvalue)
                (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                   //t_/plus))
           (cond ((and (= (@st (list-ref
                                 (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                 (+ 1 1)))
                          //t_/variable)
                       (equal?
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                         (@v (list-ref
                               (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                               (+ 1 1))))
                       (= (@st (list-ref
                                 (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                 (+ 1 2)))
                          //t_/number)
                       (or (= (@v (list-ref
                                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                    (+ 1 2)))
                              12)
                           (= (@v (list-ref
                                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                    (+ 1 2)))
                              8)
                           (= (@v (list-ref
                                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                    (+ 1 2)))
                              4)))
                  (let ((/val-save /val)
                        (/inc (@v (list-ref
                                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                    (+ 1 2)))))
                    (set! /val
                      (@cp_get
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        (list (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))))
                    (cond ((null? /val) (set! //l (@cp_assigns_sub //l)))
                          ((not (= (@st /val) //t_/number))
                           (set! //l (@cp_assigns_sub //l)))
                          ((equal? (@v /val) //c/p_/special_/value)
                           (begin
                             (display "<inc: ")
                             (begin
                               (display
                                 (@n_string
                                   (@v (list-ref
                                         (list-ref (@i) (+ 1 1))
                                         (+ 1 1)))))
                               (begin (display ">") (newline) (force-output))))
                           (set! //c/p_/return_/code_/inc
                             (@set_union //c/p_/return_/code_/inc (list /inc))))
                          (#t (set! //l (@cp_assigns_sub //l))))
                    (set! /val /val-save)))
                 (#t (set! //l (@cp_assigns_sub //l)))))
          (#t (set! //l (@cp_assigns_sub //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_assigns_sub //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((@down?) (set! //l (@cp_assigns_sub2 //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_assigns_sub2 //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/new/l-save /new/l)
          (/old/l-save /old/l)
          (/new-save /new)
          (/v-save /v)
          (/e-save /e)
          (/e2-save /e2)
          (/keep-save /keep)
          (/old_assign '())
          (/changed 0)
          (/v1 '())
          (/e1-save /e1))
      (set! /new/l
        (let ((name (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))))
          (if (vector? name)
            (vector-ref name (- 2 1))
            (list-ref name (- 2 1)))))
      (set! /old/l
        (let ((name (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))))
          (if (vector? name)
            (vector-ref name (- 2 1))
            (list-ref name (- 2 1)))))
      (set! /new '())
      (set! /v '())
      (set! /e '())
      (set! /e2 '())
      (set! /keep 1)
      (set! /e1 '())
      (@edit)
      (@down)
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (begin
                 (set! /keep 1)
                 (set! /old_assign (@i))
                 (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                //t_/aref_/lvalue)
                             (= (@st (list-ref
                                       (list-ref
                                         (list-ref (@i) (+ 1 1))
                                         (+ 1 2))
                                       (+ 1 1)))
                                //t_/number)
                             (= (@v (list-ref
                                      (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                                      (+ 1 1)))
                                1)
                             (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                                //t_/var_/lvalue))
                        (cond ((or (and (= (@st (list-ref (@i) (+ 1 2)))
                                           //t_/string)
                                        (or (equal?
                                              (@v (list-ref (@i) (+ 1 2)))
                                              " ")
                                            (@starts_with?
                                              (@v (list-ref (@i) (+ 1 2)))
                                              "hex 0x")))
                                   (= (@st (list-ref (@i) (+ 1 2)))
                                      //t_/number))
                               (let ((/v-save /v) (/e-save /e) (/str ""))
                                 (set! /v
                                   (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                                 (set! /e
                                   (@cp_get
                                     /old/l
                                     (@cp_var_name
                                       (list-ref
                                         (list-ref (@i) (+ 1 1))
                                         (+ 1 1)))))
                                 (cond ((and (not (null? /e))
                                             (= (@st /e) //t_/number)
                                             (= (@v /e) 0))
                                        (@down)
                                        (@paste_over /v)
                                        (@right)
                                        (cond ((= (@st (@i)) //t_/number)
                                               (set! /str
                                                 (@num_to_hex (@v (@i))))
                                               (let while-loop ()
                                                 (cond ((< (string-length /str)
                                                           2)
                                                        (set! /str
                                                          (string-append
                                                            "0"
                                                            /str))
                                                        (while-loop))
                                                       (#t #t))))
                                              ((and (= (@st (@i)) //t_/string)
                                                    (equal? (@v (@i)) " "))
                                               (set! /str "hex 0x40"))
                                              (#t (set! /str (@v (@i)))))
                                        (@paste_over
                                          (@make //t_/string
                                                 (string-append /str "000000")
                                                 '()))
                                        (@up)))
                                 (set! /v /v-save)
                                 (set! /e /e-save))))))
                 (@down)
                 (set! //l (@cp_update //l))
                 (cond ((@is_mem_rel? (@i))
                        (cond ((@is_addr? (@get_mem_rel (@i)))
                               (let ((/v1 (@expn_to_lvalue
                                            (@get_addr (@get_mem_rel (@i)))))
                                     (/e1-save /e1))
                                 (set! /e1 (@get_mem_rel_n (@i)))
                                 (cond ((or (= (@st /v1) //t_/sub_/seg_/lvalue)
                                            (= (@st /v1) //t_/rel_/seg_/lvalue))
                                        (set! /v1 (list-ref /v1 (+ 1 1)))))
                                 (cond ((= (@gt /v1) //t_/lvalue)
                                        (@paste_over
                                          (@make 503
                                                 '()
                                                 (list (@expn_to_var /v1)
                                                       (@make 205 1 '())
                                                       (@var_to_expn /e1))))))
                                 (set! /e1 /e1-save)))))
                       ((@is_mem? (@i))
                        (cond ((@is_addr? (@get_mem (@i)))
                               (let ((/v1 (@expn_to_lvalue
                                            (@get_addr (@get_mem (@i))))))
                                 (cond ((= (@st /v1) //t_/aref_/lvalue)
                                        (@paste_over /v1))
                                       ((or (= (@st /v1) //t_/sub_/seg_/lvalue)
                                            (= (@st /v1) //t_/rel_/seg_/lvalue))
                                        (set! /v1 (list-ref /v1 (+ 1 1)))
                                        (@paste_over
                                          (@make 502
                                                 '()
                                                 (list (@expn_to_var /v1)
                                                       (@make 10
                                                              '()
                                                              (list (@make 205
                                                                           1
                                                                           '())))))))
                                       (#t
                                        (@paste_over
                                          (@make 502
                                                 '()
                                                 (list (@expn_to_var /v1)
                                                       (@make 10
                                                              '()
                                                              (list (@make 205
                                                                           1
                                                                           '())))))))))))))
                 (cond ((and (@is_mem_rel? (@i))
                             (not (= (@st (@get_mem_rel_n (@i))) //t_/number)))
                        (set! /new/l (@cp_clobber_zeros /new/l))))
                 (set! /v (@cp_var_name (@i)))
                 (cond ((and #f
                             (= (@st (@i)) //t_/var_/lvalue)
                             (not (null? (gethash //d/s/e/c/ts (@v (@i)))))))
                       ((and (= (@st (@i)) //t_/var_/lvalue)
                             (equal? (@v (@i)) /r1_name)))
                       (#t (@right) (set! //l (@cp_update //l)) (@left)))
                 (cond ((and (= (@st (@i)) //t_/sub_/seg_/lvalue)
                             (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
                             (= (@st (list-ref (@i) (+ 1 3))) //t_/number)
                             (< (- (@v (list-ref (@i) (+ 1 3)))
                                   (@v (list-ref (@i) (+ 1 2))))
                                4))
                        (set! /new/l (@cp_sub_seg_lvalue /new/l)))
                       ((and (= (@st (@i)) //t_/rel_/seg_/lvalue)
                             (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
                             (= (@st (list-ref (@i) (+ 1 3))) //t_/number)
                             (<= (@v (list-ref (@i) (+ 1 3))) 4))
                        (set! /new/l (@cp_rel_seg_lvalue /new/l)))
                       ((not (null? /v))
                        (@right)
                        (set! /e (@cp_get /old/l /v))
                        (cond ((or (null? /e) (not (@equal? /e (@i))))
                               (set! /new/l (@cp_remove /new/l /v))))
                        (cond ((and (= (@st (@i)) //t_/variable)
                                    (@starts_with? (@v (@i)) "NOTUSED_"))
                               (set! /e2 (gethash //notused_/value (@v (@i))))
                               (cond ((null? /e2)
                                      (set! /e2
                                        (@make //t_/number
                                               (@string_to_num
                                                 (let ((s (@n_string
                                                            (@v (@i)))))
                                                   (substring
                                                     s
                                                     8
                                                     (string-length s))))
                                               '()))
                                      (puthash
                                        //notused_/value
                                        (@v (@i))
                                        /e2))))
                              ((or (= (@st (@i)) //t_/variable)
                                   (= (@st (@i)) //t_/struct))
                               (set! /e2 (@cp_get /old/l (@cp_var_name (@i))))
                               (cond ((null? /e2) (set! /e2 (@i)))))
                              (#t (set! /e2 (@i))))
                        (cond ((@cp_constant? /e2)
                               (cond ((@prefix? /v (@cp_var_name /e2))
                                      (begin (display "^") (force-output)))
                                     ((and (= (@st /e2) //t_/minus)
                                           (= (@st (list-ref /e2 (+ 1 1)))
                                              //t_/plus))
                                      (set! /new/l (@cp_put /new/l /v /e2)))
                                     ((member /v (@elements /e2)))
                                     ((and (= (@st /e2) //t_/number)
                                           (equal?
                                             (@v /e2)
                                             //c/p_/special_/value))
                                      (set! //c/p_/return_/code_/normal 1)
                                      (set! /new/l (@cp_put /new/l /v /e2)))
                                     ((and (= (@st /e2) //t_/number)
                                           (or (= (@v /e2)
                                                  (+ //c/p_/special_/value 4))
                                               (= (@v /e2)
                                                  (+ //c/p_/special_/value 8))
                                               (= (@v /e2)
                                                  (+ //c/p_/special_/value
                                                     12))))
                                      (let ((/inc (- (@v /e2)
                                                     //c/p_/special_/value)))
                                        (set! /new/l
                                          (@cp_put
                                            /new/l
                                            /v
                                            (@make //t_/number
                                                   //c/p_/special_/value
                                                   '())))
                                        (begin
                                          (display "(special value inc ")
                                          (begin
                                            (display /inc)
                                            (begin
                                              (display ")")
                                              (newline)
                                              (force-output))))
                                        (set! //c/p_/return_/code_/inc
                                          (@set_union
                                            //c/p_/return_/code_/inc
                                            (list /inc)))))
                                     (#t (set! /new/l (@cp_put /new/l /v /e2))))
                               (cond ((and (not (null? /e))
                                           (and (not (equal?
                                                       /v
                                                       (list /cc_name)))
                                                (not (equal?
                                                       /v
                                                       (list /zf_name)))
                                                (not (equal?
                                                       /v
                                                       (list /cf_name)))
                                                (not (equal?
                                                       /v
                                                       (list /destination))))
                                           (@equal? /e /e2))
                                      (begin (display "X") (force-output))
                                      (set! /keep 0))))))
                       ((= (@st (@i)) //t_/var_/lvalue)
                        (set! /new/l
                          (@cp_remove /new/l (list (@v (@i))))))
                       ((or (= (@st (@i)) //t_/aref_/lvalue)
                            (= (@st (@i)) //t_/sub_/seg_/lvalue)
                            (= (@st (@i)) //t_/rel_/seg_/lvalue)
                            (= (@st (@i)) //t_/final_/seg_/lvalue))
                        (set! /v (@cp_var_name (list-ref (@i) (+ 1 1))))
                        (cond ((and (not (equal? /v (list /a_name)))
                                    (not (null? /v)))
                               (set! /new/l (@cp_remove /new/l /v)))))
                       (#t
                        (set! /v (@elts_assigned (@i)))
                        (cond ((= (if (vector? /v)
                                    (vector-length /v)
                                    (length /v))
                                  1)
                               (set! /new/l (@cp_remove /new/l (car /v)))))))
                 (@up)
                 (let ((/-result-
                         (@cp_check_equiv
                           (list-ref (@i) (+ 1 1))
                           (list-ref (@i) (+ 1 2))
                           /old/l
                           /new/l
                           /keep)))
                   (set! /old/l (car /-result-))
                   (set! /-result- (cdr /-result-))
                   (set! /new/l (car /-result-))
                   (set! /-result- (cdr /-result-))
                   (set! /keep (car /-result-))
                   (set! /-result- (cdr /-result-)))
                 (cond ((and (@is_mem_rel? (list-ref (@i) (+ 1 1)))
                             (= (@st (@get_mem_rel_n (list-ref (@i) (+ 1 1))))
                                //t_/number)
                             (= (@v (@get_mem_rel_n (list-ref (@i) (+ 1 1))))
                                4)
                             (= (@st (@get_mem_rel (list-ref (@i) (+ 1 1))))
                                //t_/plus)
                             (= (@st (list-ref
                                       (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                       (+ 1 1)))
                                //t_/variable)
                             (= (@st (list-ref
                                       (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                       (+ 1 2)))
                                //t_/number)
                             (or (@cp_reg_init_var?
                                   (list-ref
                                     (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                     (+ 1 1)))
                                 (member
                                   (@v (list-ref
                                         (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                         (+ 1 1)))
                                   /registers))
                             (= (@st (list-ref (@i) (+ 1 2))) //t_/number)
                             (member
                               (@v (list-ref (@i) (+ 1 2)))
                               /dispatch_codes)
                             (> (@v (list-ref (@i) (+ 1 2))) 0))
                        (begin (display "C") (force-output))
                        (let ((/name-save /name))
                          (set! /name
                            (@make_name
                              (concat
                                (string-append
                                  (@n_string
                                    (@v (list-ref
                                          (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                          (+ 1 1))))
                                  "__")
                                (@string
                                  (@v (list-ref
                                        (@get_mem_rel (list-ref (@i) (+ 1 1)))
                                        (+ 1 2)))))))
                          (set! /new/l
                            (@cp_put
                              /new/l
                              (list /name)
                              (list-ref (@i) (+ 1 2))))
                          (set! /name /name-save))))
                 (cond ((and (= (@st (list-ref /old_assign (+ 1 2)))
                                //t_/variable)
                             (= (@st (list-ref (@i) (+ 1 2))) //t_/variable)
                             (member (@v (list-ref (@i) (+ 1 2))) /reg_inits)
                             (member
                               (@v (list-ref /old_assign (+ 1 2)))
                               /registers))
                        (@paste_over /old_assign)))
                 (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                //t_/var_/lvalue)
                             (= (@st (list-ref (@i) (+ 1 2))) //t_/plus)
                             (= (@st (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))
                                //t_/variable)
                             (= (@st (list-ref (list-ref (@i) (+ 1 2)) (+ 1 2)))
                                //t_/number)
                             (equal?
                               (@v (list-ref (@i) (+ 1 1)))
                               (@v (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))))
                        (let ((/val-save /val))
                          (set! /val
                            (@cp_get
                              /old/l
                              (@cp_var_name (list-ref (@i) (+ 1 1)))))
                          (cond ((and (not (null? /val))
                                      (= (@st /val) //t_/variable)
                                      (member (@v /val) /reg_inits))
                                 (set! /new/l /old/l)))
                          (set! /val /val-save))))
                 (cond ((or (= /keep 1)
                            (member
                              /destination
                              (@variables (list-ref (@i) (+ 1 1)))))
                        (set! /new (cons (@i) /new))
                        (cond ((and (= /changed 0) (not (eq? /old_assign (@i))))
                               (set! /changed 1))))
                       (#t (set! /changed 1)))
                 (cond ((not (@right?)) (set! /fl_flag1 1))
                       (#t (@right) (set! /fl_flag1 0))))
               (while-loop))
              (#t #t)))
      (set! //l (cons (list 0 /new/l) (cdr //l)))
      (@up)
      (@undo_edit)
      (cond ((= /changed 1)
             (@paste_over
               (@make (@st (@i)) '() (reverse /new)))))
      (set! /new/l /new/l-save)
      (set! /old/l /old/l-save)
      (set! /new /new-save)
      (set! /v /v-save)
      (set! /e /e-save)
      (set! /e2 /e2-save)
      (set! /keep /keep-save)
      (set! /e1 /e1-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_check_equiv
         /var-par
         /expn
         /old/l-par
         /new/l-par
         /keep-par)
  (let ((/keep-save /keep)
        (/new/l-save /new/l)
        (/old/l-save /old/l)
        (/var-save /var)
        (funct-result '()))
    (set! /keep /keep-par)
    (set! /new/l /new/l-par)
    (set! /old/l /old/l-par)
    (set! /var /var-par)
    (cond ((and (= (@st /var) //t_/var_/lvalue)
                (= (@st /expn) //t_/variable))
           (let ((/val1 (@cp_get /old/l (list (@v /var))))
                 (/val2 (@cp_get /old/l (list (@v /expn)))))
             (cond ((and (not (null? /val1))
                         (= (@st /val1) //t_/variable)
                         (equal? (@v /val1) (@v /expn)))
                    (set! /keep 0))
                   ((and (not (null? /val2))
                         (= (@st /val2) //t_/variable)
                         (equal? (@v /val2) (@v /var)))
                    (set! /keep 0))
                   ((@starts_with? (@v /expn) "NOTUSED_")
                    (set! /new/l
                      (@cp_put /new/l (list (@v /var)) /expn)))
                   ((not (null? (@cp_get /new/l (list (@v /var))))))
                   (#t
                    (set! /new/l
                      (@cp_put /new/l (list (@v /var)) /expn)))))))
    (set! funct-result (list /old/l /new/l /keep))
    (set! /keep /keep-save)
    (set! /new/l /new/l-save)
    (set! /old/l /old/l-save)
    (set! /var /var-save)
    funct-result))

(define (@cp_sub_seg_lvalue /new/l-par)
  (let ((/new/l-save /new/l) (funct-result '()))
    (set! /new/l /new/l-par)
    (let ((/v-save /v)
          (/e-save /e)
          (/n-save /n)
          (/m (@v (list-ref (@i) (+ 1 3)))))
      (set! /v (@cp_var_name (list-ref (@i) (+ 1 1))))
      (set! /e '())
      (set! /n (@v (list-ref (@i) (+ 1 2))))
      (cond ((not (null? /v))
             (let ((var-save /i) (for-step 1) (for-end /m))
               (set! /i /n)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (set! /new/l
                          (@cp_remove /new/l (concat /v (list (- /i)))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (@right)
             (cond ((= (@st (@i)) //t_/number)
                    (let ((var-save /i) (for-step 1) (for-end /m))
                      (set! /i /n)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (begin
                                 (set! /e
                                   (@make //t_/number
                                          (@byte (@v (@i)) (- /m /i))
                                          '()))
                                 (set! /new/l
                                   (@cp_put
                                     /new/l
                                     (concat /v (list (- /i)))
                                     /e)))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))))))
      (set! /v /v-save)
      (set! /e /e-save)
      (set! /n /n-save))
    (set! funct-result /new/l)
    (set! /new/l /new/l-save)
    funct-result))

(define (@cp_rel_seg_lvalue /new/l-par)
  (let ((/new/l-save /new/l) (funct-result '()))
    (set! /new/l /new/l-par)
    (let ((/v-save /v)
          (/e-save /e)
          (/n-save /n)
          (/m (- (+ (@v (list-ref (@i) (+ 1 2)))
                    (@v (list-ref (@i) (+ 1 3))))
                 1)))
      (set! /v (@cp_var_name (list-ref (@i) (+ 1 1))))
      (set! /e '())
      (set! /n (@v (list-ref (@i) (+ 1 2))))
      (cond ((not (null? /v))
             (let ((var-save /i) (for-step 1) (for-end /m))
               (set! /i /n)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (set! /new/l
                          (@cp_remove /new/l (concat /v (list (- /i)))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (@right)
             (cond ((= (@st (@i)) //t_/number)
                    (let ((var-save /i) (for-step 1) (for-end /m))
                      (set! /i /n)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (begin
                                 (set! /e
                                   (@make //t_/number
                                          (@byte (@v (@i)) (- /m /i))
                                          '()))
                                 (set! /new/l
                                   (@cp_put
                                     /new/l
                                     (concat /v (list (- /i)))
                                     /e)))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))))))
      (set! /v /v-save)
      (set! /e /e-save)
      (set! /n /n-save))
    (set! funct-result /new/l)
    (set! /new/l /new/l-save)
    funct-result))

(define (@byte /i /n)
  (if (= /n 0)
    (modulo /i 256)
    (@byte (quotient /i 256) (- /n 1))))

(define (@cp_a_s //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//a/s_/type (@system_type (@i))))
      (cond ((not (@regular_system? (@i)))
             (begin
               (display "Action-System ")
               (begin
                 (display
                   (@n_string (@v (list-ref (@i) (+ 1 1)))))
                 (begin
                   (display " is not regular.")
                   (newline)
                   (force-output))))
             (@down_to 2)
             (@down)
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (begin
                        (@down_to 2)
                        (set! //l (list (list 0 '())))
                        (set! //l (@cp_statements //l))
                        (@up)
                        (cond ((not (@regular? (list-ref (@i) (+ 1 2))))
                               (begin
                                 (display "----------- Action ")
                                 (begin
                                   (display
                                     (@n_string (@v (list-ref (@i) (+ 1 1)))))
                                   (begin
                                     (display " is not regular")
                                     (newline)
                                     (force-output))))))
                        (cond ((not (@right?)) (set! /fl_flag1 1))
                              (#t (@right) (set! /fl_flag1 0))))
                      (while-loop))
                     (#t #t)))
             (@up)
             (@up)
             (set! //l (@cp_clobber //l)))
            ((not (null? //call_/path))
             (begin
               (display "Sub-Action-System ")
               (begin
                 (display
                   (@n_string (@v (list-ref (@i) (+ 1 1)))))
                 (begin
                   (display " at ")
                   (begin
                     (display //call_/path)
                     (newline)
                     (force-output)))))
             (@down_to 2)
             (@down)
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (begin
                        (@down_to 2)
                        (set! //l (list (list 0 '())))
                        (set! //l (@cp_statements //l))
                        (@up)
                        (cond ((not (@regular? (@i)))
                               (begin
                                 (display "Action ")
                                 (begin
                                   (display
                                     (@n_string (@v (list-ref (@i) (+ 1 1)))))
                                   (begin
                                     (display " is not regular!")
                                     (newline)
                                     (force-output))))))
                        (cond ((not (@right?)) (set! /fl_flag1 1))
                              (#t (@right) (set! /fl_flag1 0))))
                      (while-loop))
                     (#t #t)))
             (@up)
             (@up)
             (set! //l (@cp_clobber //l)))
            (#t (set! //l (@cp_a_s_reg //l)))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_a_s_reg //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//n-save //n))
      (set! //n (@size (list-ref (@i) (+ 1 2))))
      (let ((//a/s_/name (@v (list-ref (@i) (+ 1 1))))
            (//start 0)
            (/dispatch-save /dispatch)
            (/destination-save /destination)
            (/orig_/bodies (make-vector //n '()))
            (//bodies-save //bodies)
            (//names-save //names)
            (//entries-save //entries)
            (//succs-save //succs)
            (//preds-save //preds)
            (/orig_/entries (make-vector (+ //n 1) '()))
            (//name2/num (my-make-hash-table 16))
            (/runs 1))
        (set! /dispatch 0)
        (set! /destination (@make_name "destination"))
        (set! //bodies (make-vector //n '()))
        (set! //names (make-vector (+ //n 1) '()))
        (set! //entries (make-vector (+ //n 1) '()))
        (set! //succs (make-vector (+ //n 1) '()))
        (set! //preds (make-vector (+ //n 1) '()))
        (@edit)
        (let ((/-result-
                (@fd_init //n //bodies //names //name2/num)))
          (set! //bodies (car /-result-))
          (set! /-result- (cdr /-result-))
          (set! //names (car /-result-))
          (set! /-result- (cdr /-result-))
          (set! //name2/num (car /-result-))
          (set! /-result- (cdr /-result-)))
        (set! //start (gethash //name2/num //a/s_/name))
        (let ((/-result-
                (@fd_succs_and_preds
                  //n
                  //bodies
                  //start
                  //succs
                  //preds)))
          (set! //succs (car /-result-))
          (set! /-result- (cdr /-result-))
          (set! //preds (car /-result-))
          (set! /-result- (cdr /-result-)))
        (set! /dispatch
          (gethash //name2/num (@make_name "dispatch")))
        (cond ((null? /dispatch) (set! /dispatch (- 1))))
        (if (vector? //entries)
          (vector-set! //entries (- //start 1) (car //l))
          (set! //entries
            (replace-nth //entries //start (car //l))))
        (let ((var-save /i) (for-step 1) (for-end //n))
          (set! /i 1)
          (let for-loop ()
            (cond ((or (and (> 1 0) (<= /i for-end))
                       (and (< 1 0) (>= /i for-end)))
                   (vector-set!
                     /orig_/bodies
                     (- /i 1)
                     (let ((name //bodies))
                       (if (vector? name)
                         (vector-ref name (- /i 1))
                         (list-ref name (- /i 1)))))
                   (set! /i (+ /i for-step))
                   (for-loop))
                  (#t #t)))
          (set! /i var-save))
        (set! /fl_flag1 0)
        (let while-loop ()
          (cond ((= /fl_flag1 0)
                 (begin
                   (let ((var-save /i) (for-step 1) (for-end (+ //n 1)))
                     (set! /i 1)
                     (let for-loop ()
                       (cond ((or (and (> 1 0) (<= /i for-end))
                                  (and (< 1 0) (>= /i for-end)))
                              (vector-set!
                                /orig_/entries
                                (- /i 1)
                                (let ((name //entries))
                                  (if (vector? name)
                                    (vector-ref name (- /i 1))
                                    (list-ref name (- /i 1)))))
                              (set! /i (+ /i for-step))
                              (for-loop))
                             (#t #t)))
                     (set! /i var-save))
                   (let ((//state_/saves-save //state_/saves))
                     (set! //state_/saves 0)
                     (@cp_save_state)
                     (let ((/-result-
                             (@cp_update_entries
                               //start
                               //n
                               //names
                               //bodies
                               //entries)))
                       (set! //bodies (car /-result-))
                       (set! /-result- (cdr /-result-))
                       (set! //entries (car /-result-))
                       (set! /-result- (cdr /-result-)))
                     (@cp_restore_state)
                     (set! //state_/saves //state_/saves-save))
                   (begin (display "") (newline) (force-output))
                   (cond ((equal? /orig_/entries //entries)
                          (set! /fl_flag1 1))
                         (#t
                          (set! /runs (+ /runs 1))
                          (cond ((> /runs 20)
                                 (begin
                                   (display "Too many scans required.")
                                   (newline)
                                   (force-output))
                                 (set! /fl_flag1 1))
                                (#t
                                 (begin (display "") (newline) (force-output))
                                 (begin
                                   (display "Re-Scanning Action System, scan: ")
                                   (begin
                                     (display /runs)
                                     (newline)
                                     (force-output)))
                                 (let ((var-save /i) (for-step 1) (for-end //n))
                                   (set! /i 1)
                                   (let for-loop ()
                                     (cond ((or (and (> 1 0) (<= /i for-end))
                                                (and (< 1 0) (>= /i for-end)))
                                            (if (vector? //bodies)
                                              (vector-set!
                                                //bodies
                                                (- /i 1)
                                                (vector-ref
                                                  /orig_/bodies
                                                  (- /i 1)))
                                              (set! //bodies
                                                (replace-nth
                                                  //bodies
                                                  /i
                                                  (vector-ref
                                                    /orig_/bodies
                                                    (- /i 1)))))
                                            (set! /i (+ /i for-step))
                                            (for-loop))
                                           (#t #t)))
                                   (set! /i var-save))
                                 (set! /fl_flag1 0))))))
                 (while-loop))
                (#t #t)))
        (@fd_rebuild_as
          //n
          //bodies
          //names
          //a/s_/name
          '())
        (@end_edit)
        (cond ((null? (let ((name //entries))
                        (if (vector? name)
                          (vector-ref name (- (+ //n 1) 1))
                          (list-ref name (- (+ //n 1) 1)))))
               (set! //l (cdr //l)))
              (#t
               (if (vector? //l)
                 (vector-set!
                   //l
                   (- 1 1)
                   (let ((name //entries))
                     (if (vector? name)
                       (vector-ref name (- (+ //n 1) 1))
                       (list-ref name (- (+ //n 1) 1)))))
                 (set! //l
                   (replace-nth
                     //l
                     1
                     (let ((name //entries))
                       (if (vector? name)
                         (vector-ref name (- (+ //n 1) 1))
                         (list-ref name (- (+ //n 1) 1)))))))))
        (set! /dispatch /dispatch-save)
        (set! /destination /destination-save)
        (set! //bodies //bodies-save)
        (set! //names //names-save)
        (set! //entries //entries-save)
        (set! //succs //succs-save)
        (set! //preds //preds-save))
      (set! //n //n-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_update_entries
         //start
         //n-par
         //names-par
         //bodies-par
         //entries-par)
  (let ((//entries-save //entries)
        (//bodies-save //bodies)
        (//names-save //names)
        (//n-save //n)
        (funct-result '()))
    (set! //entries //entries-par)
    (set! //bodies //bodies-par)
    (set! //names //names-par)
    (set! //n //n-par)
    (let ((/todo (list //start))
          (/done-save /done)
          (/action-save /action)
          (//l-save //l)
          (/calls-save /calls)
          (/call-save /call))
      (set! /done (my-make-hash-table 16))
      (set! /action 0)
      (set! //l '())
      (set! /calls '())
      (set! /call '())
      (puthash /done (+ //n 1) 1)
      (puthash /done //start 1)
      (let while-loop ()
        (cond ((not (null? /todo))
               (begin
                 (set! /action (car /todo))
                 (set! /todo (cdr /todo))
                 (cond ((<= /initial_call_budget 200)
                        (set! //l (list (list 0 '()))))
                       ((not (null? (let ((name //entries))
                                      (if (vector? name)
                                        (vector-ref name (- /action 1))
                                        (list-ref name (- /action 1))))))
                        (set! //l
                          (list (let ((name //entries))
                                  (if (vector? name)
                                    (vector-ref name (- /action 1))
                                    (list-ref name (- /action 1)))))))
                       (#t (set! //l '())))
                 (begin (display ".") (force-output))
                 (cond ((equal? /action /dispatch)
                        (cond ((and (not (null? //l))
                                    (= (let ((name (let ((name //l))
                                                     (if (vector? name)
                                                       (vector-ref name (- 1 1))
                                                       (list-ref
                                                         name
                                                         (- 1 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))
                                       0))
                               (if (vector? //l)
                                 (let ((sub (vector-ref //l (- 1 1))))
                                   (if (vector? sub)
                                     (vector-set!
                                       sub
                                       (- 2 1)
                                       (@cp_remove
                                         (let ((name (let ((name //l))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 1 1))
                                                         (list-ref
                                                           name
                                                           (- 1 1))))))
                                           (if (vector? name)
                                             (vector-ref name (- 2 1))
                                             (list-ref name (- 2 1))))
                                         (list /destination)))
                                     (set! sub
                                       (replace-nth
                                         sub
                                         2
                                         (@cp_remove
                                           (let ((name (let ((name //l))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1))))))
                                             (if (vector? name)
                                               (vector-ref name (- 2 1))
                                               (list-ref name (- 2 1))))
                                           (list /destination)))))
                                   (vector-set! //l (- 1 1) sub))
                                 (let ((sub (car (nthcdr (- 1 1) //l))))
                                   (if (vector? sub)
                                     (vector-set!
                                       sub
                                       (- 2 1)
                                       (@cp_remove
                                         (let ((name (let ((name //l))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 1 1))
                                                         (list-ref
                                                           name
                                                           (- 1 1))))))
                                           (if (vector? name)
                                             (vector-ref name (- 2 1))
                                             (list-ref name (- 2 1))))
                                         (list /destination)))
                                     (set! sub
                                       (replace-nth
                                         sub
                                         2
                                         (@cp_remove
                                           (let ((name (let ((name //l))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1))))))
                                             (if (vector? name)
                                               (vector-ref name (- 2 1))
                                               (list-ref name (- 2 1))))
                                           (list /destination)))))
                                   (set! //l (replace-nth //l 1 sub))))))))
                 (@new_program
                   (let ((name //bodies))
                     (if (vector? name)
                       (vector-ref name (- /action 1))
                       (list-ref name (- /action 1)))))
                 (set! //l (@cp_statements //l))
                 (set! /calls (@calls (@program)))
                 (let while-loop ()
                   (cond ((not (null? /calls))
                          (begin
                            (set! /call (- (car (car /calls))))
                            (set! /calls (cdr /calls))
                            (cond ((null? (gethash /done /call))
                                   (set! /todo (concat /todo (list /call)))
                                   (puthash /done /call 1))))
                          (while-loop))
                         (#t #t)))
                 (if (vector? //bodies)
                   (vector-set! //bodies (- /action 1) (@program))
                   (set! //bodies
                     (replace-nth //bodies /action (@program)))))
               (while-loop))
              (#t #t)))
      (set! /done /done-save)
      (set! /action /action-save)
      (set! //l //l-save)
      (set! /calls /calls-save)
      (set! /call /call-save))
    (set! funct-result (list //bodies //entries))
    (set! //entries //entries-save)
    (set! //bodies //bodies-save)
    (set! //names //names-save)
    (set! //n //n-save)
    funct-result))

(define (@cp_call //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (number? (@v (@i)))
                (< (@v (@i)) 0)
                (not (null? //entries))
                (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0))
           (let ((/n-save /n)
                 (/new/l-save /new/l)
                 (/dest_value 0)
                 (/posn_n (@posn_n))
                 (/done-save /done)
                 (/seen_code 0)
                 (/tmp '()))
             (set! /n (- (@v (@i))))
             (set! /new/l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! /done 0)
             (cond ((and (equal? /n /dispatch)
                         (not (equal? /action /dispatch)))
                    (set! /dest_value
                      (@cp_get /new/l (list /destination)))
                    (cond ((and (not (null? /dest_value))
                                (= (@st /dest_value) //t_/variable)
                                (not (member (@v /dest_value) /reg_inits)))
                           (set! /tmp
                             (@cp_get /new/l (list (@v /dest_value))))
                           (cond ((not (null? /tmp)) (set! /dest_value /tmp)))))
                    (cond ((or (null? /dest_value)
                               (= (@st /dest_value) //t_/variable))
                           (set! /fl_flag1 0)
                           (let while-loop ()
                             (cond ((= /fl_flag1 0)
                                    (cond ((not (@left?)) (set! /fl_flag1 1))
                                          (#t
                                           (@left)
                                           (let ((/__/o/k 1))
                                             (set! /__/o/k
                                               (@new_match
                                                 /%const__constant_propagation__26
                                                 (@i)
                                                 /__/o/k))
                                             (cond ((= /__/o/k 1)
                                                    (let ((/__e_save /e)
                                                          (/__v_save /v))
                                                      (set! /e
                                                        (vector-ref
                                                          /__/match_array
                                                          1))
                                                      (set! /v
                                                        (vector-ref
                                                          /__/match_array
                                                          0))
                                                      (cond ((and (= (@st /v)
                                                                     //t_/var_/lvalue)
                                                                  (member
                                                                    (@v /v)
                                                                    /registers)
                                                                  (= (@st /e)
                                                                     //t_/number)
                                                                  (> (@v /e) 0)
                                                                  (member
                                                                    (@v /e)
                                                                    /dispatch_codes))
                                                             (set! /seen_code
                                                               1)))
                                                      (set! /e /__e_save)
                                                      (set! /v /__v_save)))))
                                           (cond ((and (not (= (@st (@i))
                                                               //t_/comment))
                                                       (not (= (@st (@i))
                                                               //t_/assignment)))
                                                  (set! /fl_flag1 1))
                                                 (#t (set! /fl_flag1 0)))))
                                    (while-loop))
                                   (#t #t)))
                           (@to /posn_n)))
                    (cond ((null? /dest_value)
                           (set! /fl_flag1 0)
                           (let while-loop ()
                             (cond ((= /fl_flag1 0)
                                    (cond ((not (@left?)) (set! /fl_flag1 1))
                                          (#t
                                           (@left)
                                           (cond ((and (not (= (@st (@i))
                                                               //t_/comment))
                                                       (not (= (@st (@i))
                                                               //t_/assignment)))
                                                  (set! /fl_flag1 1))
                                                 (#t
                                                  (let ((/__/o/k 1))
                                                    (set! /__/o/k
                                                      (@new_match
                                                        /%const__constant_propagation__27
                                                        (@i)
                                                        /__/o/k))
                                                    (cond ((= /__/o/k 1)
                                                           (let ((/__e_save /e))
                                                             (set! /e
                                                               (vector-ref
                                                                 /__/match_array
                                                                 0))
                                                             (set! /e
                                                               (list-ref
                                                                 (list-ref
                                                                   (@i)
                                                                   (+ 1 1))
                                                                 (+ 1 2)))
                                                             (@to /posn_n)
                                                             (set! //l
                                                               (@cp_unfold_dispatch
                                                                 /e
                                                                 /action
                                                                 /seen_code
                                                                 //l))
                                                             (set! /done 1)
                                                             (set! /e
                                                               /__e_save)))
                                                          (#t
                                                           (let ((/__/o/k 1))
                                                             (set! /__/o/k
                                                               (@new_match
                                                                 /%const__constant_propagation__28
                                                                 (@i)
                                                                 /__/o/k))
                                                             (cond ((= /__/o/k
                                                                       1)
                                                                    (let ((/__e_save
                                                                            /e))
                                                                      (set! /e
                                                                        (vector-ref
                                                                          /__/match_array
                                                                          0))
                                                                      (cond ((and (= (@st /e)
                                                                                     //t_/plus)
                                                                                  (= (@st (list-ref
                                                                                            /e
                                                                                            (+ 1
                                                                                               1)))
                                                                                     //t_/variable)
                                                                                  (= (@st (list-ref
                                                                                            /e
                                                                                            (+ 1
                                                                                               2)))
                                                                                     //t_/number)
                                                                                  (member
                                                                                    (@v (list-ref
                                                                                          /e
                                                                                          (+ 1
                                                                                             1)))
                                                                                    /registers))
                                                                             (let ((/e1-save
                                                                                     /e1))
                                                                               (set! /e1
                                                                                 (@cp_get
                                                                                   /new/l
                                                                                   (list (@v (list-ref
                                                                                               /e
                                                                                               (+ 1
                                                                                                  1))))))
                                                                               (cond ((and (not (null? /e1))
                                                                                           (= (@st /e1)
                                                                                              //t_/variable)
                                                                                           (member
                                                                                             (@v /e1)
                                                                                             /reg_inits))
                                                                                      (@to /posn_n)
                                                                                      (@paste_over
                                                                                        (@make //t_/call
                                                                                               (- (+ //n
                                                                                                     1))
                                                                                               '()))
                                                                                      (set! /done
                                                                                        1)))
                                                                               (set! /e1
                                                                                 /e1-save))))
                                                                      (cond ((= /done
                                                                                1))
                                                                            ((and (or (= (@st /e)
                                                                                         //t_/variable)
                                                                                      (= (@st /e)
                                                                                         //t_/struct)
                                                                                      (= (@st /e)
                                                                                         //t_/sub_/seg)
                                                                                      (= (@st /e)
                                                                                         //t_/rel_/seg))
                                                                                  (or (not (member
                                                                                             (@struct_elts
                                                                                               /e)
                                                                                             /return_elts))
                                                                                      (member
                                                                                        (@struct_elts
                                                                                          /e)
                                                                                        //vcons)
                                                                                      (= /seen_code
                                                                                         1)))
                                                                             (@to /posn_n)
                                                                             (set! //l
                                                                               (@cp_unfold_dispatch
                                                                                 /e
                                                                                 /action
                                                                                 /seen_code
                                                                                 //l)))
                                                                            ((and (>= /effort
                                                                                      2)
                                                                                  (= //c/p_/in_/preserves_/dest
                                                                                     0))
                                                                             (set! //l
                                                                               (@cp_multiple_destinations
                                                                                 /e
                                                                                 //l)))
                                                                            (#t
                                                                             (begin
                                                                               (display
                                                                                 "d1")
                                                                               (force-output))
                                                                             (set! //l
                                                                               (cdr //l))))
                                                                      (set! /done
                                                                        1)
                                                                      (set! /e
                                                                        /__e_save))))))))
                                                  (cond ((= /done 1)
                                                         (set! /fl_flag1 1))
                                                        (#t
                                                         (set! /fl_flag1
                                                           0)))))))
                                    (while-loop))
                                   (#t #t)))
                           (cond ((and (= /done 0)
                                       (= (@posn_n) 1)
                                       (= (@st (@i)) //t_/comment)
                                       (equal? (@v (@i)) " <ENTRY POINT> "))
                                  (@to /posn_n)
                                  (@paste_over
                                    (@make //t_/call (- (+ //n 1)) '()))
                                  (set! /done 1)))
                           (@to /posn_n)
                           (cond ((= /done 0)
                                  (begin (display "d1") (force-output))
                                  (set! //l (cdr //l)))))
                          (#t
                           (set! //l
                             (@cp_unfold_dispatch
                               /dest_value
                               /action
                               /seen_code
                               //l)))))
                   ((and (not (null? //l))
                         (= (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))
                            0))
                    (set! //l (cdr //l))))
             (cond ((= (@st (@i)) //t_/call)
                    (set! /n (- (@v (@i))))
                    (cond ((null? (let ((name //entries))
                                    (if (vector? name)
                                      (vector-ref name (- /n 1))
                                      (list-ref name (- /n 1)))))
                           (if (vector? //entries)
                             (vector-set! //entries (- /n 1) (list 0 /new/l))
                             (set! //entries
                               (replace-nth //entries /n (list 0 /new/l)))))
                          (#t
                           (if (vector? //entries)
                             (vector-set!
                               //entries
                               (- /n 1)
                               (list 0
                                     (@cp_merge
                                       /new/l
                                       (let ((name (let ((name //entries))
                                                     (if (vector? name)
                                                       (vector-ref
                                                         name
                                                         (- /n 1))
                                                       (list-ref
                                                         name
                                                         (- /n 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 2 1))
                                           (list-ref name (- 2 1)))))))
                             (set! //entries
                               (replace-nth
                                 //entries
                                 /n
                                 (list 0
                                       (@cp_merge
                                         /new/l
                                         (let ((name (let ((name //entries))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- /n 1))
                                                         (list-ref
                                                           name
                                                           (- /n 1))))))
                                           (if (vector? name)
                                             (vector-ref name (- 2 1))
                                             (list-ref name (- 2 1)))))))))))))
             (set! /n /n-save)
             (set! /new/l /new/l-save)
             (set! /done /done-save)))
          (#t (set! //l (@cp_clobber //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_unfold_dispatch
         /val-par
         /action-par
         /seen_code
         //l-par)
  (let ((//l-save //l)
        (/action-save /action)
        (/val-save /val)
        (funct-result '()))
    (set! //l //l-par)
    (set! /action /action-par)
    (set! /val /val-par)
    (cond ((and (= (@st /val) //t_/string)
                (@starts_with? (@v /val) "hex 0x"))
           (set! /val
             (let ((s (@v /val)))
               (substring s 6 (string-length s))))
           (cond ((> (string-length /val) 7)
                  (set! /val
                    (let ((s /val))
                      (substring
                        s
                        (- (string-length /val) 7)
                        (string-length s))))))
           (set! /val
             (@make //t_/number (@hex_to_num /val) '())))
          ((and (= (@st /val) //t_/negate)
                (= (@st (list-ref /val (+ 1 1))) //t_/number))
           (set! /val
             (@make //t_/number
                    (- (@v (list-ref /val (+ 1 1))))
                    '()))))
    (cond ((= //unfold_/dispatch 0)
           (begin (display "d2") (force-output))
           (set! //l (cdr //l)))
          ((or (= (@st /val) //t_/number)
               (and (= (@st /val) //t_/negate)
                    (= (@st (list-ref /val (+ 1 1))) //t_/number)))
           (cond ((@cp_cycle? (@posn) 20 3)
                  (begin
                    (display "Posn cycle detected: ")
                    (begin
                      (display (@posn))
                      (newline)
                      (force-output)))
                  (let ((/posn (@posn)))
                    (@goto '())
                    (@foreach_statement
                      /foreach-constant_propagation-19
                      0
                      (@as_type)
                      0)
                    (cond ((null? (@program)) (@new_program (@skips))))
                    (@goto /posn)))
                 (#t
                  (begin (display "D") (force-output))
                  (cond ((not (= (@v /val) 0))
                         (@cp_clobber_value (@v /val) (@posn))))
                  (begin (display " ") (newline) (force-output))
                  (begin
                    (display "Unfolding a dispatch: destination=")
                    (begin
                      (display (@v /val))
                      (begin
                        (display " posn=")
                        (begin
                          (display (@posn))
                          (newline)
                          (force-output)))))
                  (@splice_over
                    (@cs (let ((name //bodies))
                           (if (vector? name)
                             (vector-ref name (- /dispatch 1))
                             (list-ref name (- /dispatch 1))))))
                  (set! //l
                    (@cp_put0 //l (list /destination) /val))
                  (@foreach_expn
                    /foreach-constant_propagation-20
                    0
                    (@as_type)
                    0)
                  (cond ((null? (@program)) (@new_program (@skips))))
                  (cond (#t (@trans //t/r_/simplify "")))
                  (if (vector? //l)
                    (let ((sub (vector-ref //l (- 1 1))))
                      (if (vector? sub)
                        (vector-set!
                          sub
                          (- 2 1)
                          (@cp_remove
                            (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            (list /destination)))
                        (set! sub
                          (replace-nth
                            sub
                            2
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list /destination)))))
                      (vector-set! //l (- 1 1) sub))
                    (let ((sub (car (nthcdr (- 1 1) //l))))
                      (if (vector? sub)
                        (vector-set!
                          sub
                          (- 2 1)
                          (@cp_remove
                            (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            (list /destination)))
                        (set! sub
                          (replace-nth
                            sub
                            2
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list /destination)))))
                      (set! //l (replace-nth //l 1 sub))))
                  (cond ((and (@left?)
                              (@right?)
                              (= (@st (@i)) //t_/proc_/call)
                              (@equal?
                                (@i)
                                (list-ref (@parent) (+ 1 (- (@posn_n) 1))))
                              (= (@st (list-ref
                                        (@parent)
                                        (+ 1 (+ (@posn_n) 1))))
                                 //t_/call)
                              (equal?
                                (@v (list-ref (@parent) (+ 1 (+ (@posn_n) 1))))
                                (- /dispatch)))
                         (begin
                           (display "dispatch unfolding cycle detected: ")
                           (begin
                             (display (@posn))
                             (newline)
                             (force-output)))
                         (@right)
                         (@paste_over
                           (@make //t_/comment
                                  "FIXME: dispatch cycle detected!"
                                  '()))
                         (@paste_after
                           (@make //t_/call (- (+ //n 1)) '()))))
                  (set! //l (@cp_statement //l)))))
          ((or (not (null? (@set_intersect /reg_inits (@variables /val))))
               (@cp_reg_init_var? /val)
               (member
                 (@make_name "NOT_USED")
                 (@variables /val)))
           (let ((/done-save /done))
             (set! /done 0)
             (let ((/-result-
                     (@cp_scan_for_return_code /val /reg /done)))
               (set! /reg (car /-result-))
               (set! /-result- (cdr /-result-))
               (set! /done (car /-result-))
               (set! /-result- (cdr /-result-)))
             (cond ((= /done 0)
                    (begin (display "R") (newline) (force-output))
                    (begin
                      (display "Unfolding a dispatch: destination = ")
                      (force-output))
                    (@pp_item /val 80 "")
                    (begin
                      (display " posn=")
                      (begin
                        (display (@posn))
                        (newline)
                        (force-output)))
                    (@paste_over (@make //t_/call (- (+ //n 1)) '()))))
             (set! /done /done-save)))
          ((@is_addr? /val)
           (let ((/done-save /done))
             (set! /done 0)
             (let ((/-result-
                     (@cp_scan_for_return_code /val /reg /done)))
               (set! /reg (car /-result-))
               (set! /-result- (cdr /-result-))
               (set! /done (car /-result-))
               (set! /-result- (cdr /-result-)))
             (cond ((= /done 0)
                    (@paste_over (@make //t_/call (- (+ //n 1)) '()))
                    (@cp_make_proc_call
                      /val
                      (@make //t_/number 0 '()))
                    (begin (display "d8") (force-output))))
             (set! /done /done-save)))
          ((and (or (= (@st /val) //t_/variable)
                    (= (@st /val) //t_/struct)
                    (= (@st /val) //t_/sub_/seg)
                    (= (@st /val) //t_/rel_/seg))
                (not (member (@struct_elts /val) /return_elts))
                (or (>= /effort 2)
                    (member (@struct_elts /val) //constants)
                    (member (@struct_elts /val) //vcons)))
           (let ((/done-save /done))
             (set! /done 0)
             (let ((/-result-
                     (@cp_scan_for_return_code /val /reg /done)))
               (set! /reg (car /-result-))
               (set! /-result- (cdr /-result-))
               (set! /done (car /-result-))
               (set! /-result- (cdr /-result-)))
             (cond ((and (= /done 0)
                         (> /initial_call_budget 200)
                         (not (and (= (@st /val) //t_/variable)
                                   (@ends_with? (@v /val) "_RETURN"))))
                    (@paste_over (@make //t_/call (- (+ //n 1)) '()))
                    (@cp_make_proc_call
                      /val
                      (@make //t_/number 0 '()))
                    (begin (display "d7") (force-output))))
             (set! /done /done-save)))
          ((or (= (@st /val) //t_/variable)
               (= (@st /val) //t_/struct)
               (= (@st /val) //t_/sub_/seg)
               (= (@st /val) //t_/rel_/seg))
           (let ((/done-save /done))
             (set! /done 0)
             (let ((/-result-
                     (@cp_scan_for_return_code /val /reg /done)))
               (set! /reg (car /-result-))
               (set! /-result- (cdr /-result-))
               (set! /done (car /-result-))
               (set! /-result- (cdr /-result-)))
             (cond ((and (= (@st /val) //t_/variable)
                         (@starts_with? (@v /val) "EODAD_"))
                    (set! //l (@cp_multiple_destinations /val //l))))
             (cond ((= /done 0)
                    (cond ((and (>= /effort 2)
                                (= //c/p_/in_/preserves_/dest 0))
                           (set! //l (@cp_multiple_destinations /val //l)))
                          ((and (< /effort 2)
                                (not (or (member
                                           (@struct_elts /val)
                                           //constants)
                                         (member
                                           (@struct_elts /val)
                                           //vcons)))))
                          ((or (member //t_/times (@spec_types /val))
                               (not (member (@struct_elts /val) /return_elts)))
                           (@cp_make_proc_call
                             /val
                             (@make //t_/number 0 '()))
                           (begin (display "d8") (force-output))))))
             (set! /done /done-save)))
          (#t
           (begin (display "d5=") (force-output))
           (@print_wsl /val "")
           (set! //l (cdr //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    (set! /action /action-save)
    (set! /val /val-save)
    funct-result))

(define (@cp_scan_for_return_code
         /val-par
         /reg-par
         /done-par)
  (let ((/done-save /done)
        (/reg-save /reg)
        (/val-save /val)
        (funct-result '()))
    (set! /done /done-par)
    (set! /reg /reg-par)
    (set! /val /val-par)
    (let ((/posn_n (@posn_n)))
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (cond ((not (@left?)) (set! /fl_flag1 1))
                     (#t
                      (@left)
                      (cond ((and (not (= (@st (@i)) //t_/comment))
                                  (not (= (@st (@i)) //t_/assignment)))
                             (set! /fl_flag1 1))
                            ((and (= (@st (@i)) //t_/assignment)
                                  (= (@st (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 1)))
                                     //t_/var_/lvalue)
                                  (not (equal?
                                         (@v (list-ref
                                               (list-ref (@i) (+ 1 1))
                                               (+ 1 1)))
                                         (@make_name "destination")))
                                  (not (equal?
                                         (@v (list-ref
                                               (list-ref (@i) (+ 1 1))
                                               (+ 1 1)))
                                         (@make_name "exit_flag"))))
                             (cond ((not (member
                                           (@v (list-ref
                                                 (list-ref (@i) (+ 1 1))
                                                 (+ 1 1)))
                                           /registers))
                                    (set! /fl_flag1 1))
                                   ((and (= (@st (list-ref
                                                   (list-ref (@i) (+ 1 1))
                                                   (+ 1 2)))
                                            //t_/variable)
                                         (member
                                           (@v (list-ref
                                                 (list-ref (@i) (+ 1 1))
                                                 (+ 1 2)))
                                           /reg_inits)
                                         (= (@st /val) //t_/variable)
                                         (member (@v /val) /reg_inits))
                                    (set! /done 0)
                                    (set! /fl_flag1 1))
                                   ((or (and (= (@st (list-ref
                                                       (list-ref (@i) (+ 1 1))
                                                       (+ 1 2)))
                                                //t_/number)
                                             (member
                                               (@v (list-ref
                                                     (list-ref (@i) (+ 1 1))
                                                     (+ 1 2)))
                                               /dispatch_codes)
                                             (> (@v (list-ref
                                                      (list-ref (@i) (+ 1 1))
                                                      (+ 1 2)))
                                                0))
                                        (and (= (@st (list-ref
                                                       (list-ref (@i) (+ 1 1))
                                                       (+ 1 2)))
                                                //t_/variable)
                                             (member
                                               (@v (list-ref
                                                     (list-ref (@i) (+ 1 1))
                                                     (+ 1 2)))
                                               /reg_inits)))
                                    (set! /done 1)
                                    (set! /reg
                                      (@v (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 1))))
                                    (@to /posn_n)
                                    (cond ((<= /initial_call_budget 200)
                                           (set! /done 1)
                                           (set! //l (cdr //l))
                                           (set! /fl_flag1 1))
                                          ((or (equal?
                                                 (@variables /val)
                                                 (list /a_name))
                                               (= (@st /val)
                                                  //t_/x_/funct_/call))
                                           (@cp_make_proc_call
                                             /val
                                             (@make //t_/variable /reg '()))
                                           (begin
                                             (display "d9a")
                                             (force-output))
                                           (set! /fl_flag1 1))
                                          ((or (not (member
                                                      (@struct_elts /val)
                                                      /return_elts))
                                               (member
                                                 (list (@v /val))
                                                 //vcons))
                                           (@cp_make_proc_call
                                             /val
                                             (@make //t_/variable /reg '()))
                                           (begin
                                             (display "d9b")
                                             (force-output))
                                           (set! /fl_flag1 1))
                                          ((and (not (equal?
                                                       (@v /val)
                                                       (@make_name "r15")))
                                                (< /effort 2))
                                           (set! /fl_flag1 1))
                                          (#t
                                           (@cp_make_proc_call
                                             /val
                                             (@make //t_/variable /reg '()))
                                           (begin
                                             (display "d9c")
                                             (force-output))
                                           (set! /fl_flag1 1))))
                                   (#t (set! /fl_flag1 1))))
                            (#t (set! /fl_flag1 0)))))
               (while-loop))
              (#t #t)))
      (cond ((and (= /done 0)
                  (= (@st /val) //t_/variable)
                  (= (@st (@i)) //t_/assignment)
                  (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                     //t_/var_/lvalue)
                  (equal?
                    (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                    (@v /val))
                  (not (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                          //t_/struct))
                  (not (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                          //t_/sub_/seg))
                  (member
                    /a_name
                    (@used (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))))
             (@to /posn_n)
             (@splice_over
               (list (@make 101
                            '()
                            (list (@make 9 (@make_name "call_via_ptr") '())
                                  (@make 10
                                         '()
                                         (list (@var_to_expn /val)
                                               (@make 207
                                                      (@make_name "r1")
                                                      '())))
                                  (@make 12
                                         '()
                                         (list (@make 501
                                                      (@make_name "regs")
                                                      '())
                                               (@make 501
                                                      (@make_name "result_code")
                                                      '())
                                               (@make 501
                                                      (@make_name "os")
                                                      '())))))
                     (@make //t_/call (- (+ //n 1)) '())))
             (set! /done 1))
            (#t (@to /posn_n)))
      (cond ((and (= /done 0)
                  (> (if (vector? (@posn))
                       (vector-length (@posn))
                       (length (@posn)))
                     1)
                  (= (@st (@gparent)) //t_/guarded)
                  (= (@st (list-ref (@parent) (+ 1 1)))
                     //t_/comment)
                  (equal?
                    (@v (list-ref (@parent) (+ 1 1)))
                    " <ENTRY POINT> ")
                  (@set_subset?
                    (@stat_types (@parent))
                    (@make_set
                      (list //t_/skip
                            //t_/comment
                            //t_/assignment
                            //t_/call))))
             (begin
               (display "small entry point dispatch")
               (force-output))
             (@paste_over (@make //t_/call (- (+ //n 1)) '())))))
    (set! funct-result (list /reg /done))
    (set! /done /done-save)
    (set! /reg /reg-save)
    (set! /val /val-save)
    funct-result))

(define (@cp_multiple_destinations /v-par //l-par)
  (let ((//l-save //l) (/v-save /v) (funct-result '()))
    (set! //l //l-par)
    (set! /v /v-par)
    (let ((/posn (@posn))
          (//o/k-save //o/k)
          (/values-save /values))
      (set! //o/k 1)
      (set! /values '())
      (@edit)
      (@new_program /orig_program)
      (@foreach_statement
        /foreach-constant_propagation-21
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@undo_edit)
      (cond ((and (= //o/k 1) (not (null? /values)))
             (let ((/guards '()) (/call-save /call))
               (set! /call (@make //t_/call (- /dispatch) '()))
               (let ((var-save /e) (seq-save /values))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /e (car for-tmp))
                          (set! /guards
                            (cons (@make 7
                                         '()
                                         (list (@make 313
                                                      '()
                                                      (list (@var_to_expn /v)
                                                            (@var_to_expn /e)))
                                               (@make 17
                                                      '()
                                                      (list (@make 110
                                                                   '()
                                                                   (list (@make 6
                                                                                '()
                                                                                (list (@make 501
                                                                                             (@make_name
                                                                                               "destination")
                                                                                             '())
                                                                                      (@var_to_expn
                                                                                        /e)))))
                                                            /call))))
                                  /guards))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /e var-save))
               (set! /call (@make //t_/call (- (+ //n 1)) '()))
               (set! /guards
                 (cons (@make 7
                              '()
                              (list (@make 308 '() '())
                                    (@make 17 '() (list /call))))
                       /guards))
               (@paste_over
                 (@make //t_/cond '() (reverse /guards)))
               (set! //l (@cp_statement //l))
               (set! /call /call-save))))
      #t
      (set! //o/k //o/k-save)
      (set! /values /values-save))
    (set! funct-result //l)
    (set! //l //l-save)
    (set! /v /v-save)
    funct-result))

(define (@cp_make_proc_call /val-par /reg-par)
  (let ((/reg-save /reg) (/val-save /val))
    (set! /reg /reg-par)
    (set! /val /val-par)
    (begin (display " ") (newline) (force-output))
    (begin
      (display "Making a call to procedure: ")
      (force-output))
    (@pp_item /val 80 "")
    (begin
      (display " returning via ")
      (force-output))
    (@pp_item /reg 80 "")
    (cond ((@left?)
           (@left)
           (cond ((and (= (@st (@i)) //t_/assignment)
                       (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                          //t_/var_/lvalue)
                       (= (@st /reg) //t_/variable)
                       (equal?
                         (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                         (@v /reg))
                       (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                          //t_/number)
                       (member (@v /reg) (@variables /val)))
                  (if (vector? //l)
                    (let ((sub (vector-ref //l (- 1 1))))
                      (if (vector? sub)
                        (vector-set!
                          sub
                          (- 2 1)
                          (@cp_remove
                            (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            (list (@v /reg))))
                        (set! sub
                          (replace-nth
                            sub
                            2
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list (@v /reg))))))
                      (vector-set! //l (- 1 1) sub))
                    (let ((sub (car (nthcdr (- 1 1) //l))))
                      (if (vector? sub)
                        (vector-set!
                          sub
                          (- 2 1)
                          (@cp_remove
                            (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            (list (@v /reg))))
                        (set! sub
                          (replace-nth
                            sub
                            2
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list (@v /reg))))))
                      (set! //l (replace-nth //l 1 sub))))
                  (set! /reg
                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                  (@delete))
                 (#t (@right)))))
    (@splice_before
      (list (@make 101
                   '()
                   (list (@make 9 (@make_name "call_via_ptr") '())
                         (@make 10
                                '()
                                (list (@var_to_expn /val)
                                      (@make 207 (@make_name "r1") '())))
                         (@make 12
                                '()
                                (list (@make 501 (@make_name "regs") '())
                                      (@make 501 (@make_name "result_code") '())
                                      (@make 501 (@make_name "os") '())))))
            (@make 110
                   '()
                   (list (@make 6
                                '()
                                (list (@make 501 (@make_name "destination") '())
                                      (@var_to_expn /reg)))))
            /%const__constant_propagation__29))
    (set! //l (@cp_statement //l))
    (set! /reg /reg-save)
    (set! /val /val-save)))

(define (@cp_clobber_value /val-par /posn)
  (let ((/val-save /val))
    (set! /val /val-par)
    (let ((/steps 10) (/notused-save /notused))
      (set! /notused '())
      (cond ((< /val 0)
             (set! /notused
               (@make //t_/variable
                      (@make_name
                        (string-append "NOTUSED__" (@string (- /val))))
                      '())))
            (#t
             (set! /notused
               (@make //t_/variable
                      (@make_name
                        (string-append "NOTUSED_" (@string /val)))
                      '()))))
      (begin
        (display "-")
        (begin
          (display /val)
          (begin (display "-") (force-output))))
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (begin
                 (set! /steps (- /steps 1))
                 (cond ((= /steps 0) (set! /fl_flag1 1))
                       (#t (set! /fl_flag1 0)))
                 (cond ((= /fl_flag1 0)
                        (cond ((@left?) (@left) (set! /fl_flag1 0))
                              ((@up?)
                               (@up)
                               (@up_to_statement)
                               (set! /fl_flag1 0))
                              (#t (set! /fl_flag1 1)))
                        (cond ((= /fl_flag1 0)
                               (cond ((and (= (@st (@i)) //t_/assignment)
                                           (not (and (= (@st (list-ref
                                                               (list-ref
                                                                 (@i)
                                                                 (+ 1 1))
                                                               (+ 1 1)))
                                                        //t_/var_/lvalue)
                                                     (@starts_with?
                                                       (@v (list-ref
                                                             (list-ref
                                                               (@i)
                                                               (+ 1 1))
                                                             (+ 1 1)))
                                                       "HANDLE_CONDITION_"))))
                                      (let ((/__/o/k 1))
                                        (set! /__/o/k
                                          (@new_match
                                            /%const__constant_propagation__28
                                            (@i)
                                            /__/o/k))
                                        (cond ((= /__/o/k 1)
                                               (let ((/__n_save /n))
                                                 (set! /n
                                                   (vector-ref
                                                     /__/match_array
                                                     0))
                                                 (cond ((and (= (@st /n)
                                                                //t_/number)
                                                             (equal?
                                                               (@v /n)
                                                               /val))
                                                        (@paste_over (@skip))))
                                                 (set! /n /__n_save)))))
                                      (@foreach_expn
                                        /foreach-constant_propagation-22
                                        0
                                        (@as_type)
                                        0)
                                      (cond ((null? (@program))
                                             (@new_program (@skips))))
                                      (set! /fl_flag1 0))
                                     ((and (not (= (@st (@i)) //t_/assignment))
                                           (not (= (@st (@i)) //t_/skip))
                                           (not (= (@st (@i)) //t_/comment))
                                           (not (= (@st (@i))
                                                   //t_/a_/proc_/call)))
                                      (set! /fl_flag1 1))
                                     (#t (set! /fl_flag1 0))))))))
               (while-loop))
              (#t #t)))
      (cond ((and (null? (@posn)) (not (null? //names)))
             (cond ((= (if (vector?
                             (let ((name //preds))
                               (if (vector? name)
                                 (vector-ref name (- /action 1))
                                 (list-ref name (- /action 1)))))
                         (vector-length
                           (let ((name //preds))
                             (if (vector? name)
                               (vector-ref name (- /action 1))
                               (list-ref name (- /action 1)))))
                         (length
                           (let ((name //preds))
                             (if (vector? name)
                               (vector-ref name (- /action 1))
                               (list-ref name (- /action 1))))))
                       1)
                    (@edit)
                    (@new_program
                      (let ((name //bodies))
                        (if (vector? name)
                          (vector-ref
                            name
                            (- (car (let ((name //preds))
                                      (if (vector? name)
                                        (vector-ref name (- /action 1))
                                        (list-ref name (- /action 1)))))
                               1))
                          (list-ref
                            name
                            (- (car (let ((name //preds))
                                      (if (vector? name)
                                        (vector-ref name (- /action 1))
                                        (list-ref name (- /action 1)))))
                               1)))))
                    (@down_last)
                    (let ((/e-save /e) (/calls-save /calls))
                      (set! /e (@make //t_/number /val '()))
                      (set! /calls '())
                      (set! /fl_flag1 0)
                      (let while-loop ()
                        (cond ((= /fl_flag1 0)
                               (begin
                                 (let ((/__/o/k 1))
                                   (vector-set! /__/match_array 1 /e)
                                   (set! /__/o/k
                                     (@new_match
                                       /%const__constant_propagation__30
                                       (@i)
                                       /__/o/k))
                                   (cond ((= /__/o/k 1)
                                          (let ((/__v_save /v))
                                            (set! /v
                                              (vector-ref /__/match_array 0))
                                            (@paste_over
                                              (@make 110
                                                     '()
                                                     (list (@make 6
                                                                  '()
                                                                  (list (@expn_to_var
                                                                          /v)
                                                                        (@var_to_expn
                                                                          /notused))))))
                                            (set! /v /__v_save)))))
                                 (cond ((member
                                          //t_/proc_/call
                                          (@stat_types (@i)))
                                        (set! /fl_flag1 1))
                                       (#t (set! /fl_flag1 0)))
                                 (cond ((= /fl_flag1 0)
                                        (set! /calls (@calls (@i)))
                                        (cond ((not (null? /calls))
                                               (cond ((or (> (if (vector?
                                                                   /calls)
                                                               (vector-length
                                                                 /calls)
                                                               (length /calls))
                                                             1)
                                                          (not (equal?
                                                                 (car (car /calls))
                                                                 (- /action))))
                                                      (set! /fl_flag1 1))
                                                     (#t (set! /fl_flag1 0))))
                                              (#t (set! /fl_flag1 0)))
                                        (cond ((= /fl_flag1 0)
                                               (cond ((not (@left?))
                                                      (set! /fl_flag1 1))
                                                     (#t
                                                      (@left)
                                                      (set! /fl_flag1 0))))))))
                               (while-loop))
                              (#t #t)))
                      (set! /e /e-save)
                      (set! /calls /calls-save))
                    (if (vector? //bodies)
                      (vector-set!
                        //bodies
                        (- (car (let ((name //preds))
                                  (if (vector? name)
                                    (vector-ref name (- /action 1))
                                    (list-ref name (- /action 1)))))
                           1)
                        (@program))
                      (set! //bodies
                        (replace-nth
                          //bodies
                          (car (let ((name //preds))
                                 (if (vector? name)
                                   (vector-ref name (- /action 1))
                                   (list-ref name (- /action 1)))))
                          (@program))))
                    (@undo_edit)))))
      (@goto /posn)
      (set! /notused /notused-save))
    (set! /val /val-save)))

(define (@cp_cond //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//r-save //r) (/orig/l //l))
      (set! //r '())
      (@down)
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (begin
                 (set! //l (@cp_guarded //l))
                 (set! //r (@cp_mergel //r //l))
                 (cond ((not (@right?)) (set! /fl_flag1 1))
                       ((= (@st (list-ref (@i) (+ 1 1))) //t_/true)
                        (cond ((@right?) (@delete_rest)))
                        (cond ((or (> (@size (list-ref (@i) (+ 1 2))) 1)
                                   (not (= (@st (@get (@i) (list 2 1)))
                                           //t_/skip)))
                               (@paste_after
                                 /%const__constant_propagation__31)))
                        (set! /fl_flag1 1))
                       (#t
                        (@down)
                        (set! /orig/l (@cp_deny_condition /orig/l))
                        (@up)
                        (@right)
                        (set! //l /orig/l)
                        (set! /fl_flag1 0))))
               (while-loop))
              (#t #t)))
      (@up)
      (set! //l //r)
      (set! //r //r-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_d_if //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((//r-save //r) (/orig/l //l))
      (set! //r '())
      (@down)
      (set! //l (@cp_guarded //l))
      (set! //r (@cp_mergel //r //l))
      (let while-loop ()
        (cond ((@right?)
               (begin
                 (@right)
                 (set! //l /orig/l)
                 (set! //l (@cp_guarded //l))
                 (set! //r (@cp_mergel //r //l)))
               (while-loop))
              (#t #t)))
      (@up)
      (set! //l //r)
      (set! //r //r-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_d_do //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (set! //l (@cp_clobber //l))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_exit //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((and (not (null? //l))
                (= (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1))))
                   0)
                (> (@v (@i)) 0))
           (set! //l
             (@cp_exit_sub
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1))))
               (@v (@i))
               (cdr //l)))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_exit_sub /l-par /n-par //l-par)
  (let ((//l-save //l)
        (/n-save /n)
        (/l-save /l)
        (//r-save //r)
        (funct-result '()))
    (set! //l //l-par)
    (set! /n /n-par)
    (set! /l /l-par)
    (set! //r '())
    (cond ((null? //l) (set! //r (list (list /n /l))))
          ((< (let ((name (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1))))
              /n)
           (set! //r
             (cons (car //l) (@cp_exit_sub /l /n (cdr //l)))))
          ((> (let ((name (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                (if (vector? name)
                  (vector-ref name (- 1 1))
                  (list-ref name (- 1 1))))
              /n)
           (set! //r (cons (list /n /l) //l)))
          (#t
           (set! //r
             (cons (list /n
                         (@cp_merge
                           /l
                           (let ((name (let ((name //l))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))))
                   (cdr //l)))))
    (set! funct-result //r)
    (set! //l //l-save)
    (set! /n /n-save)
    (set! /l /l-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_floop //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (set! //l (@cp_first_time_flag //l))
    (@down)
    (set! //l (@cp_increment_l //l))
    (cond ((@gen_improper? (@i) "Reg")
           (set! //l (@cp_statements //l)))
          (#t (set! //l (@cp_gen_loop 1 //l))))
    (@up)
    (cond ((not (null? //l))
           (set! //l (@cp_decrement_l //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_first_time_flag //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/n3 '()))
      (let ((/__/o/k 1))
        (set! /__/o/k
          (@new_match
            /%const__constant_propagation__32
            (@i)
            /__/o/k))
        (cond ((= /__/o/k 1)
               (let ((/__/s4_save //s4)
                     (/__n2_save /n2)
                     (/__/s3_save //s3)
                     (/__/s2_save //s2)
                     (/__n1_save /n1)
                     (/__v_save /v)
                     (/__/s1_save //s1))
                 (set! //s4 (vector-ref /__/match_array 6))
                 (set! /n2 (vector-ref /__/match_array 5))
                 (set! //s3 (vector-ref /__/match_array 4))
                 (set! //s2 (vector-ref /__/match_array 3))
                 (set! /n1 (vector-ref /__/match_array 2))
                 (set! /v (vector-ref /__/match_array 1))
                 (set! //s1 (vector-ref /__/match_array 0))
                 (set! //s5 (@cp_trim_exit_code //s4))
                 (cond ((and (or (= (@st /v) //t_/variable)
                                 (= (@st /v) //t_/struct))
                             (= (@st /n1) //t_/number)
                             (= (@st /n2) //t_/number)
                             (@gen_proper?
                               (@make //t_/statements '() (concat //s1 //s2))
                               (@as_type))
                             (not (member
                                    (@struct_elts /v)
                                    (@elements
                                      (@make //t_/statements
                                             '()
                                             (concat
                                               (concat (concat //s1 //s2) //s3)
                                               //s5))))))
                        (set! /n3
                          (@cp_get
                            (let ((name (let ((name //l))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            (@struct_elts /v)))
                        (cond ((and (not (null? /n3))
                                    (= (@st /n3) //t_/number)
                                    (equal? (@v /n3) (@v /n1)))
                               (@splice_over
                                 (@cs (@make 17
                                             '()
                                             (append
                                               //s1
                                               (list (@make 114
                                                            '()
                                                            (list (@make 7
                                                                         '()
                                                                         (list (@make 313
                                                                                      '()
                                                                                      (list (@var_to_expn
                                                                                              /v)
                                                                                            (@var_to_expn
                                                                                              /n1)))
                                                                               (@make 17
                                                                                      '()
                                                                                      //s2)))
                                                                  (@make 7
                                                                         '()
                                                                         (list (@make 308
                                                                                      '()
                                                                                      '())
                                                                               (@make 17
                                                                                      '()
                                                                                      (list (@make 145
                                                                                                   '()
                                                                                                   '())))))))
                                                     (@make 133
                                                            '()
                                                            (list (@make 17
                                                                         '()
                                                                         (append
                                                                           //s3
                                                                           (list (@make 110
                                                                                        '()
                                                                                        (list (@make 6
                                                                                                     '()
                                                                                                     (list (@expn_to_var
                                                                                                             /v)
                                                                                                           (@var_to_expn
                                                                                                             /n2))))))
                                                                           //s4
                                                                           //s1
                                                                           (list (@make 114
                                                                                        '()
                                                                                        (list (@make 7
                                                                                                     '()
                                                                                                     (list (@make 313
                                                                                                                  '()
                                                                                                                  (list (@var_to_expn
                                                                                                                          /v)
                                                                                                                        (@var_to_expn
                                                                                                                          /n1)))
                                                                                                           (@make 17
                                                                                                                  '()
                                                                                                                  //s2)))
                                                                                              (@make 7
                                                                                                     '()
                                                                                                     (list (@make 308
                                                                                                                  '()
                                                                                                                  '())
                                                                                                           (@make 17
                                                                                                                  '()
                                                                                                                  (list (@make 145
                                                                                                                               '()
                                                                                                                               '())))))))))))))))))
                               (let while-loop ()
                                 (cond ((not (= (@st (@i)) //t_/floop))
                                        (begin
                                          (set! //l (@cp_statement //l))
                                          (@right))
                                        (while-loop))
                                       (#t #t)))))))
                 (set! //s4 /__/s4_save)
                 (set! /n2 /__n2_save)
                 (set! //s3 /__/s3_save)
                 (set! //s2 /__/s2_save)
                 (set! /n1 /__n1_save)
                 (set! /v /__v_save)
                 (set! //s1 /__/s1_save))))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_trim_exit_code //l-par)
  (let ((//l-save //l)
        (//r-save //r)
        (funct-result '()))
    (set! //l //l-par)
    (set! //r '())
    (cond ((not (null? //l))
           (@edit)
           (@new_program (@make //t_/statements '() //l))
           (@foreach_stats
             /foreach-constant_propagation-23
             0
             (@as_type)
             0)
           (cond ((null? (@program)) (@new_program (@skips))))
           (set! //r (@cs (@program)))
           (@undo_edit)))
    (set! funct-result //r)
    (set! //l //l-save)
    (set! //r //r-save)
    funct-result))

(define (@cp_gen_loop /min //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/runs 0)
          (/entry/l '())
          (/end/l '())
          (/init/l '())
          (/orig '())
          (/saved/l2 '())
          (/posn (@posn)))
      (cond ((not (null? //l))
             (@edit)
             (set! /entry/l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! /saved/l2 (@final_seg //l 2))
             (set! /init/l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! /orig (@i))
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (begin
                        (@cp_save_state)
                        (set! //l (@cp_statements //l))
                        (@cp_restore_state)
                        (cond ((or (null? //l)
                                   (> (let ((name (let ((name //l))
                                                    (if (vector? name)
                                                      (vector-ref name (- 1 1))
                                                      (list-ref
                                                        name
                                                        (- 1 1))))))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))
                                      0))
                               (set! /fl_flag1 1))
                              (#t
                               (set! /end/l
                                 (@cp_merge
                                   /entry/l
                                   (let ((name (let ((name //l))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1))))))
                               (cond ((equal? /end/l /entry/l)
                                      (set! /fl_flag1 1))
                                     (#t
                                      (set! /runs (+ /runs 1))
                                      (cond ((> /runs 20)
                                             (begin
                                               (display
                                                 "Too many loop scans demanded!!!")
                                               (newline)
                                               (force-output))
                                             (@paste_over /orig)
                                             (set! //l (@cp_clobber_broke //l))
                                             (@foreach_statement
                                               /foreach-constant_propagation-24
                                               0
                                               (@as_type)
                                               0)
                                             (cond ((null? (@program))
                                                    (@new_program (@skips))))
                                             (set! /fl_flag1 1))
                                            ((and (> //state_/saves
                                                     (quotient
                                                       /initial_call_budget
                                                       10))
                                                  (> /initial_call_budget 200))
                                             (begin
                                               (display "#")
                                               (force-output))
                                             (@paste_over /orig)
                                             (set! //l (@cp_clobber_broke //l))
                                             (@foreach_statement
                                               /foreach-constant_propagation-25
                                               0
                                               (@as_type)
                                               0)
                                             (cond ((null? (@program))
                                                    (@new_program (@skips))))
                                             (set! /fl_flag1 1))
                                            (#t
                                             (set! //l
                                               (cons (list 0 /end/l) /saved/l2))
                                             (set! /entry/l /end/l)
                                             (@paste_over /orig)
                                             (set! /fl_flag1 0))))))))
                      (while-loop))
                     (#t #t)))
             (cond ((= /min 0)
                    (if (vector? //l)
                      (let ((sub (vector-ref //l (- 1 1))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_merge
                              /init/l
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_merge
                                /init/l
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))))))
                        (vector-set! //l (- 1 1) sub))
                      (let ((sub (car (nthcdr (- 1 1) //l))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_merge
                              /init/l
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_merge
                                /init/l
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))))))
                        (set! //l (replace-nth //l 1 sub))))))
             (@end_edit))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_decrement_l //l)
  (if (null? //l)
    '()
    (if (= (let ((name (let ((name //l))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))))
             (if (vector? name)
               (vector-ref name (- 1 1))
               (list-ref name (- 1 1))))
           0)
      (@cp_decrement_l (cdr //l))
      (cons (list (- (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     1)
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1)))))
            (@cp_decrement_l (cdr //l))))))

(define (@cp_increment_l //l)
  (if (null? //l)
    '()
    (if (= (let ((name (let ((name //l))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))))
             (if (vector? name)
               (vector-ref name (- 1 1))
               (list-ref name (- 1 1))))
           0)
      (cons (let ((name //l))
              (if (vector? name)
                (vector-ref name (- 1 1))
                (list-ref name (- 1 1))))
            (@cp_increment_l (cdr //l)))
      (cons (list (+ (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     1)
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1)))))
            (@cp_increment_l (cdr //l))))))

(define (@cp_for //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/i-save /i))
      (set! /i (@v (list-ref (@i) (+ 1 1))))
      (let ((//constants-save //constants))
        (set! //constants
          (@set_difference //constants (list (list /i))))
        (cond ((not (member /i (@assigned (list-ref (@i) (+ 1 5)))))
               (set! //constants
                 (@set_union //constants (list (list /i))))))
        (@down_to 2)
        (set! //l (@cp_update //l))
        (@right)
        (set! //l (@cp_update //l))
        (@right)
        (set! //l (@cp_update //l))
        (@right)
        (if (vector? //l)
          (let ((sub (vector-ref //l (- 1 1))))
            (if (vector? sub)
              (vector-set!
                sub
                (- 2 1)
                (@cp_remove
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /i)))
              (set! sub
                (replace-nth
                  sub
                  2
                  (@cp_remove
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    (list /i)))))
            (vector-set! //l (- 1 1) sub))
          (let ((sub (car (nthcdr (- 1 1) //l))))
            (if (vector? sub)
              (vector-set!
                sub
                (- 2 1)
                (@cp_remove
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /i)))
              (set! sub
                (replace-nth
                  sub
                  2
                  (@cp_remove
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    (list /i)))))
            (set! //l (replace-nth //l 1 sub))))
        (set! //l (@cp_gen_loop 0 //l))
        (@up)
        (set! //constants //constants-save))
      (set! /i /i-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_for_in //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/i-save /i))
      (set! /i (@v (list-ref (@i) (+ 1 1))))
      (let ((//constants-save //constants))
        (set! //constants
          (@set_difference //constants (list (list /i))))
        (cond ((not (member /i (@assigned (list-ref (@i) (+ 1 3)))))
               (set! //constants
                 (@set_union //constants (list (list /i))))))
        (@down_to 2)
        (set! //l (@cp_update //l))
        (@right)
        (if (vector? //l)
          (let ((sub (vector-ref //l (- 1 1))))
            (if (vector? sub)
              (vector-set!
                sub
                (- 2 1)
                (@cp_remove
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /i)))
              (set! sub
                (replace-nth
                  sub
                  2
                  (@cp_remove
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    (list /i)))))
            (vector-set! //l (- 1 1) sub))
          (let ((sub (car (nthcdr (- 1 1) //l))))
            (if (vector? sub)
              (vector-set!
                sub
                (- 2 1)
                (@cp_remove
                  (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  (list /i)))
              (set! sub
                (replace-nth
                  sub
                  2
                  (@cp_remove
                    (let ((name (let ((name //l))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    (list /i)))))
            (set! //l (replace-nth //l 1 sub))))
        (set! //l (@cp_gen_loop 0 //l))
        (@up)
        (set! //constants //constants-save))
      (set! /i /i-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_abort //l)
  (cond ((and (not (null? //l))
              (= (let ((name (let ((name //l))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))))
                   (if (vector? name)
                     (vector-ref name (- 1 1))
                     (list-ref name (- 1 1))))
                 0))
         (set! //l (cdr //l))))
  //l)

(define (@cp_proc_call //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (cond ((or (null? //l)
               (not (= (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))
                       0)))
           #t)
          ((member
             (@v (list-ref (@i) (+ 1 1)))
             //call_/path)
           (begin
             (display "RECURSIVE CALL!")
             (newline)
             (force-output)))
          (#t
           (cond ((= (if (vector? //call_/path)
                       (vector-length //call_/path)
                       (length //call_/path))
                     0)
                  (set! //state_/saves 0)
                  (set! /call_budget
                    (quotient /initial_call_budget 2))))
           (set! //call_/path
             (cons (@v (list-ref (@i) (+ 1 1))) //call_/path))
           (let ((/summ (@s_get_proc_summary
                          (@v (list-ref (@i) (+ 1 1)))
                          //proc_/summaries))
                 (/old/l-save /old/l)
                 (/rest (cdr //l)))
             (set! /old/l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! //l (list (car //l)))
             (cond ((null? /summ)
                    (begin
                      (display "BODY NOT FOUND for proc: ")
                      (begin
                        (display
                          (@n_string (@v (list-ref (@i) (+ 1 1)))))
                        (newline)
                        (force-output)))
                    (set! //l (@cp_clobber //l)))
                   ((and (not (@cs? (list-ref (@i) (+ 1 2))))
                         (not (@cs? (list-ref (@i) (+ 1 3))))
                         (or (member
                               (list /reg_stack)
                               (let ((name /summ))
                                 (if (vector? name)
                                   (vector-ref name (- 5 1))
                                   (list-ref name (- 5 1)))))
                             (member
                               (list /call_stack)
                               (let ((name /summ))
                                 (if (vector? name)
                                   (vector-ref name (- 5 1))
                                   (list-ref name (- 5 1))))))
                         (< //state_/saves
                            (quotient /initial_call_budget 2))
                         (> /call_budget
                            (quotient /initial_call_budget 5)))
                    (set! //l
                      (@cp_parameterless_proc_body
                        (let ((name /summ))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))
                        //l)))
                   ((member
                      /os_name
                      (@assigned (list-ref (@i) (+ 1 3))))
                    (set! //l
                      (@cp_parameterless_proc_body
                        (let ((name /summ))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))
                        //l)))
                   (#t
                    (set! //l (@cp_summary (@summarise (@i)) //l))
                    (cond ((member
                             //t_/a_/proc_/call
                             (@stat_types
                               (let ((name /summ))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                           (cond ((and (not (null? //a_/proc_/call_/filter))
                                       (member
                                         /os_name
                                         (@variables
                                           (let ((name /summ))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1)))))))
                                  (if (vector? //l)
                                    (let ((sub (vector-ref //l (- 1 1))))
                                      (if (vector? sub)
                                        (vector-set!
                                          sub
                                          (- 2 1)
                                          (@cp_all_but
                                            (let ((name (let ((name //l))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- 1 1))
                                                            (list-ref
                                                              name
                                                              (- 1 1))))))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))
                                            //a_/proc_/call_/filter))
                                        (set! sub
                                          (replace-nth
                                            sub
                                            2
                                            (@cp_all_but
                                              (let ((name (let ((name //l))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- 1 1))
                                                              (list-ref
                                                                name
                                                                (- 1 1))))))
                                                (if (vector? name)
                                                  (vector-ref name (- 2 1))
                                                  (list-ref name (- 2 1))))
                                              //a_/proc_/call_/filter))))
                                      (vector-set! //l (- 1 1) sub))
                                    (let ((sub (car (nthcdr (- 1 1) //l))))
                                      (if (vector? sub)
                                        (vector-set!
                                          sub
                                          (- 2 1)
                                          (@cp_all_but
                                            (let ((name (let ((name //l))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- 1 1))
                                                            (list-ref
                                                              name
                                                              (- 1 1))))))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))
                                            //a_/proc_/call_/filter))
                                        (set! sub
                                          (replace-nth
                                            sub
                                            2
                                            (@cp_all_but
                                              (let ((name (let ((name //l))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- 1 1))
                                                              (list-ref
                                                                name
                                                                (- 1 1))))))
                                                (if (vector? name)
                                                  (vector-ref name (- 2 1))
                                                  (list-ref name (- 2 1))))
                                              //a_/proc_/call_/filter))))
                                      (set! //l (replace-nth //l 1 sub)))))
                                 (#t
                                  (if (vector? //l)
                                    (let ((sub (vector-ref //l (- 1 1))))
                                      (if (vector? sub)
                                        (vector-set!
                                          sub
                                          (- 2 1)
                                          (@cp_clobber_zeros
                                            (let ((name (let ((name //l))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- 1 1))
                                                            (list-ref
                                                              name
                                                              (- 1 1))))))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))
                                        (set! sub
                                          (replace-nth
                                            sub
                                            2
                                            (@cp_clobber_zeros
                                              (let ((name (let ((name //l))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- 1 1))
                                                              (list-ref
                                                                name
                                                                (- 1 1))))))
                                                (if (vector? name)
                                                  (vector-ref name (- 2 1))
                                                  (list-ref name (- 2 1))))))))
                                      (vector-set! //l (- 1 1) sub))
                                    (let ((sub (car (nthcdr (- 1 1) //l))))
                                      (if (vector? sub)
                                        (vector-set!
                                          sub
                                          (- 2 1)
                                          (@cp_clobber_zeros
                                            (let ((name (let ((name //l))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- 1 1))
                                                            (list-ref
                                                              name
                                                              (- 1 1))))))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))
                                        (set! sub
                                          (replace-nth
                                            sub
                                            2
                                            (@cp_clobber_zeros
                                              (let ((name (let ((name //l))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- 1 1))
                                                              (list-ref
                                                                name
                                                                (- 1 1))))))
                                                (if (vector? name)
                                                  (vector-ref name (- 2 1))
                                                  (list-ref name (- 2 1))))))))
                                      (set! //l (replace-nth //l 1 sub))))))))))
             (cond ((or (null? //l)
                        (> (let ((name (let ((name //l))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))
                           0))
                    (set! //l (list (list 0 /old/l)))))
             (set! //l (cons (car //l) /rest))
             (set! /old/l /old/l-save))
           (set! //call_/path (cdr //call_/path))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_summary /summ //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/clobber '())
          (/pair-save /pair)
          (/old/l-save /old/l)
          (/new/l-save /new/l)
          (/val-save /val)
          (/assigned '()))
      (set! /pair '())
      (set! /old/l '())
      (set! /new/l '())
      (set! /val '())
      (cond ((and (not (null? //l))
                  (= (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     0)
                  (not (null? /summ))
                  (= (let ((name (let ((name /summ))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     0))
             (set! /summ
               (cdr (let ((name /summ))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))))
             (set! /assigned
               (@make_set
                 (let ((l (@final_seg /summ 4)) (map-result '()))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! map-result (cons (car (car l)) map-result))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   (reverse map-result))))
             (set! /clobber
               (@elt_subtract
                 (let ((name /summ))
                   (if (vector? name)
                     (vector-ref name (- 2 1))
                     (list-ref name (- 2 1))))
                 /assigned))
             (if (vector? /summ)
               (vector-set!
                 /summ
                 (- 3 1)
                 (@elt_subtract
                   (let ((name /summ))
                     (if (vector? name)
                       (vector-ref name (- 3 1))
                       (list-ref name (- 3 1))))
                   (list (list (@make_name "r15")))))
               (set! /summ
                 (replace-nth
                   /summ
                   3
                   (@elt_subtract
                     (let ((name /summ))
                       (if (vector? name)
                         (vector-ref name (- 3 1))
                         (list-ref name (- 3 1))))
                     (list (list (@make_name "r15")))))))
             (cond ((not (null? (let ((name /summ))
                                  (if (vector? name)
                                    (vector-ref name (- 3 1))
                                    (list-ref name (- 3 1))))))
                    (begin
                      (display "(some kind of inc)")
                      (newline)
                      (force-output))
                    (set! //c/p_/return_/code_/inc
                      (@set_union //c/p_/return_/code_/inc (list 1)))))
             (set! /old/l
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1)))))
             (set! /new/l
               (@cp_clobber_list
                 (let ((name (let ((name //l))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))))
                   (if (vector? name)
                     (vector-ref name (- 2 1))
                     (list-ref name (- 2 1))))
                 /clobber))
             (cond ((and (= //c/p_/in_/preserves_/dest 0)
                         (member
                           (list //s_/tail_/recursive_/call)
                           (let ((name /summ))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))))
                    (let ((var-save /pair)
                          (seq-save (@final_seg /summ 4)))
                      (if (vector? seq-save)
                        (set! seq-save (vector-elts seq-save)))
                      (let for-in-loop ((for-tmp seq-save))
                        (cond ((not (null? for-tmp))
                               (set! /pair (car for-tmp))
                               (begin
                                 (cond ((sequence?
                                          (let ((name /pair))
                                            (if (vector? name)
                                              (vector-ref name (- 2 1))
                                              (list-ref name (- 2 1)))))
                                        (set! /val
                                          (@cp_get
                                            /old/l
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))
                                        (cond ((null? /val)
                                               (set! /val
                                                 (@name_to_wsl
                                                   (let ((name /pair))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref
                                                         name
                                                         (- 2 1)))))))))
                                       (#t
                                        (set! /val
                                          (@name_to_wsl
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))))
                                 (cond ((and (= (@st /val) //t_/number)
                                             (> (@v /val) 0)
                                             (member (@v /val) /dispatch_codes))
                                        (set! /new/l
                                          (@cp_put
                                            /new/l
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))
                                            /val)))
                                       ((and (= (@st /val) //t_/variable)
                                             (member (@v /val) /reg_inits))
                                        (set! /new/l
                                          (@cp_put
                                            /new/l
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))
                                            /val)))
                                       (#t
                                        (set! /new/l
                                          (@cp_remove
                                            /new/l
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1)))))))))
                               (for-in-loop (cdr for-tmp)))
                              (#t #t)))
                      (set! /pair var-save))
                    (cond (#f
                           (set! /new/l
                             (@cp_clobber_list
                               /new/l
                               (let ((l (@final_seg /summ 4)) (map-result '()))
                                 (let while-loop ()
                                   (cond ((not (null? l))
                                          (set! map-result
                                            (cons (car (car l)) map-result))
                                          (set! l (cdr l))
                                          (while-loop))
                                         (#t #t)))
                                 (reverse map-result)))))))
                   (#t
                    (let ((var-save /pair)
                          (seq-save (@final_seg /summ 4)))
                      (if (vector? seq-save)
                        (set! seq-save (vector-elts seq-save)))
                      (let for-in-loop ((for-tmp seq-save))
                        (cond ((not (null? for-tmp))
                               (set! /pair (car for-tmp))
                               (begin
                                 (cond ((and (sequence?
                                               (let ((name /pair))
                                                 (if (vector? name)
                                                   (vector-ref name (- 2 1))
                                                   (list-ref name (- 2 1)))))
                                             (not (member
                                                    (let ((name /pair))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- 2 1))
                                                        (list-ref
                                                          name
                                                          (- 2 1))))
                                                    /assigned)))
                                        (set! /val
                                          (@cp_get
                                            /old/l
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))
                                        (cond ((null? /val)
                                               (set! /val
                                                 (@name_to_wsl
                                                   (let ((name /pair))
                                                     (if (vector? name)
                                                       (vector-ref name (- 2 1))
                                                       (list-ref
                                                         name
                                                         (- 2 1)))))))))
                                       (#t
                                        (set! /val
                                          (@name_to_wsl
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1))))))))
                                 (let ((/keep-save /keep))
                                   (set! /keep 1)
                                   (cond ((sequence?
                                            (let ((name /pair))
                                              (if (vector? name)
                                                (vector-ref name (- 2 1))
                                                (list-ref name (- 2 1)))))
                                          (let ((var-save /elt)
                                                (seq-save
                                                  (concat
                                                    /clobber
                                                    (let ((name /summ))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- 3 1))
                                                        (list-ref
                                                          name
                                                          (- 3 1)))))))
                                            (if (vector? seq-save)
                                              (set! seq-save
                                                (vector-elts seq-save)))
                                            (let for-in-loop ((for-tmp
                                                                seq-save))
                                              (cond ((not (null? for-tmp))
                                                     (set! /elt (car for-tmp))
                                                     (cond ((equal?
                                                              /elt
                                                              (list /a_name))
                                                            #t)
                                                           ((@either_prefix?
                                                              (let ((name /pair))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 2 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 2 1))))
                                                              /elt)
                                                            (set! /keep 0)))
                                                     (for-in-loop
                                                       (cdr for-tmp)))
                                                    (#t #t)))
                                            (set! /elt var-save))))
                                   (cond ((and (= (@st /val) //t_/variable)
                                               (member
                                                 (list (@v /val))
                                                 /assigned))
                                          (set! /keep 0)))
                                   (cond ((= /keep 0)
                                          (set! /new/l
                                            (@cp_remove
                                              /new/l
                                              (let ((name /pair))
                                                (if (vector? name)
                                                  (vector-ref name (- 1 1))
                                                  (list-ref name (- 1 1)))))))
                                         (#t
                                          (set! /new/l
                                            (@cp_put
                                              /new/l
                                              (let ((name /pair))
                                                (if (vector? name)
                                                  (vector-ref name (- 1 1))
                                                  (list-ref name (- 1 1))))
                                              /val))))
                                   (set! /keep /keep-save)))
                               (for-in-loop (cdr for-tmp)))
                              (#t #t)))
                      (set! /pair var-save))))
             (cond ((member
                      (list /os_name)
                      (let ((name /summ))
                        (if (vector? name)
                          (vector-ref name (- 2 1))
                          (list-ref name (- 2 1)))))
                    (set! /new/l (@cp_clobber_zeros /new/l))))
             (if (vector? //l)
               (let ((sub (vector-ref //l (- 1 1))))
                 (if (vector? sub)
                   (vector-set! sub (- 2 1) /new/l)
                   (set! sub (replace-nth sub 2 /new/l)))
                 (vector-set! //l (- 1 1) sub))
               (let ((sub (car (nthcdr (- 1 1) //l))))
                 (if (vector? sub)
                   (vector-set! sub (- 2 1) /new/l)
                   (set! sub (replace-nth sub 2 /new/l)))
                 (set! //l (replace-nth //l 1 sub))))))
      (set! /pair /pair-save)
      (set! /old/l /old/l-save)
      (set! /new/l /new/l-save)
      (set! /val /val-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_parameterless_proc_body /body //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (set! /calls_processed (+ /calls_processed 1))
    (cond ((< /calls_processed /call_budget)
           (let ((/cb_save /call_budget))
             (set! /call_depth (+ /call_depth 1))
             (cond ((and (> /call_depth 2) (even? /call_depth))
                    (set! /call_budget (quotient /call_budget 2))))
             (@edit)
             (@new_program (list-ref /body (+ 1 4)))
             (let ((//o/k-save //o/k)
                   (/calls-save /calls)
                   (/move-save /move))
               (set! //o/k 1)
               (set! /calls '())
               (set! /move 0)
               (@ateach_terminal
                 /foreach-constant_propagation-26
                 0
                 (@as_type)
                 1)
               (cond ((null? (@program)) (@new_program (@skips))))
               (cond ((and #f (= //o/k 1))
                      (set! //l (@cp_statements //l))
                      (begin
                        (display
                          (if (vector? /calls)
                            (vector-length /calls)
                            (length /calls)))
                        (force-output))
                      (cond ((null? /calls) #t)
                            ((not (null? (@set_intersect
                                           /calls
                                           (@make_set //call_/path))))
                             (set! //l (@cp_clobber_broke //l)))
                            (#t
                             (let ((//r-save //r)
                                   (/orig/l //l)
                                   (/name-save /name)
                                   (/body '())
                                   (/comps
                                     (list (@make //t_/expressions '() '())
                                           (@make //t_/lvalues '() '()))))
                               (set! //r '())
                               (set! /name '())
                               (let ((var-save /name) (seq-save /calls))
                                 (if (vector? seq-save)
                                   (set! seq-save (vector-elts seq-save)))
                                 (let for-in-loop ((for-tmp seq-save))
                                   (cond ((not (null? for-tmp))
                                          (set! /name (car for-tmp))
                                          (begin
                                            (@new_program
                                              (@make //t_/proc_/call
                                                     '()
                                                     (cons (@name /name)
                                                           /comps)))
                                            (set! //l (@cp_proc_call //l))
                                            (set! //r (@cp_mergel //r //l))
                                            (set! //l /orig/l))
                                          (for-in-loop (cdr for-tmp)))
                                         (#t #t)))
                                 (set! /name var-save))
                               (set! //l //r)
                               (set! //r //r-save)
                               (set! /name /name-save)))))
                     (#t
                      (begin (display "N") (force-output))
                      (@new_program (list-ref /body (+ 1 4)))
                      (set! //l (@cp_statements //l))))
               (set! //o/k //o/k-save)
               (set! /calls /calls-save)
               (set! /move /move-save))
             (@undo_edit)
             (set! /call_budget /cb_save)
             (set! /call_depth (- /call_depth 1))))
          (#t
           (begin (display "-") (force-output))
           (set! //l (@cp_clobber_broke //l))))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_proc_body /body //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/v-save /v)
          (/c '())
          (/l-save /l)
          (/save '())
          (/vars-save /vars)
          (//a_vals (@cs (list-ref (@i) (+ 1 1))))
          (//a_vars (@cs (list-ref (@i) (+ 1 2))))
          (//f_vals (@cs (list-ref /body (+ 1 1))))
          (//f_vars (@cs (list-ref /body (+ 1 2)))))
      (set! /v '())
      (set! /l
        (let ((name (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))))
          (if (vector? name)
            (vector-ref name (- 2 1))
            (list-ref name (- 2 1)))))
      (set! /vars '())
      (let ((//constants-save //constants))
        (set! //constants
          (@set_difference
            //constants
            (@make_set
              (let ((l (concat //f_vals //f_vars)) (map-result '()))
                (let while-loop ()
                  (cond ((not (null? l))
                         (set! map-result
                           (cons (@struct_elts (car l)) map-result))
                         (set! l (cdr l))
                         (while-loop))
                        (#t #t)))
                (reverse map-result)))))
        (set! /vars
          (let ((l //f_vals) (map-result '()))
            (let while-loop ()
              (cond ((not (null? l))
                     (set! map-result (cons (@v (car l)) map-result))
                     (set! l (cdr l))
                     (while-loop))
                    (#t #t)))
            (reverse map-result)))
        (let while-loop ()
          (cond ((not (null? /vars))
                 (begin
                   (set! /v (car /vars))
                   (set! /save
                     (cons (list /v (@cp_get /l /v)) /save))
                   (set! /vars (cdr /vars)))
                 (while-loop))
                (#t #t)))
        (set! //l
          (@cp_do_assigns
            (concat //f_vals //f_vars)
            (concat //a_vals //a_vars)
            //l))
        (@edit)
        (@new_program (list-ref /body (+ 1 3)))
        (set! //l (@cp_statements //l))
        (@undo_edit)
        (cond ((and (not (null? //l))
                    (= (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))
                       0))
               (set! /l
                 (let ((name (let ((name //l))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))))
                   (if (vector? name)
                     (vector-ref name (- 2 1))
                     (list-ref name (- 2 1)))))
               (let while-loop ()
                 (cond ((not (null? /save))
                        (begin
                          (set! /v
                            (let ((name (let ((name /save))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1)))))
                          (set! /c
                            (let ((name (let ((name /save))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1)))))
                          (cond ((null? /c) (set! /l (@cp_remove /l /v)))
                                (#t (set! /l (@cp_put /l /v /c))))
                          (set! /save (cdr /save)))
                        (while-loop))
                       (#t #t)))
               (if (vector? //l)
                 (let ((sub (vector-ref //l (- 1 1))))
                   (if (vector? sub)
                     (vector-set! sub (- 2 1) /l)
                     (set! sub (replace-nth sub 2 /l)))
                   (vector-set! //l (- 1 1) sub))
                 (let ((sub (car (nthcdr (- 1 1) //l))))
                   (if (vector? sub)
                     (vector-set! sub (- 2 1) /l)
                     (set! sub (replace-nth sub 2 /l)))
                   (set! //l (replace-nth //l 1 sub))))
               (set! //l (@cp_do_assigns //f_vars //a_vars //l))))
        (set! //constants //constants-save))
      (set! /v /v-save)
      (set! /l /l-save)
      (set! /vars /vars-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_do_assigns /vars-par /vals //l-par)
  (let ((//l-save //l)
        (/vars-save /vars)
        (funct-result '()))
    (set! //l //l-par)
    (set! /vars /vars-par)
    (cond ((not (null? /vars))
           (let ((//a '()))
             (let while-loop ()
               (cond ((not (null? /vars))
                      (begin
                        (set! //a
                          (cons (@make //t_/assign
                                       '()
                                       (list (car /vars) (car /vals)))
                                //a))
                        (set! /vars (cdr /vars))
                        (set! /vals (cdr /vals)))
                      (while-loop))
                     (#t #t)))
             (@edit)
             (@new_program (@make //t_/assigns '() //a))
             (set! //l (@cp_assigns //l))
             (@undo_edit))))
    (set! funct-result //l)
    (set! //l //l-save)
    (set! /vars /vars-save)
    funct-result))

(define (@cp_var //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/v-save /v)
          (/c '())
          (/l-save /l)
          (//l0 //l)
          (/save '())
          (/vars-save /vars))
      (set! /v '())
      (set! /l
        (let ((name (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))))
          (if (vector? name)
            (vector-ref name (- 2 1))
            (list-ref name (- 2 1)))))
      (set! /vars
        (@make_set
          (let ((l (@cs (list-ref (@i) (+ 1 1))))
                (map-result '()))
            (let while-loop ()
              (cond ((not (null? l))
                     (set! map-result
                       (cons (@struct_elts (car l)) map-result))
                     (set! l (cdr l))
                     (while-loop))
                    (#t #t)))
            (reverse map-result))))
      (let ((//constants-save //constants))
        (set! //constants
          (@set_union
            (@set_difference //constants /vars)
            (@set_difference
              /vars
              (@elts_assigned (list-ref (@i) (+ 1 2))))))
        (let while-loop ()
          (cond ((not (null? /vars))
                 (begin
                   (set! /v (car /vars))
                   (set! /save
                     (cons (list /v (@cp_get /l /v)) /save))
                   (set! /vars (cdr /vars)))
                 (while-loop))
                (#t #t)))
        (@down)
        (@edit)
        (set! //l (@cp_assigns //l))
        (@undo_edit)
        (@right)
        (set! //l (@cp_statements //l))
        (@up)
        (@down)
        (@down)
        (@down_to 2)
        (set! //l0 (@cp_update //l0))
        (@up)
        (let while-loop ()
          (cond ((@right?)
                 (begin
                   (@right)
                   (@down_to 2)
                   (set! //l0 (@cp_update //l0))
                   (@up))
                 (while-loop))
                (#t #t)))
        (@up)
        (@up)
        (cond ((and (not (null? //l))
                    (= (let ((name (let ((name //l))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))
                       0))
               (set! /l
                 (let ((name (let ((name //l))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))))
                   (if (vector? name)
                     (vector-ref name (- 2 1))
                     (list-ref name (- 2 1)))))
               (let while-loop ()
                 (cond ((not (null? /save))
                        (begin
                          (set! /v
                            (let ((name (let ((name /save))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1)))))
                          (set! /c
                            (let ((name (let ((name /save))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1)))))
                          (cond ((null? /c) (set! /l (@cp_remove /l /v)))
                                (#t (set! /l (@cp_put /l /v /c))))
                          (set! /save (cdr /save)))
                        (while-loop))
                       (#t #t)))
               (set! /vars
                 (@make_set
                   (let ((l (@cs (list-ref (@i) (+ 1 1))))
                         (map-result '()))
                     (let while-loop ()
                       (cond ((not (null? l))
                              (set! map-result
                                (cons (@struct_elts (car l)) map-result))
                              (set! l (cdr l))
                              (while-loop))
                             (#t #t)))
                     (reverse map-result))))
               (let ((var-save /pair) (seq-save /l))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /pair (car for-tmp))
                          (cond ((not (@elt_clash_list?
                                        (@elements
                                          (let ((name /pair))
                                            (if (vector? name)
                                              (vector-ref name (- 2 1))
                                              (list-ref name (- 2 1)))))
                                        /vars))
                                 (set! /save (cons /pair /save))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /pair var-save))
               (if (vector? //l)
                 (let ((sub (vector-ref //l (- 1 1))))
                   (if (vector? sub)
                     (vector-set! sub (- 2 1) (reverse /save))
                     (set! sub (replace-nth sub 2 (reverse /save))))
                   (vector-set! //l (- 1 1) sub))
                 (let ((sub (car (nthcdr (- 1 1) //l))))
                   (if (vector? sub)
                     (vector-set! sub (- 2 1) (reverse /save))
                     (set! sub (replace-nth sub 2 (reverse /save))))
                   (set! //l (replace-nth //l 1 sub))))))
        (set! //constants //constants-save))
      (set! /v /v-save)
      (set! /l /l-save)
      (set! /vars /vars-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@get_lvar_name //i)
  (@cp_var_name (list-ref //i (+ 1 1))))

(define (@cp_where //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (set! //proc_/summaries
      (cons (my-make-hash-table 16) //proc_/summaries))
    (begin
      (display "Summarising proc definitions... ")
      (force-output))
    (@summarise_where_defns
      (@cs (list-ref (@i) (+ 1 2))))
    (begin
      (display "Done.")
      (newline)
      (force-output))
    (@down_to 2)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (cond ((= (@st (@i)) //t_/proc)
                      (@down_to 4)
                      (let ((//l-save //l)
                            (/call_budget-save /call_budget)
                            (/initial_call_budget-save /initial_call_budget))
                        (set! //l (list (list 0 '())))
                        (set! /call_budget 800)
                        (set! /initial_call_budget 800)
                        (begin (display "p") (force-output))
                        (set! //l (@cp_statements //l))
                        (set! //l //l-save)
                        (set! /call_budget /call_budget-save)
                        (set! /initial_call_budget
                          /initial_call_budget-save))
                      (@up)))
               (cond ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0))))
             (while-loop))
            (#t #t)))
    (@up)
    (@up)
    (begin (display "") (newline) (force-output))
    (set! //state_/saves 0)
    (@down)
    (set! //l (@cp_statements //l))
    (@up)
    (begin (display "") (newline) (force-output))
    (set! //proc_/summaries (cdr //proc_/summaries))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@cp_while //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/min 0))
      (@down)
      (@edit)
      (set! //l (@cp_update //l))
      (@trans //t/r_/simplify "")
      (cond ((= (@st (@i)) //t_/false) (@end_edit))
            (#t
             (cond ((= (@st (@i)) //t_/true) (set! /min 1)))
             (@undo_edit)
             (cond ((= (@st (@i)) //t_/true)
                    (set! //l (@cp_abort //l)))
                   (#t
                    (set! //l (@cp_assert_condition //l))
                    (@right)
                    (set! //l (@cp_gen_loop /min //l))))))
      (@up)
      (@down)
      (set! //l (@cp_update //l))
      (set! //l (@cp_deny_condition //l))
      (@up))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(set! //c/p_/special_/value 426294)

(set! //c/p_/return_/code_/inc '())

(set! //c/p_/return_/code_/normal 0)

(set! //c/p_/in_/preserves_/dest 0)

(set! //c/p_/reg_/to_/num
  (my-make-hash-table 16))

(let ((/n-save /n))
  (set! /n 0)
  (let ((var-save /reg)
        (seq-save
          (let ((l (list "r0"
                         "r1"
                         "r2"
                         "r3"
                         "r4"
                         "r5"
                         "r6"
                         "r7"
                         "r8"
                         "r9"
                         "r10"
                         "r11"
                         "r12"
                         "r13"
                         "r14"
                         "r15"))
                (map-result '()))
            (let while-loop ()
              (cond ((not (null? l))
                     (set! map-result
                       (cons (@make_name (car l)) map-result))
                     (set! l (cdr l))
                     (while-loop))
                    (#t #t)))
            (reverse map-result))))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /reg (car for-tmp))
             (begin
               (puthash //c/p_/reg_/to_/num /reg /n)
               (set! /n (+ /n 1)))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /reg var-save))
  (set! /n /n-save))

(define (@preserves_destination
         /name-par
         //i
         /reg-par
         /effort-par
         /call_budget-par
         /flag_n)
  (let ((/call_budget-save /call_budget)
        (/effort-save /effort)
        (/reg-save /reg)
        (/name-save /name)
        (//l-save //l)
        (//entries-save //entries)
        (//call_/path-save //call_/path)
        (//unfold_/dispatch-save //unfold_/dispatch)
        (/calls_processed-save /calls_processed)
        (/call_depth-save /call_depth)
        (//constants-save //constants)
        (//d/s/e/c/ts-save //d/s/e/c/ts)
        (//c/p_/state-save //c/p_/state)
        (/destination-save /destination)
        (/val-save /val)
        (/body '())
        (//r-save //r)
        (/initial_call_budget-save /initial_call_budget)
        (//state_/saves-save //state_/saves)
        (/registers-save /registers)
        (/x86_regs-save /x86_regs)
        (/cc_name-save /cc_name)
        (/zf_name-save /zf_name)
        (/cf_name-save /cf_name)
        (/r1_name-save /r1_name)
        (/push_regs-save /push_regs)
        (/pop_regs-save /pop_regs)
        (/chain_reg-save /chain_reg)
        (/reg_stack-save /reg_stack)
        (/call_stack-save /call_stack)
        (/call_via_ptr-save /call_via_ptr)
        (/call_via_ptr_pars-save /call_via_ptr_pars)
        (/pack-save /pack)
        (//e/x/e/c_/c/i/c/s-save //e/x/e/c_/c/i/c/s)
        (/result_code-save /result_code)
        (/true-save /true)
        (/false-save /false)
        (/dispatch-save /dispatch)
        (//a/s_/type (@as_type))
        (/exit_flag-save /exit_flag)
        (//notused_/value-save //notused_/value)
        (/rename-save /rename)
        (//migration-save //migration)
        (funct-result '()))
    (set! /call_budget /call_budget-par)
    (set! /effort /effort-par)
    (set! /reg /reg-par)
    (set! /name /name-par)
    (set! //l (list (list 0 '())))
    (set! //entries '())
    (set! //call_/path '())
    (set! //unfold_/dispatch 0)
    (set! /calls_processed 0)
    (set! /call_depth 0)
    (set! //constants '())
    (set! //d/s/e/c/ts (my-make-hash-table 16))
    (set! //c/p_/state '())
    (set! /destination (@make_name "destination"))
    (set! /val '())
    (set! //r 0)
    (set! /initial_call_budget /call_budget-par)
    (set! //state_/saves 0)
    (set! /registers
      (@make_set
        (let ((l (list "r0"
                       "r1"
                       "r2"
                       "r3"
                       "r4"
                       "r5"
                       "r6"
                       "r7"
                       "r8"
                       "r9"
                       "r10"
                       "r11"
                       "r12"
                       "r13"
                       "r14"
                       "r15"))
              (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result
                     (cons (@make_name (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (set! /x86_regs
      (let ((l (list "ax" "bx" "cx" "dx")) (map-result '()))
        (let while-loop ()
          (cond ((not (null? l))
                 (set! map-result
                   (cons (@make_name (car l)) map-result))
                 (set! l (cdr l))
                 (while-loop))
                (#t #t)))
        (reverse map-result)))
    (set! /cc_name (@make_name "cc"))
    (set! /zf_name (@make_name "zf"))
    (set! /cf_name (@make_name "cf"))
    (set! /r1_name (@make_name "r1"))
    (set! /push_regs (@make_name "push_regs"))
    (set! /pop_regs (@make_name "pop_regs"))
    (set! /chain_reg (@make_name "chain_reg"))
    (set! /reg_stack (@make_name "reg_stack"))
    (set! /call_stack (@make_name "call_stack"))
    (set! /call_via_ptr (@make_name "call_via_ptr"))
    (set! /call_via_ptr_pars
      (@make_name "call_via_ptr_pars"))
    (set! /pack (@make_name "pack"))
    (set! //e/x/e/c_/c/i/c/s
      (@make_name "EXEC_CICS"))
    (set! /result_code (@make_name "result_code"))
    (set! /true (@make //t_/true '() '()))
    (set! /false (@make //t_/false '() '()))
    (set! /dispatch 0)
    (set! /exit_flag (@make_name "exit_flag"))
    (set! //notused_/value (my-make-hash-table 16))
    (set! /rename (my-make-hash-table 16))
    (set! //migration 1)
    (begin
      (display "--> Checking if action ")
      (begin
        (display (@n_string /name))
        (begin
          (display " sends ")
          (begin
            (display (@n_string /reg))
            (begin
              (display " to destination...")
              (newline)
              (force-output))))))
    (set! //l
      (list (list 0
                  (@cp_put
                    '()
                    (list /reg)
                    (@make //t_/number //c/p_/special_/value '())))))
    (@edit)
    (@new_program //i)
    (set! //d/s/e/c/ts
      (@cp_find_dsects //d/s/e/c/ts))
    (set! //l
      (@cp_init_dsect_pointers //d/s/e/c/ts //l))
    (@cp_memory_address_fix)
    (set! //c/p_/return_/code_/inc '())
    (set! //c/p_/return_/code_/normal 0)
    (set! //c/p_/in_/preserves_/dest /flag_n)
    (let ((//code_/hash-save //code_/hash)
          (/rename-save /rename))
      (set! //code_/hash (my-make-hash-table 16))
      (set! /rename (my-make-hash-table 16))
      (set! /rename
        (@fd_rename_dsect_code_stores
          //code_/hash
          /rename))
      (set! //l (@cp_generic //l))
      (@fd_restore_dsect_code_stores /rename)
      (set! //code_/hash //code_/hash-save)
      (set! /rename /rename-save))
    (set! //c/p_/in_/preserves_/dest 0)
    (@undo_edit)
    (begin (display "") (newline) (force-output))
    (cond ((or (null? //l)
               (> (let ((name (let ((name //l))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1))))))
                    (if (vector? name)
                      (vector-ref name (- 1 1))
                      (list-ref name (- 1 1))))
                  0))
           (set! /val '()))
          (#t
           (set! /val
             (@cp_get
               (let ((name (let ((name //l))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1))))))
                 (if (vector? name)
                   (vector-ref name (- 2 1))
                   (list-ref name (- 2 1))))
               (list /destination)))))
    (cond ((or (null? /val)
               (not (= (@st /val) //t_/number))
               (not (equal? (@v /val) //c/p_/special_/value)))
           (begin
             (display "<-- Failed for action ")
             (begin
               (display (@n_string /name))
               (begin
                 (display " register ")
                 (begin
                   (display (@n_string /reg))
                   (newline)
                   (force-output)))))
           (set! //r 0))
          (#t
           (begin
             (display "<-- Succeeded for action ")
             (begin
               (display (@n_string /name))
               (begin
                 (display " register ")
                 (begin
                   (display (@n_string /reg))
                   (newline)
                   (force-output)))))
           (set! //r 1)
           (cond ((not (null? //c/p_/return_/code_/inc))
                  (set! //r 2)))))
    (set! funct-result //r)
    (set! /call_budget /call_budget-save)
    (set! /effort /effort-save)
    (set! /reg /reg-save)
    (set! /name /name-save)
    (set! //l //l-save)
    (set! //entries //entries-save)
    (set! //call_/path //call_/path-save)
    (set! //unfold_/dispatch //unfold_/dispatch-save)
    (set! /calls_processed /calls_processed-save)
    (set! /call_depth /call_depth-save)
    (set! //constants //constants-save)
    (set! //d/s/e/c/ts //d/s/e/c/ts-save)
    (set! //c/p_/state //c/p_/state-save)
    (set! /destination /destination-save)
    (set! /val /val-save)
    (set! //r //r-save)
    (set! /initial_call_budget
      /initial_call_budget-save)
    (set! //state_/saves //state_/saves-save)
    (set! /registers /registers-save)
    (set! /x86_regs /x86_regs-save)
    (set! /cc_name /cc_name-save)
    (set! /zf_name /zf_name-save)
    (set! /cf_name /cf_name-save)
    (set! /r1_name /r1_name-save)
    (set! /push_regs /push_regs-save)
    (set! /pop_regs /pop_regs-save)
    (set! /chain_reg /chain_reg-save)
    (set! /reg_stack /reg_stack-save)
    (set! /call_stack /call_stack-save)
    (set! /call_via_ptr /call_via_ptr-save)
    (set! /call_via_ptr_pars /call_via_ptr_pars-save)
    (set! /pack /pack-save)
    (set! //e/x/e/c_/c/i/c/s //e/x/e/c_/c/i/c/s-save)
    (set! /result_code /result_code-save)
    (set! /true /true-save)
    (set! /false /false-save)
    (set! /dispatch /dispatch-save)
    (set! /exit_flag /exit_flag-save)
    (set! //notused_/value //notused_/value-save)
    (set! /rename /rename-save)
    (set! //migration //migration-save)
    funct-result))

(define (@cp_init_dsect_pointers
         //d/s/e/c/ts-par
         //l-par)
  (let ((//l-save //l)
        (//d/s/e/c/ts-save //d/s/e/c/ts)
        (funct-result '()))
    (set! //l //l-par)
    (set! //d/s/e/c/ts //d/s/e/c/ts-par)
    (let ((//d/s/e/c/t_reg-save //d/s/e/c/t_reg)
          (//d/s/e/c/t_bad-save //d/s/e/c/t_bad)
          (//d/s/e/c/t_list-save //d/s/e/c/t_list)
          (/name-save /name))
      (set! //d/s/e/c/t_reg (my-make-hash-table 16))
      (set! //d/s/e/c/t_bad (my-make-hash-table 16))
      (set! //d/s/e/c/t_list '())
      (set! /name '())
      (@foreach_statement
        /foreach-constant_propagation-27
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /name) (seq-save //d/s/e/c/t_list))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /name (car for-tmp))
                 (cond ((null? (gethash //d/s/e/c/t_bad /name))
                        (set! //l
                          (@cp_put0
                            //l
                            (list /name)
                            (@make //t_/variable
                                   (gethash //d/s/e/c/t_reg /name)
                                   '())))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /name var-save))
      (set! //d/s/e/c/t_reg //d/s/e/c/t_reg-save)
      (set! //d/s/e/c/t_bad //d/s/e/c/t_bad-save)
      (set! //d/s/e/c/t_list //d/s/e/c/t_list-save)
      (set! /name /name-save))
    (set! funct-result //l)
    (set! //l //l-save)
    (set! //d/s/e/c/ts //d/s/e/c/ts-save)
    funct-result))

(define (@cp_memory_address_fix)
  (let ((/new-save /new))
    (set! /new '())
    (@foreach_expn
      /foreach-constant_propagation-28
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@foreach_lvalue
      /foreach-constant_propagation-29
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    #t
    (set! /new /new-save)))

(define (@cp_constant_dsect_pointers //d/s/e/c/ts-par)
  (let ((//d/s/e/c/ts-save //d/s/e/c/ts))
    (set! //d/s/e/c/ts //d/s/e/c/ts-par)
    (let ((/reg-save /reg)
          (/var-save /var)
          (/reg_init_count-save /reg_init_count)
          (/reg_/d/s/e/c/ts-save /reg_/d/s/e/c/ts)
          (//d/s/e/c/t_init-save //d/s/e/c/t_init)
          (//d/s/e/c/t_init_count-save
            //d/s/e/c/t_init_count)
          (//d/s/e/c/t_reg-save //d/s/e/c/t_reg)
          (//d/s/e/c/t_bad-save //d/s/e/c/t_bad)
          (/done-save /done)
          (//o/k-save //o/k)
          (/name-save /name)
          (/v-save /v)
          (/e-save /e)
          (/pointers-save /pointers)
          (/all_inits-save /all_inits))
      (set! /reg '())
      (set! /var '())
      (set! /reg_init_count (my-make-hash-table 16))
      (set! /reg_/d/s/e/c/ts (my-make-hash-table 16))
      (set! //d/s/e/c/t_init (my-make-hash-table 16))
      (set! //d/s/e/c/t_init_count
        (my-make-hash-table 16))
      (set! //d/s/e/c/t_reg (my-make-hash-table 16))
      (set! //d/s/e/c/t_bad (my-make-hash-table 16))
      (set! /done (my-make-hash-table 16))
      (set! //o/k 0)
      (set! /name '())
      (set! /v '())
      (set! /e '())
      (set! /pointers '())
      (set! /all_inits
        (@set_union
          /reg_inits
          (list (@make_name "___r1_init___"))))
      (let ((var-save /reg)
            (seq-save (concat /registers /reg_inits)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /reg (car for-tmp))
                 (puthash /reg_init_count /reg 0)
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /reg var-save))
      (@foreach_statement
        /foreach-constant_propagation-30
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /name)
            (seq-save (@hash_keys //d/s/e/c/ts)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /name (car for-tmp))
                 (cond ((and (null? (gethash //d/s/e/c/t_bad /name))
                             (not (null? (gethash //d/s/e/c/t_init /name))))
                        (set! /e (gethash //d/s/e/c/t_init /name))
                        (begin
                          (display "DSECT_init(")
                          (begin
                            (display (@n_string /name))
                            (begin (display ") = ") (force-output))))
                        (@pp_item /e 80 "")
                        (cond ((and (= (@st /e) //t_/minus)
                                    (@cp_constant? /e)
                                    (= (@st (list-ref /e (+ 1 1))) //t_/plus))
                               (set! /e
                                 (list-ref (list-ref /e (+ 1 1)) (+ 1 1)))))
                        (cond ((not (= (if (vector?
                                             (@set_difference
                                               (@variables /e)
                                               (list /a_name)))
                                         (vector-length
                                           (@set_difference
                                             (@variables /e)
                                             (list /a_name)))
                                         (length
                                           (@set_difference
                                             (@variables /e)
                                             (list /a_name))))
                                       1))
                               (puthash //d/s/e/c/t_bad /name 1))
                              (#t
                               (set! /v
                                 (car (@set_difference
                                        (@variables /e)
                                        (list /a_name))))
                               (cond ((and (not (member /v /registers))
                                           (not (member /v /reg_inits)))
                                      (puthash //d/s/e/c/t_bad /name 1))
                                     (#t
                                      (puthash //d/s/e/c/t_reg /name /v)))))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /name var-save))
      (@foreach_statement
        /foreach-constant_propagation-31
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@foreach_statement
        /foreach-constant_propagation-32
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (set! //o/k 0)
      (let ((var-save /var)
            (seq-save (@hash_keys //d/s/e/c/ts)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /var (car for-tmp))
                 (cond ((and (null? (gethash //d/s/e/c/t_bad /var))
                             (not (null? (gethash //d/s/e/c/t_reg /var)))
                             (<= (gethash
                                   /reg_init_count
                                   (gethash //d/s/e/c/t_reg /var))
                                 1))
                        (puthash
                          /reg_/d/s/e/c/ts
                          (gethash //d/s/e/c/t_reg /var)
                          (@set_union
                            (gethash
                              /reg_/d/s/e/c/ts
                              (gethash //d/s/e/c/t_reg /var))
                            (list /var)))
                        (begin
                          (display "Found (fairly) constant DSECT: ")
                          (begin
                            (display (@n_string /var))
                            (begin
                              (display " reg = ")
                              (begin
                                (display
                                  (@n_string (gethash //d/s/e/c/t_reg /var)))
                                (begin
                                  (display " init count = ")
                                  (begin
                                    (display
                                      (gethash
                                        /reg_init_count
                                        (gethash //d/s/e/c/t_reg /var)))
                                    (newline)
                                    (force-output)))))))
                        (set! //o/k 1))
                       (#t (puthash //d/s/e/c/t_bad /var 1)))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /var var-save))
      (cond ((= //o/k 0)
             (begin
               (display "No constant DSECTs found")
               (newline)
               (force-output)))
            (#t
             (set! /pointers
               (@make_set (@hash_keys //d/s/e/c/ts)))
             (@foreach_statement
               /foreach-constant_propagation-33
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (let ((/dsects_done-save /dsects_done))
               (set! /dsects_done '())
               (@foreach_stats
                 /foreach-constant_propagation-34
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips))))
               (set! /dsects_done /dsects_done-save))
             (let ((var-save /var)
                   (seq-save (@sort_list (@hash_keys //d/s/e/c/ts))))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /var (car for-tmp))
                        (cond ((and (not (null? (gethash //d/s/e/c/t_reg /var)))
                                    (null? (gethash //d/s/e/c/t_bad /var))
                                    (not (member
                                           /a_name
                                           (@used (gethash
                                                    //d/s/e/c/t_init
                                                    /var))))
                                    (null? (gethash
                                             /done
                                             (gethash
                                               /reg_/d/s/e/c/ts
                                               (gethash
                                                 //d/s/e/c/t_reg
                                                 /var)))))
                               (@ateach_statement
                                 /foreach-constant_propagation-35
                                 0
                                 (@as_type)
                                 0)
                               (cond ((null? (@program))
                                      (@new_program (@skips))))))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /var var-save))
             (begin (display "") (newline) (force-output))))
      (set! /reg /reg-save)
      (set! /var /var-save)
      (set! /reg_init_count /reg_init_count-save)
      (set! /reg_/d/s/e/c/ts /reg_/d/s/e/c/ts-save)
      (set! //d/s/e/c/t_init //d/s/e/c/t_init-save)
      (set! //d/s/e/c/t_init_count
        //d/s/e/c/t_init_count-save)
      (set! //d/s/e/c/t_reg //d/s/e/c/t_reg-save)
      (set! //d/s/e/c/t_bad //d/s/e/c/t_bad-save)
      (set! /done /done-save)
      (set! //o/k //o/k-save)
      (set! /name /name-save)
      (set! /v /v-save)
      (set! /e /e-save)
      (set! /pointers /pointers-save)
      (set! /all_inits /all_inits-save))
    (set! //d/s/e/c/ts //d/s/e/c/ts-save)))

(define (@cp_cycle? /posn /copies /len)
  (let ((//o/k-save //o/k) (funct-result '()))
    (set! //o/k 0)
    (begin
      (display "posn = ")
      (begin (display /posn) (newline) (force-output)))
    (cond ((and (not (null? /posn)) (> (last-1 /posn) 2000))
           (set! //o/k 1))
          ((>= (if (vector? /posn)
                 (vector-length /posn)
                 (length /posn))
               (* /copies /len))
           (let ((/occs (my-make-hash-table 16))
                 (/nos '())
                 (/n-save /n)
                 (/total 0))
             (set! /n 0)
             (let ((var-save /n) (seq-save /posn))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /n (car for-tmp))
                        (cond ((null? (gethash /occs /n))
                               (puthash /occs /n 1)
                               (set! /nos (cons /n /nos)))
                              (#t (puthash /occs /n (+ (gethash /occs /n) 1))))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /n var-save))
             (let ((var-save /n) (seq-save /nos))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /n (car for-tmp))
                        (cond ((>= (gethash /occs /n) /copies)
                               (set! /total (+ /total (gethash /occs /n)))))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /n var-save))
             (cond ((>= /total (* /copies /len))
                    (set! //o/k
                      (@cp_cycle2
                        (cdr (reverse /posn))
                        /copies
                        /len
                        //o/k))))
             (set! /n /n-save))))
    (set! funct-result (= //o/k 1))
    (set! //o/k //o/k-save)
    funct-result))

(define (@cp_cycle2 /list /copies /min_len //o/k)
  (let ((/a (make-vector
              (if (vector? /list)
                (vector-length /list)
                (length /list))
              0))
        (/n 0)
        (/l 0)
        (/start 0)
        (/c 0)
        (/i 0))
    (let while-loop ()
      (cond ((not (null? /list))
             (begin
               (set! /n (+ /n 1))
               (if (vector? /a)
                 (vector-set! /a (- /n 1) (car /list))
                 (set! /a (replace-nth /a /n (car /list))))
               (set! /list (cdr /list)))
             (while-loop))
            (#t #t)))
    (set! /start
      (let ((name /a))
        (if (vector? name)
          (vector-ref name (- 1 1))
          (list-ref name (- 1 1)))))
    (set! /l /min_len)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (let while-loop ()
                 (cond ((and (< (* /l /copies) /n)
                             (not (equal?
                                    (let ((name /a))
                                      (if (vector? name)
                                        (vector-ref name (- (+ /l 1) 1))
                                        (list-ref name (- (+ /l 1) 1))))
                                    /start)))
                        (set! /l (+ /l 1))
                        (while-loop))
                       (#t #t)))
               (cond ((>= (* /l /copies) /n)
                      (set! //o/k 0)
                      (set! /fl_flag1 1))
                     (#t
                      (set! /c 1)
                      (set! //o/k 1)
                      (let while-loop ()
                        (cond ((and (< /c /copies) (= //o/k 1))
                               (begin
                                 (set! /i 1)
                                 (let while-loop ()
                                   (cond ((and (<= /i /l) (= //o/k 1))
                                          (cond ((not (equal?
                                                        (let ((name /a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- /i 1))
                                                            (list-ref
                                                              name
                                                              (- /i 1))))
                                                        (let ((name /a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- (+ (* /c /l)
                                                                    /i)
                                                                 1))
                                                            (list-ref
                                                              name
                                                              (- (+ (* /c /l)
                                                                    /i)
                                                                 1))))))
                                                 (set! //o/k 0))
                                                (#t (set! /i (+ /i 1))))
                                          (while-loop))
                                         (#t #t)))
                                 (cond ((= //o/k 1) (set! /c (+ /c 1)))))
                               (while-loop))
                              (#t #t)))
                      (cond ((= //o/k 1) (set! /fl_flag1 1))
                            (#t (set! /l (+ /l 1)) (set! /fl_flag1 0))))))
             (while-loop))
            (#t #t))))
  //o/k)

(define (@cp_print_l //l-par)
  (let ((//l-save //l))
    (set! //l //l-par)
    (let ((//l1-save //l1))
      (set! //l1 '())
      (let while-loop ()
        (cond ((not (null? //l))
               (begin
                 (begin
                   (display
                     (let ((name (let ((name //l))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1))))))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1)))))
                   (begin (display ":") (newline) (force-output)))
                 (set! //l1
                   (let ((name (let ((name //l))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))))
                     (if (vector? name)
                       (vector-ref name (- 2 1))
                       (list-ref name (- 2 1)))))
                 (let while-loop ()
                   (cond ((not (null? //l1))
                          (begin
                            (cond ((<= (last-1
                                         (let ((name (let ((name //l1))
                                                       (if (vector? name)
                                                         (vector-ref
                                                           name
                                                           (- 1 1))
                                                         (list-ref
                                                           name
                                                           (- 1 1))))))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1)))))
                                       0)
                                   (begin
                                     (display "  ")
                                     (begin
                                       (display
                                         (@join "."
                                                (let ((l (butlast-1
                                                           (let ((name (let ((name //l1))
                                                                         (if (vector?
                                                                               name)
                                                                           (vector-ref
                                                                             name
                                                                             (- 1
                                                                                1))
                                                                           (list-ref
                                                                             name
                                                                             (- 1
                                                                                1))))))
                                                             (if (vector? name)
                                                               (vector-ref
                                                                 name
                                                                 (- 1 1))
                                                               (list-ref
                                                                 name
                                                                 (- 1 1))))))
                                                      (map-result '()))
                                                  (let while-loop ()
                                                    (cond ((not (null? l))
                                                           (set! map-result
                                                             (cons (@n_string
                                                                     (car l))
                                                                   map-result))
                                                           (set! l (cdr l))
                                                           (while-loop))
                                                          (#t #t)))
                                                  (reverse map-result))))
                                       (begin
                                         (display ".")
                                         (begin
                                           (display
                                             (- (last-1
                                                  (let ((name (let ((name //l1))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 1 1))
                                                      (list-ref
                                                        name
                                                        (- 1 1)))))))
                                           (begin
                                             (display " := ")
                                             (force-output)))))))
                                  (#t
                                   (begin
                                     (display "  ")
                                     (begin
                                       (display
                                         (@join "."
                                                (let ((l (let ((name (let ((name //l1))
                                                                       (if (vector?
                                                                             name)
                                                                         (vector-ref
                                                                           name
                                                                           (- 1
                                                                              1))
                                                                         (list-ref
                                                                           name
                                                                           (- 1
                                                                              1))))))
                                                           (if (vector? name)
                                                             (vector-ref
                                                               name
                                                               (- 1 1))
                                                             (list-ref
                                                               name
                                                               (- 1 1)))))
                                                      (map-result '()))
                                                  (let while-loop ()
                                                    (cond ((not (null? l))
                                                           (set! map-result
                                                             (cons (@n_string
                                                                     (car l))
                                                                   map-result))
                                                           (set! l (cdr l))
                                                           (while-loop))
                                                          (#t #t)))
                                                  (reverse map-result))))
                                       (begin
                                         (display " := ")
                                         (force-output))))))
                            (@pp_item
                              (let ((name (let ((name //l1))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              80
                              "")
                            (set! //l1 (cdr //l1)))
                          (while-loop))
                         (#t #t)))
                 (set! //l (cdr //l))
                 (begin (display "") (newline) (force-output)))
               (while-loop))
              (#t #t)))
      (set! //l1 //l1-save))
    (set! //l //l-save)))

(define (@cp_find_dispatch_codes /dispatch-par)
  (let ((/dispatch-save /dispatch)
        (/codes-save /codes)
        (/destination-save /destination)
        (/largest 0)
        (/regs '())
        (/tmp '())
        (funct-result '()))
    (set! /dispatch /dispatch-par)
    (set! /codes '())
    (set! /destination (@make_name "destination"))
    (@edit)
    (@down_last)
    (@down_last)
    (let while-loop ()
      (cond ((and (@left?)
                  (not (equal? (@v (list-ref (@i) (+ 1 1))) /dispatch)))
             (@left)
             (while-loop))
            (#t #t)))
    (cond ((equal? (@v (list-ref (@i) (+ 1 1))) /dispatch)
           (@down_last)
           (@down)
           (let while-loop ()
             (cond ((and (not (= (@st (@i)) //t_/cond)) (@right?))
                    (@right)
                    (while-loop))
                   (#t #t)))
           (cond ((= (@st (@i)) //t_/cond)
                  (@down)
                  (set! /fl_flag1 0)
                  (let while-loop ()
                    (cond ((= /fl_flag1 0)
                           (begin
                             (@down)
                             (cond ((= (@st (@i)) //t_/equal)
                                    (cond ((and (= (@st (list-ref (@i) (+ 1 1)))
                                                   //t_/variable)
                                                (equal?
                                                  (@v (list-ref (@i) (+ 1 1)))
                                                  /destination)
                                                (= (@st (list-ref (@i) (+ 1 2)))
                                                   //t_/number))
                                           (set! /codes
                                             (cons (@v (list-ref (@i) (+ 1 2)))
                                                   /codes)))
                                          ((and (= (@st (list-ref (@i) (+ 1 1)))
                                                   //t_/variable)
                                                (equal?
                                                  (@v (list-ref (@i) (+ 1 1)))
                                                  /destination)
                                                (= (@st (list-ref (@i) (+ 1 2)))
                                                   //t_/negate)
                                                (= (@st (list-ref
                                                          (list-ref
                                                            (@i)
                                                            (+ 1 2))
                                                          (+ 1 1)))
                                                   //t_/number))
                                           (set! /codes
                                             (cons (- (@v (list-ref
                                                            (list-ref
                                                              (@i)
                                                              (+ 1 2))
                                                            (+ 1 1))))
                                                   /codes)))
                                          ((and (= (@st (list-ref (@i) (+ 1 2)))
                                                   //t_/variable)
                                                (equal?
                                                  (@v (list-ref (@i) (+ 1 2)))
                                                  /destination)
                                                (= (@st (list-ref (@i) (+ 1 1)))
                                                   //t_/number))
                                           (set! /codes
                                             (cons (@v (list-ref (@i) (+ 1 1)))
                                                   /codes))))))
                             (@up)
                             (cond ((not (@right?)) (set! /fl_flag1 1))
                                   (#t (@right) (set! /fl_flag1 0))))
                           (while-loop))
                          (#t #t)))))))
    (set! /codes (reverse /codes))
    (@undo_edit)
    (set! funct-result /codes)
    (set! /dispatch /dispatch-save)
    (set! /codes /codes-save)
    (set! /destination /destination-save)
    funct-result))

(define (@cp_find_return_elts /dispatch_codes-par)
  (let ((/dispatch_codes-save /dispatch_codes)
        (//r-save //r)
        (/posn (@posn))
        (/done-save /done)
        (funct-result '()))
    (set! /dispatch_codes /dispatch_codes-par)
    (set! //r '())
    (set! /done 0)
    (@goto '())
    (set! /done 1)
    (@foreach_statement
      /foreach-constant_propagation-36
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (let while-loop ()
      (cond ((not (= /done 1))
             (begin
               (set! /done 1)
               (@foreach_statement
                 /foreach-constant_propagation-37
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips)))))
             (while-loop))
            (#t #t)))
    (@goto /posn)
    (cond (#f
           (begin (display "Return elts:") (force-output))
           (@print_elts //r)))
    (set! funct-result //r)
    (set! /dispatch_codes /dispatch_codes-save)
    (set! //r //r-save)
    (set! /done /done-save)
    funct-result))

(define (@cp_once_called_codes //code_/hash-par)
  (let ((//code_/hash-save //code_/hash))
    (set! //code_/hash //code_/hash-par)
    (let ((/var_value-save /var_value)
          (/delete-save /delete)
          (/elt-save /elt)
          (/codes-save /codes)
          (/destination-save /destination))
      (set! /var_value (my-make-hash-table 16))
      (set! /delete (my-make-hash-table 16))
      (set! /elt '())
      (set! /codes '())
      (set! /destination (@make_name "destination"))
      (@foreach_statement
        /foreach-constant_propagation-38
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@foreach_statement
        /foreach-constant_propagation-39
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /elt)
            (seq-save (@hash_keys /var_value)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /elt (car for-tmp))
                 (cond ((not (null? (gethash /var_value /elt)))
                        (begin
                          (display "Replacing:  ")
                          (begin
                            (display
                              (let ((l /elt) (map-result '()))
                                (let while-loop ()
                                  (cond ((not (null? l))
                                         (set! map-result
                                           (cons (@n_string (car l))
                                                 map-result))
                                         (set! l (cdr l))
                                         (while-loop))
                                        (#t #t)))
                                (reverse map-result)))
                            (begin
                              (display " = ")
                              (begin
                                (display (gethash /var_value /elt))
                                (newline)
                                (force-output)))))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /elt var-save))
      (@ateach_expn
        /foreach-constant_propagation-40
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@foreach_statement
        /foreach-constant_propagation-41
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (set! /var_value /var_value-save)
      (set! /delete /delete-save)
      (set! /elt /elt-save)
      (set! /codes /codes-save)
      (set! /destination /destination-save))
    (set! //code_/hash //code_/hash-save)))

(define (@cp_maybe_absorb_left //l-par)
  (let ((//l-save //l) (funct-result '()))
    (set! //l //l-par)
    (let ((/count 0)
          (//o/k-save //o/k)
          (//a/s (@as_type))
          (/used '()))
      (set! //o/k 1)
      (set! /count 0)
      (let while-loop ()
        (cond ((@trans? //t/r_/else_/if_/to_/elsif)
               (@trans //t/r_/else_/if_/to_/elsif "")
               (while-loop))
              (#t #t)))
      (let ((var-save /guard) (seq-save (@cs (@i))))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /guard (car for-tmp))
                 (cond ((not (@gen_improper? (list-ref /guard (+ 1 2)) //a/s))
                        (set! /count (+ /count 1))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /guard var-save))
      (cond ((= /count 1)
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t
                             (@right)
                             (cond ((not (and (= (@st (@i)) //t_/cond)
                                              (= (@size (@i)) 2)
                                              (member
                                                //t_/call
                                                (@stat_types
                                                  (list-ref
                                                    (list-ref (@i) (+ 1 1))
                                                    (+ 1 2))))
                                              (= (@st (list-ref
                                                        (list-ref
                                                          (list-ref
                                                            (@i)
                                                            (+ 1 2))
                                                          (+ 1 2))
                                                        (+ 1 1)))
                                                 //t_/skip)))
                                    (@left)
                                    (set! /fl_flag1 1))
                                   (#t
                                    (@left)
                                    (cond ((@trans? //t/r_/expand_/forward)
                                           (@trans //t/r_/expand_/forward "")
                                           (let while-loop ()
                                             (cond ((@trans?
                                                      //t/r_/else_/if_/to_/elsif)
                                                    (@trans
                                                      //t/r_/else_/if_/to_/elsif
                                                      "")
                                                    (while-loop))
                                                   (#t #t)))
                                           (set! /fl_flag1 0))
                                          (#t
                                           (error "@CP_Maybe_Absorb_Left: cannot Expand_Forward!")
                                           (set! /fl_flag1 0)))))))
                      (while-loop))
                     (#t #t)))))
      (set! /count 0)
      (let ((var-save /guard) (seq-save (@cs (@i))))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /guard (car for-tmp))
                 (cond ((= (@st (list-ref (list-ref /guard (+ 1 2)) (+ 1 1)))
                           //t_/call)
                        (set! /count (+ /count 1))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /guard var-save))
      (cond ((> /count 1)
             (@left)
             (let while-loop ()
               (cond ((and (= (@st (@i)) //t_/comment) (@left?))
                      (@left)
                      (while-loop))
                     (#t #t)))
             (cond ((and (= (@st (@i)) //t_/assignment)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/var_/lvalue)
                         (member
                           (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                           /registers)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                            //t_/number)
                         (> (@v (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2)))
                            1)
                         (not (null? (gethash
                                       //code_/hash
                                       (@v (list-ref
                                             (list-ref (@i) (+ 1 1))
                                             (+ 1 2)))))))
                    (if (vector? //l)
                      (let ((sub (vector-ref //l (- 1 1))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list (@v (list-ref
                                          (list-ref (@i) (+ 1 1))
                                          (+ 1 1))))))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_remove
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))
                                (list (@v (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 1))))))))
                        (vector-set! //l (- 1 1) sub))
                      (let ((sub (car (nthcdr (- 1 1) //l))))
                        (if (vector? sub)
                          (vector-set!
                            sub
                            (- 2 1)
                            (@cp_remove
                              (let ((name (let ((name //l))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              (list (@v (list-ref
                                          (list-ref (@i) (+ 1 1))
                                          (+ 1 1))))))
                          (set! sub
                            (replace-nth
                              sub
                              2
                              (@cp_remove
                                (let ((name (let ((name //l))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))
                                (list (@v (list-ref
                                            (list-ref (@i) (+ 1 1))
                                            (+ 1 1))))))))
                        (set! //l (replace-nth //l 1 sub))))
                    (@cut)
                    (let while-loop ()
                      (cond ((= (@st (@i)) //t_/comment)
                             (@right)
                             (while-loop))
                            (#t #t)))
                    (@paste_before (@buffer))
                    (@right)
                    (cond ((@trans? //t/r_/absorb_/left)
                           (@trans //t/r_/absorb_/left ""))))
                   (#t
                    (@right)
                    (let while-loop ()
                      (cond ((= (@st (@i)) //t_/comment)
                             (@right)
                             (while-loop))
                            (#t #t)))))))
      (set! //o/k //o/k-save))
    (set! funct-result //l)
    (set! //l //l-save)
    funct-result))

(define (@fd_rename_dsect_code_stores
         //codes-par
         /rename-par)
  (let ((/rename-save /rename)
        (//codes-save //codes)
        (funct-result '()))
    (set! /rename /rename-par)
    (set! //codes //codes-par)
    (let ((//l1-save //l1)
          (//l2-save //l2)
          (/name-save /name)
          (//d/s/e/c/ts-save //d/s/e/c/ts)
          (//d/s/e/c/t_regs-save //d/s/e/c/t_regs)
          (/registers-save /registers)
          (/new-save /new))
      (set! //l1 '())
      (set! //l2 '())
      (set! /name '())
      (set! //d/s/e/c/ts (my-make-hash-table 16))
      (set! //d/s/e/c/t_regs (my-make-hash-table 16))
      (set! /registers
        (@make_set
          (let ((l (list "a0"
                         "a1"
                         "a2"
                         "a3"
                         "a4"
                         "a5"
                         "a6"
                         "a7"
                         "a8"
                         "a9"
                         "a10"
                         "a11"
                         "a12"
                         "a13"
                         "a14"
                         "a15"
                         "x0"
                         "x1"
                         "x2"
                         "x3"
                         "x4"
                         "x5"
                         "x6"
                         "x7"
                         "x8"
                         "x9"
                         "x10"
                         "x11"
                         "x12"
                         "x13"
                         "x14"
                         "x15"
                         "r0"
                         "r1"
                         "r2"
                         "r3"
                         "r4"
                         "r5"
                         "r6"
                         "r7"
                         "r8"
                         "r9"
                         "r10"
                         "r11"
                         "r12"
                         "r13"
                         "r14"
                         "r15"
                         "destination"))
                (map-result '()))
            (let while-loop ()
              (cond ((not (null? l))
                     (set! map-result
                       (cons (@make_name (car l)) map-result))
                     (set! l (cdr l))
                     (while-loop))
                    (#t #t)))
            (reverse map-result))))
      (set! /new (my-make-hash-table 16))
      (set! //d/s/e/c/ts
        (@cp_find_dsects //d/s/e/c/ts))
      (cond (#f
             (@foreach_statement
               /foreach-constant_propagation-42
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))))
      (let ((var-save /v)
            (seq-save (@hash_keys //d/s/e/c/t_regs)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /v (car for-tmp))
                 (begin
                   (display "Regs for ")
                   (begin
                     (display (@n_string /v))
                     (begin
                       (display " = ")
                       (begin
                         (display
                           (let ((l (gethash //d/s/e/c/t_regs /v))
                                 (map-result '()))
                             (let while-loop ()
                               (cond ((not (null? l))
                                      (set! map-result
                                        (cons (@n_string (car l)) map-result))
                                      (set! l (cdr l))
                                      (while-loop))
                                     (#t #t)))
                             (reverse map-result)))
                         (newline)
                         (force-output)))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /v var-save))
      (@foreach_statement
        /foreach-constant_propagation-43
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (let ((var-save /elts)
            (seq-save (@set_intersect //l1 //l2)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /elts (car for-tmp))
                 (begin
                   (set! /name "")
                   (cond ((and (> (if (vector? /elts)
                                    (vector-length /elts)
                                    (length /elts))
                                  1)
                               (<= (if (vector?
                                         (gethash
                                           //d/s/e/c/t_regs
                                           (let ((name /elts))
                                             (if (vector? name)
                                               (vector-ref name (- 2 1))
                                               (list-ref name (- 2 1))))))
                                     (vector-length
                                       (gethash
                                         //d/s/e/c/t_regs
                                         (let ((name /elts))
                                           (if (vector? name)
                                             (vector-ref name (- 2 1))
                                             (list-ref name (- 2 1))))))
                                     (length
                                       (gethash
                                         //d/s/e/c/t_regs
                                         (let ((name /elts))
                                           (if (vector? name)
                                             (vector-ref name (- 2 1))
                                             (list-ref name (- 2 1)))))))
                                   1))
                          (let ((var-save /elt) (seq-save /elts))
                            (if (vector? seq-save)
                              (set! seq-save (vector-elts seq-save)))
                            (let for-in-loop ((for-tmp seq-save))
                              (cond ((not (null? for-tmp))
                                     (set! /elt (car for-tmp))
                                     (begin
                                       (cond ((not (equal? /name ""))
                                              (set! /name
                                                (string-append /name "_"))))
                                       (cond ((> /elt 0)
                                              (set! /name
                                                (concat
                                                  /name
                                                  (@n_string /elt))))
                                             (#t
                                              (set! /name
                                                (concat
                                                  /name
                                                  (@string (- /elt)))))))
                                     (for-in-loop (cdr for-tmp)))
                                    (#t #t)))
                            (set! /elt var-save))
                          (set! /name (@make_name /name))
                          (puthash /new /elts /name))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /elts var-save))
      (@foreach_expn
        /foreach-constant_propagation-44
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@foreach_lvalue
        /foreach-constant_propagation-45
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      #t
      (set! //l1 //l1-save)
      (set! //l2 //l2-save)
      (set! /name /name-save)
      (set! //d/s/e/c/ts //d/s/e/c/ts-save)
      (set! //d/s/e/c/t_regs //d/s/e/c/t_regs-save)
      (set! /registers /registers-save)
      (set! /new /new-save))
    (set! funct-result /rename)
    (set! /rename /rename-save)
    (set! //codes //codes-save)
    funct-result))

(define (@fd_succs_and_preds
         //n-par
         //bodies-par
         //starting_/action
         //succs-par
         //preds-par)
  (let ((//preds-save //preds)
        (//succs-save //succs)
        (//bodies-save //bodies)
        (//n-save //n)
        (funct-result '()))
    (set! //preds //preds-par)
    (set! //succs //succs-par)
    (set! //bodies //bodies-par)
    (set! //n //n-par)
    (begin
      (display "Calculating Succs and Preds... ")
      (force-output))
    (let ((/calls-save /calls) (/call-save /call))
      (set! /calls '())
      (set! /call 0)
      (let ((var-save /i) (for-step 1) (for-end //n))
        (set! /i 1)
        (let for-loop ()
          (cond ((or (and (> 1 0) (<= /i for-end))
                     (and (< 1 0) (>= /i for-end)))
                 (if (vector? //preds)
                   (vector-set! //preds (- /i 1) '())
                   (set! //preds (replace-nth //preds /i '())))
                 (set! /i (+ /i for-step))
                 (for-loop))
                (#t #t)))
        (set! /i var-save))
      (let ((var-save /i) (for-step 1) (for-end //n))
        (set! /i 1)
        (let for-loop ()
          (cond ((or (and (> 1 0) (<= /i for-end))
                     (and (< 1 0) (>= /i for-end)))
                 (begin
                   (if (vector? //succs)
                     (vector-set! //succs (- /i 1) '())
                     (set! //succs (replace-nth //succs /i '())))
                   (cond ((not (null? (let ((name //bodies))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1))))))
                          (set! /calls
                            (@calls
                              (let ((name //bodies))
                                (if (vector? name)
                                  (vector-ref name (- /i 1))
                                  (list-ref name (- /i 1))))))
                          (let while-loop ()
                            (cond ((not (null? /calls))
                                   (begin
                                     (set! /call (- (car (car /calls))))
                                     (set! /calls (cdr /calls))
                                     (cond ((not (number? /call))
                                            (begin
                                              (display "Check me: ")
                                              (begin
                                                (display /call)
                                                (newline)
                                                (force-output)))
                                            (set! /call (+ //n 1))))
                                     (if (vector? //succs)
                                       (vector-set!
                                         //succs
                                         (- /i 1)
                                         (@set_union
                                           (list /call)
                                           (let ((name //succs))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))))
                                       (set! //succs
                                         (replace-nth
                                           //succs
                                           /i
                                           (@set_union
                                             (list /call)
                                             (let ((name //succs))
                                               (if (vector? name)
                                                 (vector-ref name (- /i 1))
                                                 (list-ref name (- /i 1))))))))
                                     (if (vector? //preds)
                                       (vector-set!
                                         //preds
                                         (- /call 1)
                                         (@set_union
                                           (let ((name //preds))
                                             (if (vector? name)
                                               (vector-ref name (- /call 1))
                                               (list-ref name (- /call 1))))
                                           (list /i)))
                                       (set! //preds
                                         (replace-nth
                                           //preds
                                           /call
                                           (@set_union
                                             (let ((name //preds))
                                               (if (vector? name)
                                                 (vector-ref name (- /call 1))
                                                 (list-ref name (- /call 1))))
                                             (list /i))))))
                                   (while-loop))
                                  (#t #t))))))
                 (set! /i (+ /i for-step))
                 (for-loop))
                (#t #t)))
        (set! /i var-save))
      (set! /calls /calls-save)
      (set! /call /call-save))
    (begin
      (display "Done.")
      (newline)
      (force-output))
    (set! funct-result (list //succs //preds))
    (set! //preds //preds-save)
    (set! //succs //succs-save)
    (set! //bodies //bodies-save)
    (set! //n //n-save)
    funct-result))

(define (@fd_restore_dsect_code_stores /rename-par)
  (let ((/rename-save /rename))
    (set! /rename /rename-par)
    (@foreach_expn
      /foreach-constant_propagation-46
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@foreach_lvalue
      /foreach-constant_propagation-47
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! /rename /rename-save)))

#t

