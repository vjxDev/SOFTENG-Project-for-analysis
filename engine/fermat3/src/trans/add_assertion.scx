(define /%const__add_assertion__1
  (@make 6
         '()
         (list (@make 506 -1 '()) (@make 217 -2 '()))))

(define /%const__add_assertion__2
  (@make 7
         '()
         (list (@make 305 -1 '())
               (@make 17
                      '()
                      (list (@make 107 -2 '())
                            (@make 109 '() (list (@make 305 -3 '()))))))))

(define /%const__add_assertion__3
  (@make 109 '() (list (@make 309 '() '()))))

(define (@add_assertion_test)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (cond ((= (@st (@i)) //t_/assignment)
         (cond ((not (null? (@set_difference (@assigned (@i)) (@used (@i)))))
                (@pass))
               (#t
                (@fail "The assignment should assign to new variables."))))
        ((= (@st (@i)) //t_/cond)
         (let ((//found 0))
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (cond ((not (@is_improper?))
                             (@down_last)
                             (@down_last)
                             (cond ((= (@st (@i)) //t_/assert) (set! //found 1))
                                   (#t (set! //found 2)))
                             (@up)
                             (@up)))
                      (cond ((= //found 2) (set! /fl_flag1 1))
                            ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t)))
           (@up)
           (cond ((= //found 1) (@pass))
                 (#t
                  (@fail "No reachable assertion in the `IF' statement.")))))
        ((or (= (@st (@i)) //t_/assert)
             (= (@st (@i)) //t_/while)
             (= (@st (@i)) //t_/abort))
         (@pass))
        ((= (@gt (@i)) //t_/condition)
         (cond ((and (or (= (@st (@parent)) //t_/assert)
                         (= (@st (@parent)) //t_/guarded)
                         (= (@st (@parent)) //t_/while))
                     (not (= (@st (@i)) //t_/true))
                     (not (= (@st (@i)) //t_/false)))
                (@pass))
               (#t
                (@fail "Condition is not in a guard or `While' loop."))))
        ((and (= (@gt (@i)) //t_/statement)
              (not (member 0 (@tvs))))
         (@pass))
        (#t
         (@fail "Cannot add an assertion after the selected type of item."))))

(define (@add_assertion_code //data)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (let ((//a '())
        (//b '())
        (//c '())
        (//s '())
        (//assd_/vars (@assigned (@i))))
    (cond ((= (@st (@i)) //t_/assignment)
           (@down)
           (set! //a (@make //t_/true '() '()))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (let ((/__/o/k 1))
                        (set! /__/o/k
                          (@new_match
                            /%const__add_assertion__1
                            (@i)
                            /__/o/k))
                        (cond ((= /__/o/k 1)
                               (let ((/__/e_save //e) (/__/v_save //v))
                                 (set! //e (vector-ref /__/match_array 1))
                                 (set! //v (vector-ref /__/match_array 0))
                                 (cond ((null? (@set_intersect
                                                 (@used (@i))
                                                 //assd_/vars))
                                        (set! //a
                                          (@and //a
                                                (@make 313
                                                       '()
                                                       (list (@var_to_expn //v)
                                                             (@var_to_expn
                                                               //e)))))))
                                 (set! //e /__/e_save)
                                 (set! //v /__/v_save)))))
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t)))
           (@up)
           (@paste_after (@make 109 '() (list //a)))
           (@right))
          ((= (@st (@i)) //t_/cond)
           (@down)
           (set! //a (@make //t_/false '() '()))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (cond ((not (@is_improper?))
                             (let ((/__/o/k 1))
                               (set! /__/o/k
                                 (@new_match
                                   /%const__add_assertion__2
                                   (@i)
                                   /__/o/k))
                               (cond ((= /__/o/k 1)
                                      (let ((/__/c_save //c)
                                            (/__/s_save //s)
                                            (/__/b_save //b))
                                        (set! //c
                                          (vector-ref /__/match_array 2))
                                        (set! //s
                                          (vector-ref /__/match_array 1))
                                        (set! //b
                                          (vector-ref /__/match_array 0))
                                        (set! //a (@or //a //c))
                                        (set! //c /__/c_save)
                                        (set! //s /__/s_save)
                                        (set! //b /__/b_save)))))))
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t)))
           (@up)
           (@paste_after (@make 109 '() (list //a)))
           (@right))
          ((= (@st (@i)) //t_/while)
           (@down)
           (set! //a (@not (@i)))
           (@up)
           (@paste_after (@make 109 '() (list //a)))
           (@right))
          ((= (@st (@i)) //t_/assert)
           (@paste_after (@i))
           (@right))
          ((= (@st (@i)) //t_/abort)
           (@paste_after /%const__add_assertion__3)
           (@right))
          ((and (= (@gt (@i)) //t_/condition)
                (not (= (@st (@i)) //t_/true))
                (not (= (@st (@i)) //t_/false)))
           (set! //a (@i))
           (@up)
           (cond ((= (@st (@i)) //t_/assert)
                  (@paste_after (@make 109 '() (list //a)))
                  (@right))
                 (#t
                  (@down_last)
                  (@down)
                  (@paste_before (@make 109 '() (list //a))))))
          ((and (= (@gt (@i)) //t_/statement)
                (not (member 0 (@tvs))))
           (set! //b (@make //t_/false '() '()))
           (@paste_after (@make 109 '() (list //b)))
           (@right)))))

