(define (@combine_wheres_test)
  (let ((/orig_pos (@posn)) (/o_where "") (/double 0))
    (cond ((not (= (@spec_type (@item)) //t_/where))
           (@fail "Not WHERE")))
    (cond ((and (not (@failed?)) (@up?))
           (@up)
           (cond ((@up?)
                  (@up)
                  (cond ((= (@spec_type (@item)) //t_/where)
                         (set! /double 1)
                         (set! /o_where (@posn))))))))
    (@goto /orig_pos)
    (cond ((and (= /double 0) (not (@failed?)) (@down?))
           (@down)
           (cond ((@down?)
                  (@down)
                  (cond ((= (@spec_type (@item)) //t_/where)
                         (set! /double 1)
                         (set! /o_where /orig_pos)))))))
    (cond ((= /double 1)
           (@goto /o_where)
           (let ((/outer '()) (/inner '()))
             (@down)
             (@right)
             (let ((var-save /i)
                   (for-step 1)
                   (for-end (@size (@item))))
               (set! /i 1)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (set! /outer
                          (concat
                            /outer
                            (list (@v (list-ref
                                        (list-ref (@i) (+ 1 /i))
                                        (+ 1 1))))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (@goto /o_where)
             (@down)
             (@down)
             (@down)
             (@right)
             (let ((var-save /i)
                   (for-step 1)
                   (for-end (@size (@item))))
               (set! /i 1)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (cond ((member
                                 (@v (list-ref
                                       (list-ref (@i) (+ 1 /i))
                                       (+ 1 1)))
                                 /outer)
                               (@fail "Name Clash")))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save)))))
    (cond ((= /double 0) (@fail "Not nested WHEREs")))
    (cond ((not (@failed?)) (@pass)))))

(define (@combine_wheres_code //data)
  (let ((/o_where (@posn))
        (//s1 "")
        (//s2 "")
        (/d1 "")
        (/d2 ""))
    (cond ((@up?)
           (@up)
           (cond ((@up?)
                  (@up)
                  (cond ((= (@spec_type (@item)) //t_/where)
                         (set! /o_where (@posn))))))))
    (@goto /o_where)
    (set! /d1
      (@get_l
        (list-ref (@item) (+ 1 2))
        1
        (@size (list-ref (@item) (+ 1 2)))))
    (set! //s1
      (@get_l
        (list-ref (@item) (+ 1 1))
        2
        (@size (list-ref (@item) (+ 1 1)))))
    (@down)
    (@down)
    (set! //s2 (list-ref (@item) (+ 1 1)))
    (set! /d2 (list-ref (@item) (+ 1 2)))
    (@goto /o_where)
    (@paste_over
      (@make //t_/where
             '()
             (list (concat //s2 //s1) (concat /d2 /d1))))))

