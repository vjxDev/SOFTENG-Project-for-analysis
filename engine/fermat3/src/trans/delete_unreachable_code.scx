(define (/foreach-delete_unreachable_code-1
         //depth
         //a/s_/type)
  (cond ((and (@gen_improper? (@item) (@as_type))
              (@right?))
         (@pass)))
  (cond ((and (not (@passed?))
              (member
                (@spec_type (@item))
                (list //t_/cond //t_/d_/if //t_/d_/do))
              (<= (@size (@item)) 20))
         (let ((//d (@make //t_/false '() '()))
               (//con '())
               (//b '())
               (//type (@spec_type (@item))))
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (cond ((not (@cs? (@i))) (set! /fl_flag1 1))
                          (#t
                           (set! //con
                             (@simplify_cond (list-ref (@item) (+ 1 1))))
                           (cond ((= (@spec_type //con) //t_/false) (@pass))
                                 ((= //type //t_/cond)
                                  (cond ((@implies? //con //d)
                                         (cond ((@right?) (@pass))
                                               (#t
                                                (@down_last)
                                                (let ((/__/o/k 1))
                                                  (set! /__/o/k
                                                    (@new_match
                                                      /%const__delete_unreachable_code__1
                                                      (@i)
                                                      /__/o/k))
                                                  (cond ((not (= /__/o/k 1))
                                                         (@pass))))))
                                         (@up))
                                        (#t (set! //d (@or //d //con))))))
                           (cond ((not (@right?)) (set! /fl_flag1 1))
                                 (#t (@right) (set! /fl_flag1 0)))))
                    (while-loop))
                   (#t #t)))
           (@up)))))

(define (/foreach-delete_unreachable_code-2
         //depth
         //a/s_/type)
  (@down)
  (let while-loop ()
    (cond ((and (or (not (@gen_improper? (@item) //a/s/t/y/p/e))
                    (not (@right?)))
                (@right?))
           (begin (@right))
           (while-loop))
          (#t #t)))
  (cond ((and (@gen_improper? (@item) //a/s/t/y/p/e)
              (@right?))
         (@delete_rest)
         (begin (display "x") (force-output)))))

(define /%const__delete_unreachable_code__1
  (@make 17 '() (list (@make 145 '() '()))))

(define (@delete_unreachable_code_test)
  (let ((//orig_/pos (@posn)) (//a/s/type '()))
    (cond ((and (not (@passed?))
                (< (@stat_count (@item)) 100))
           (cond ((= (@spec_type (@item)) //t_/a_/s) (@down_last)))
           (set! //a/s/type (@as_type))
           (@ateach_statement
             /foreach-delete_unreachable_code-1
             0
             (@as_type)
             0)
           (cond ((null? (@program)) (@new_program (@skips))))))
    (cond ((not (@passed?)) (@fail "Nothing to delete")))))

(define (@delete_unreachable_code_code //data)
  (let ((//orig_/pos (@posn)))
    (cond ((= (@spec_type (@item)) //t_/a_/s)
           (let ((//a/s_/size (@size (list-ref (@i) (+ 1 2))))
                 (//unreachable '())
                 (//actions '()))
             (@down_last)
             (@down_last)
             (let ((var-save //i) (for-step (- 1)) (for-end 1))
               (set! //i //a/s_/size)
               (let for-loop ()
                 (cond ((or (and (> (- 1) 0) (<= //i for-end))
                            (and (< (- 1) 0) (>= //i for-end)))
                        (begin
                          (cond ((not (member //i //unreachable))
                                 (set! //actions (cons (@item) //actions)))
                                (#t (begin (display "x") (force-output))))
                          (@left))
                        (set! //i (+ //i for-step))
                        (for-loop))
                       (#t #t)))
               (set! //i var-save))
             (@up)
             (@paste_over (@make //t_/actions '() //actions)))))
    (cond ((= (@spec_type (@item)) //t_/a_/s) (@down_last)))
    (let ((//a/s/t/y/p/e-save //a/s/t/y/p/e))
      (set! //a/s/t/y/p/e (@as_type))
      (@edit)
      (@foreach_stats
        /foreach-delete_unreachable_code-2
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (cond ((member
               (@spec_type (@item))
               (list //t_/cond //t_/d_/if //t_/d_/do))
             (@delete_unreachable_cases)))
      (@end_edit)
      (@goto //orig_/pos)
      (set! //a/s/t/y/p/e //a/s/t/y/p/e-save))))

(define (@delete_unreachable_cases)
  (let ((//d (@make //t_/false '() '()))
        (//con '())
        (//p '())
        (//pos (@posn))
        (//type (@spec_type (@item))))
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (set! //con
                 (@simplify_cond (list-ref (@item) (+ 1 1))))
               (cond ((= (@spec_type //con) //t_/false)
                      (set! //p (@posn))
                      (@clever_delete)
                      (begin (display "x") (force-output))
                      (@goto //p)
                      (set! /fl_flag1 0))
                     ((= //type //t_/cond)
                      (cond ((@implies? //con //d)
                             (@delete)
                             (begin (display "x") (force-output))
                             (@fixup)
                             (set! /fl_flag1 0))
                            (#t
                             (set! //d (@or //d //con))
                             (cond ((and (= (@spec_type //d) //t_/true)
                                         (@right?))
                                    (@delete_rest)
                                    (begin (display "x") (force-output))
                                    (@fixup)
                                    (set! /fl_flag1 1))
                                   ((not (@right?)) (set! /fl_flag1 1))
                                   (#t (@right) (set! /fl_flag1 0))))))
                     ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0)))
               (cond ((= /fl_flag1 0)
                      (cond ((not (@valid_posn? (@program) (@posn)))
                             (set! /fl_flag1 1))
                            (#t (set! /fl_flag1 0))))))
             (while-loop))
            (#t #t)))
    (@goto //pos)))

#t

