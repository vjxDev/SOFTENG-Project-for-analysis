(define (/foreach-join_all_cases-1 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/comment)
         (set! /strings
           (@set_union (list (@v (@i))) /strings)))))

(define (/foreach-join_all_cases-2 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/comment)
         (set! /strings
           (@set_union (list (@v (@i))) /strings)))))

(define /%const__join_all_cases__1
  (@make 309 '() '()))

(define (@join_all_cases_test)
  (cond ((not (= (@st (@i)) //t_/cond))
         (@fail "Not an IF statement"))
        ((= (@size (@i)) 2)
         (cond ((@equal_x_comments?
                  (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))
                  (list-ref (list-ref (@i) (+ 1 2)) (+ 1 2)))
                (@pass))
               (#t
                (@fail "The binary IF has different statements in the two arms"))))
        ((> (@size (@i)) 25)
         (@fail "Too many branches in the IF statement"))
        (#t
         (let ((//max_/distance 10)
               (/guard '())
               (/seen '())
               (//s '())
               (/tmp '()))
           (let ((var-save /guard) (seq-save (@cs (@i))))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /guard (car for-tmp))
                      (begin
                        (set! //s (list-ref /guard (+ 1 2)))
                        (set! /tmp /seen)
                        (let while-loop ()
                          (cond ((and (not (null? /tmp)) (not (@passed?)))
                                 (cond ((@equal? //s (car /tmp)) (@pass))
                                       (#t (set! /tmp (cdr /tmp))))
                                 (while-loop))
                                (#t #t)))
                        (cond ((not (@passed?))
                               (set! /seen (cons //s /seen))
                               (cond ((> (if (vector? /seen)
                                           (vector-length /seen)
                                           (length /seen))
                                         //max_/distance)
                                      (set! /seen (butlast-1 /seen)))))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /guard var-save))
           (cond ((not (@passed?))
                  (@fail "The IF statement does not have a repeated guard")))))))

(define (@equal_x_comments? //i1 //i2)
  (let ((//o/k 1))
    (cond ((not (= (@st //i1) (@st //i2))) (set! //o/k 0))
          ((@has_value_type? (@st //i1))
           (cond ((and (not (= (@st //i1) //t_/comment))
                       (not (equal? (@v //i1) (@v //i2))))
                  (set! //o/k 0))))
          (#t
           (let ((//c1 (@cs //i1)) (//c2 (@cs //i2)))
             (let while-loop ()
               (cond ((and (= //o/k 1)
                           (not (null? //c1))
                           (not (null? //c2)))
                      (cond ((= (@st (car //c1)) //t_/comment)
                             (set! //c1 (cdr //c1)))
                            ((= (@st (car //c2)) //t_/comment)
                             (set! //c2 (cdr //c2)))
                            ((not (@equal_x_comments? (car //c1) (car //c2)))
                             (set! //o/k 0))
                            (#t
                             (set! //c1 (cdr //c1))
                             (set! //c2 (cdr //c2))))
                      (while-loop))
                     (#t #t)))
             (let while-loop ()
               (cond ((and (not (null? //c1))
                           (= (@st (car //c1)) //t_/comment))
                      (set! //c1 (cdr //c1))
                      (while-loop))
                     (#t #t)))
             (let while-loop ()
               (cond ((and (not (null? //c2))
                           (= (@st (car //c2)) //t_/comment))
                      (set! //c2 (cdr //c2))
                      (while-loop))
                     (#t #t)))
             (cond ((or (not (null? //c1)) (not (null? //c2)))
                    (set! //o/k 0))))))
    (= //o/k 1)))

(define (@join_all_cases_code //data)
  (let ((//max_/distance 10)
        (/guards '())
        (/seen '())
        (//s '())
        (/tmp '())
        (/found 0)
        (/posn 0)
        (/newcond '())
        (/fix_last 0)
        (/comments '())
        (/strings-save /strings))
    (set! /strings '())
    (@edit)
    (set! /guards (@cs (@i)))
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (cond ((null? /guards) (set! /fl_flag1 1))
                   (#t
                    (set! //s (list-ref (car /guards) (+ 1 2)))
                    (set! /guards (cdr /guards))
                    (set! /posn (+ /posn 1))
                    (set! /tmp /seen)
                    (let while-loop ()
                      (cond ((and (not (null? /tmp)) (= /found 0))
                             (cond ((@equal_x_comments? //s (car /tmp))
                                    (cond ((> (@total_size (car /tmp))
                                              (@total_size //s))
                                           (set! //s (car /tmp))))
                                    (set! /posn
                                      (- /posn
                                         (+ (- (if (vector? /seen)
                                                 (vector-length /seen)
                                                 (length /seen))
                                               (if (vector? /tmp)
                                                 (vector-length /tmp)
                                                 (length /tmp)))
                                            1)))
                                    (set! /found 1))
                                   (#t (set! /tmp (cdr /tmp))))
                             (while-loop))
                            (#t #t)))
                    (cond ((= /found 1) (set! /fl_flag1 1))
                          (#t
                           (set! /seen (cons //s /seen))
                           (cond ((> (if (vector? /seen)
                                       (vector-length /seen)
                                       (length /seen))
                                     //max_/distance)
                                  (set! /seen (butlast-1 /seen))
                                  (set! /fl_flag1 0))
                                 (#t (set! /fl_flag1 0)))))))
             (while-loop))
            (#t #t)))
    (cond ((= /found 0)
           (begin
             (display "Error in Join_All_Cases!!!")
             (newline)
             (force-output))))
    (@down_last)
    (let while-loop ()
      (cond ((and (@left?)
                  (not (@equal_x_comments? (list-ref (@i) (+ 1 2)) //s)))
             (@left)
             (while-loop))
            (#t #t)))
    (set! /newcond /%const__join_all_cases__1)
    (let while-loop ()
      (cond ((> (@posn_n) /posn)
             (begin
               (set! /newcond
                 (@or (list-ref (@i) (+ 1 1)) /newcond))
               (cond ((and (not (@right?))
                           (= (@st (list-ref (@i) (+ 1 1))) //t_/true))
                      (set! /fix_last 1)))
               (let ((var-save //i)
                     (seq-save (@cs (list-ref (@i) (+ 1 2)))))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! //i (car for-tmp))
                          (cond ((= (@st //i) //t_/comment)
                                 (set! /comments (cons //i /comments))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! //i var-save))
               (@delete)
               (@left)
               (let while-loop ()
                 (cond ((and (@left?)
                             (not (@equal_x_comments?
                                    (list-ref (@i) (+ 1 2))
                                    //s)))
                        (begin
                          (set! /newcond
                            (@and (@not (list-ref (@i) (+ 1 1))) /newcond))
                          (@left))
                        (while-loop))
                       (#t #t))))
             (while-loop))
            (#t #t)))
    (@down)
    (@paste_over (@or (@i) /newcond))
    (@up)
    (cond ((= /fix_last 1)
           (@to_last)
           (@down)
           (@paste_over (@make //t_/true '() '()))
           (@up)))
    (@up)
    (@down)
    (@foreach_statement
      /foreach-join_all_cases-1
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (let while-loop ()
      (cond ((@right?)
             (begin
               (@right)
               (@foreach_statement
                 /foreach-join_all_cases-2
                 0
                 (@as_type)
                 0)
               (cond ((null? (@program)) (@new_program (@skips)))))
             (while-loop))
            (#t #t)))
    (@up)
    (@end_edit)
    (@fix_cond)
    (cond ((= (@st (@i)) //t_/statements) (@down))
          ((= (@st (@i)) //t_/cond)
           (@down)
           (@down_to 2)
           (@down_last)))
    (let ((var-save //i) (seq-save /comments))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! //i (car for-tmp))
               (cond ((not (member (@v //i) /strings))
                      (@paste_after //i)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! //i var-save))
    (let while-loop ()
      (cond ((and (@up?) (not (= (@st (@i)) //t_/cond)))
             (@up)
             (while-loop))
            (#t #t)))
    (set! /strings /strings-save)))

#t

