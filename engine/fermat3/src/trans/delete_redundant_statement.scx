(define (@delete_redundant_statement_test)
  (cond ((not (or (= (@gt (@i)) //t_/statement)
                  (and (= (@gt (@i)) //t_/assign)
                       (= (@st (@parent)) //t_/assignment))))
         (@fail "The selected item is neither a Statement nor an Assign."))
        (#t
         (cond ((not (null? (@set_intersect
                              (@stat_types (@i))
                              (@make_set
                                (list //t_/comment
                                      //t_/assert
                                      //t_/print
                                      //t_/prinflush
                                      //t_/abort
                                      //t_/error)))))
                (@fail "This transformation will not delete comments, assertions, print, ABORT or ERROR statements"))
               ((not (null? (@set_intersect
                              (@stat_types (@i))
                              //call_/types_/set)))
                (@fail "The Statement contains a call"))
               ((not (@is_proper?))
                (@fail "The Statement has a non-zero terminal value"))
               ((null? (@assigned (@i))) (@pass))
               ((and (= (@spec_type (@i)) //t_/assignment)
                     (= (@size (@i)) 1)
                     (@lr_equal?
                       (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))
                       (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))))
                (@pass))
               ((and (= (@spec_type (@i)) //t_/assign)
                     (@lr_equal?
                       (list-ref (@i) (+ 1 1))
                       (list-ref (@i) (+ 1 2))))
                (@pass))
               ((not (@up?))
                (@fail "There are no statements after this one to clobber the assigned variables."))
               ((and (= (@st (@i)) //t_/assignment)
                     (or (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/sub_/seg_/lvalue)
                         (= (@st (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))
                            //t_/rel_/seg_/lvalue)))
                (@fail "Statement may assign outside defined size of variable"))
               ((not (@drs_scan_ok? (@elts_assigned (@i))))
                (@fail "Some assigned variable may be used."))
               (#t (@pass))))))

(define (@delete_redundant_statement_code //data)
  (@clever_delete))

(set! //d/r/s_/globals_/to_/pars_/done 0)

(define (@drs_scan_ok? //v-par)
  (let ((//v-save //v)
        (//o/k-save //o/k)
        (/v '())
        (//done_/list-save //done_/list)
        (//agenda-save //agenda)
        (//call_/depth-save //call_/depth)
        (//max_/call_/depth-save //max_/call_/depth)
        (//posn_/list '())
        (//p '())
        (/type 0)
        (//end_/o/k 1)
        (/accs-save /accs)
        (/sysmacs-save /sysmacs)
        (/regs-save /regs)
        (/cc_name-save /cc_name)
        (/loops 0)
        (funct-result '()))
    (set! //v //v-par)
    (set! //o/k 1)
    (set! //done_/list '())
    (set! //agenda '())
    (set! //call_/depth 0)
    (set! //max_/call_/depth 5)
    (set! /accs
      (@make_set
        (let ((l (list "a0"
                       "a1"
                       "a2"
                       "a3"
                       "a4"
                       "a5"
                       "a6"
                       "a7"
                       "a8"
                       "a9"
                       "a10"
                       "a11"
                       "a12"
                       "a13"
                       "a14"
                       "a15"
                       "x0"
                       "x1"
                       "x2"
                       "x3"
                       "x4"
                       "x5"
                       "x6"
                       "x7"
                       "x8"
                       "x9"
                       "x10"
                       "x11"
                       "x12"
                       "x13"
                       "x14"
                       "x15"
                       "r0"
                       "r1"
                       "r2"
                       "r3"
                       "r4"
                       "r5"
                       "r6"
                       "r7"
                       "r8"
                       "r9"
                       "r10"
                       "r11"
                       "r12"
                       "r13"
                       "r14"
                       "cc"))
              (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result
                     (cons (@make_name (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (set! /sysmacs
      (@make_set
        (let ((l (list "WTO"
                       "OPEN"
                       "CLOSE"
                       "AOPEN"
                       "ACLOSE"
                       "GET"
                       "AGET"
                       "READ"
                       "ARD"
                       "PUT"
                       "APUT"
                       "WRITE"
                       "OSCOM_GET"
                       "OSCOM_PUT"
                       "GET_DTF"
                       "PUT_DTF"
                       "PUT_DTF_UPD"
                       "OPEN_DTF"
                       "CLOSE_DTF"
                       "OSCOM_GET"
                       "OSCOM_PUT"
                       "GETV"
                       "GET_FIXED"
                       "GET_VARIABLE"
                       "PUT_FIXED"
                       "PUT_VARIABLE"
                       "PUT_CONSOLE"
                       "GET_CONSOLE"
                       "pack"
                       "unpk"
                       "zap"
                       "ap"
                       "sp"
                       "mp"
                       "dp"
                       "fill"
                       "ed"
                       "chain_reg"
                       "init_NOP_flag"))
              (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result
                     (cons (@make_name (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (set! /regs (@make_name "regs"))
    (set! /cc_name (@make_name "cc"))
    (let ((var-save /v) (seq-save //v))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /v (car for-tmp))
               (cond ((not (and (= (if (vector? /v)
                                     (vector-length /v)
                                     (length /v))
                                   1)
                                (member (car /v) /accs)))
                      (set! //end_/o/k 0)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /v var-save))
    (set! /fl_flag2 0)
    (let while-loop ()
      (cond ((= /fl_flag2 0)
             (begin
               (cond ((and (not (@right?))
                           (>= (if (vector? (@posn))
                                 (vector-length (@posn))
                                 (length (@posn)))
                               2)
                           (@is_proper?))
                      (set! //p (@posn))
                      (set! /type
                        (@spec_type
                          (@get (@program)
                                (@sub_seg
                                  //p
                                  1
                                  (- (if (vector? //p)
                                       (vector-length //p)
                                       (length //p))
                                     2)))))
                      (cond ((or (= /type //t_/var) (= /type //t_/for))
                             (@up)
                             (@up)
                             (cond ((= /type //t_/var)
                                    (set! //v
                                      (@elt_subtract
                                        //v
                                        (@elt_subtract
                                          (@elt_lvars (list-ref (@i) (+ 1 1)))
                                          (@elts_used
                                            (list-ref (@i) (+ 1 1)))))))
                                   (#t
                                    (set! //v
                                      (@elt_remove
                                        //v
                                        (list (@value
                                                (list-ref
                                                  (@i)
                                                  (+ 1 1))))))))))))
               (cond ((null? //v)
                      (cond ((null? //agenda)
                             (set! //o/k 1)
                             (set! /fl_flag2 1))
                            (#t
                             (@goto (let ((name (let ((name //agenda))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))
                             (set! //v
                               (let ((name (let ((name //agenda))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 2 1))
                                   (list-ref name (- 2 1)))))
                             (set! //agenda (cdr //agenda))
                             (set! /fl_flag2 0))))
                     ((and (@right?)
                           (@is_proper?)
                           (not (= (@st (@i)) //t_/call)))
                      (@right)
                      (set! /fl_flag2 0))
                     (#t
                      (set! //posn_/list (@next_stats))
                      (cond ((member (- 2) //posn_/list)
                             (set! //o/k 0)
                             (set! /fl_flag2 1))
                            ((member (- 1) //posn_/list)
                             (cond ((or (= //end_/o/k 0)
                                        (>= //call_/depth //max_/call_/depth))
                                    (set! //o/k 0)
                                    (set! /fl_flag2 1))
                                   (#t
                                    (set! //posn_/list
                                      (@set_difference
                                        (@make_set //posn_/list)
                                        (list (- 1))))
                                    (set! /fl_flag2 0))))
                            (#t (set! /fl_flag2 0)))
                      (cond ((= /fl_flag2 0)
                             (cond ((null? //posn_/list)
                                    (cond ((null? //agenda)
                                           (set! //o/k 1)
                                           (set! /fl_flag2 1))
                                          (#t
                                           (@goto (let ((name (let ((name //agenda))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 1 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 1 1))))))
                                                    (if (vector? name)
                                                      (vector-ref name (- 1 1))
                                                      (list-ref name (- 1 1)))))
                                           (set! //v
                                             (let ((name (let ((name //agenda))
                                                           (if (vector? name)
                                                             (vector-ref
                                                               name
                                                               (- 1 1))
                                                             (list-ref
                                                               name
                                                               (- 1 1))))))
                                               (if (vector? name)
                                                 (vector-ref name (- 2 1))
                                                 (list-ref name (- 2 1)))))
                                           (set! //agenda (cdr //agenda))
                                           (set! /fl_flag2 0))))
                                   (#t
                                    (@goto (car //posn_/list))
                                    (set! //posn_/list (cdr //posn_/list))
                                    (cond ((and (> (if (vector? (@posn))
                                                     (vector-length (@posn))
                                                     (length (@posn)))
                                                   1)
                                                (= (@posn_n) 1))
                                           (cond ((= (@st (@gparent))
                                                     //t_/while)
                                                  (cond ((@elt_clash_list?
                                                           (@elts_used
                                                             (list-ref
                                                               (@gparent)
                                                               (+ 1 1)))
                                                           //v)
                                                         (set! //v '())
                                                         (set! //o/k 0)
                                                         (set! /fl_flag2 1))
                                                        (#t
                                                         (set! /fl_flag2 0))))
                                                 (#t (set! /fl_flag2 0))))
                                          (#t (set! /fl_flag2 0)))
                                    (cond ((= /fl_flag2 0)
                                           (let while-loop ()
                                             (cond ((not (null? //posn_/list))
                                                    (begin
                                                      (set! //agenda
                                                        (@drs_put
                                                          //agenda
                                                          (car //posn_/list)
                                                          //v))
                                                      (set! //posn_/list
                                                        (cdr //posn_/list)))
                                                    (while-loop))
                                                   (#t #t)))
                                           (set! /fl_flag2 0)))))))))
               (cond ((= /fl_flag2 0)
                      (set! /fl_flag1 0)
                      (let while-loop ()
                        (cond ((= /fl_flag1 0)
                               (begin
                                 (let ((/-result-
                                         (@drs_process //v //o/k //agenda)))
                                   (set! //v (car /-result-))
                                   (set! /-result- (cdr /-result-))
                                   (set! //o/k (car /-result-))
                                   (set! /-result- (cdr /-result-))
                                   (set! //agenda (car /-result-))
                                   (set! /-result- (cdr /-result-)))
                                 (cond ((not (null? //v)) (set! /fl_flag1 1))
                                       ((= //o/k 0) (set! /fl_flag1 2))
                                       ((null? //agenda)
                                        (set! //o/k 1)
                                        (set! /fl_flag1 2))
                                       (#t
                                        (set! /loops (+ /loops 1))
                                        (cond ((> /loops 100)
                                               (begin
                                                 (display "-")
                                                 (force-output))
                                               (set! //o/k 0)
                                               (set! /fl_flag1 2))
                                              (#t
                                               (@goto (let ((name (let ((name //agenda))
                                                                    (if (vector?
                                                                          name)
                                                                      (vector-ref
                                                                        name
                                                                        (- 1 1))
                                                                      (list-ref
                                                                        name
                                                                        (- 1
                                                                           1))))))
                                                        (if (vector? name)
                                                          (vector-ref
                                                            name
                                                            (- 1 1))
                                                          (list-ref
                                                            name
                                                            (- 1 1)))))
                                               (set! //v
                                                 (let ((name (let ((name //agenda))
                                                               (if (vector?
                                                                     name)
                                                                 (vector-ref
                                                                   name
                                                                   (- 1 1))
                                                                 (list-ref
                                                                   name
                                                                   (- 1 1))))))
                                                   (if (vector? name)
                                                     (vector-ref name (- 2 1))
                                                     (list-ref name (- 2 1)))))
                                               (set! //agenda (cdr //agenda))
                                               (set! /fl_flag1 0))))))
                               (while-loop))
                              (#t #t)))
                      (cond ((= /fl_flag1 2) (set! /fl_flag2 1))
                            (#t (set! /fl_flag2 0))))))
             (while-loop))
            (#t #t)))
    (set! funct-result (= //o/k 1))
    (set! //v //v-save)
    (set! //o/k //o/k-save)
    (set! //done_/list //done_/list-save)
    (set! //agenda //agenda-save)
    (set! //call_/depth //call_/depth-save)
    (set! //max_/call_/depth //max_/call_/depth-save)
    (set! /accs /accs-save)
    (set! /sysmacs /sysmacs-save)
    (set! /regs /regs-save)
    (set! /cc_name /cc_name-save)
    funct-result))

(define (@drs_process //v-par //o/k-par //agenda-par)
  (let ((//agenda-save //agenda)
        (//o/k-save //o/k)
        (//v-save //v)
        (funct-result '()))
    (set! //agenda //agenda-par)
    (set! //o/k //o/k-par)
    (set! //v //v-par)
    (let ((//s/t (@spec_type (@i))) (/calls_ok 0))
      (cond ((@join_point?)
             (cond ((null? (@set_difference
                             //v
                             (@drs_get //done_/list (@posn))))
                    (set! //v '())
                    (set! //o/k 1))
                   (#t
                    (set! //done_/list
                      (@drs_put //done_/list (@posn) //v))))))
      (cond ((not (null? //v))
             (cond ((@set_subset?
                      (@make_set
                        (let ((l (@a_proc_calls (@i))) (map-result '()))
                          (let while-loop ()
                            (cond ((not (null? l))
                                   (set! map-result
                                     (cons (car (car l)) map-result))
                                   (set! l (cdr l))
                                   (while-loop))
                                  (#t #t)))
                          (reverse map-result)))
                      /sysmacs)
                    (set! /calls_ok 1)))
             (cond ((and (= /calls_ok 0)
                         (member //t_/a_/proc_/call (@stat_types (@i)))
                         (member /regs (@assigned (@i)))
                         (not (null? (@set_intersect
                                       (@make_set
                                         (let ((l //v) (map-result '()))
                                           (let while-loop ()
                                             (cond ((not (null? l))
                                                    (set! map-result
                                                      (cons (car (car l))
                                                            map-result))
                                                    (set! l (cdr l))
                                                    (while-loop))
                                                   (#t #t)))
                                           (reverse map-result)))
                                       (@set_difference
                                         /accs
                                         (list /cc_name))))))
                    (set! //v '())
                    (set! //o/k 0))
                   ((and (= /calls_ok 0)
                         (member //t_/a_/proc_/call (@stat_types (@i)))
                         (not (null? //a_/proc_/call_/filter))
                         (member /os_name (@assigned (@i)))
                         (not (null? (@set_difference
                                       //v
                                       //a_/proc_/call_/filter))))
                    (set! //v '())
                    (set! //o/k 0))
                   ((and (= /calls_ok 0)
                         (member //t_/a_/proc_/call (@stat_types (@i)))
                         (null? //a_/proc_/call_/filter)
                         (member /os_name (@assigned (@i))))
                    (set! //v '())
                    (set! //o/k 0))
                   ((and (= (@st (@i)) //t_/a_/proc_/call)
                         (member (@v (list-ref (@i) (+ 1 1))) /sysmacs))
                    (cond ((@elt_clash_list?
                             (@set_difference
                               (@elts_uba (@i))
                               (@elts_assd_to_self (@i)))
                             //v)
                           (set! //v '())
                           (set! //o/k 0))
                          (#t
                           (set! //v
                             (@set_difference //v (@elts_redefined (@i)))))))
                   ((and (@is_proper?)
                         (null? (@set_intersect
                                  (@stat_types (@i))
                                  //call_/types_/set)))
                    (cond ((@elt_clash_list?
                             (@set_difference
                               (@elts_uba (@i))
                               (@elts_assd_to_self (@i)))
                             //v)
                           (set! //v '())
                           (set! //o/k 0))
                          (#t
                           (set! //v
                             (@set_difference //v (@elts_redefined (@i))))
                           (cond ((and (= (@st (@i)) //t_/assignment)
                                       (@elt_clash_list? (@elts_addr (@i)) //v))
                                  (set! //v
                                    (@set_union //v (@elts_assigned (@i))))))
                           (cond ((null? //v) (set! //o/k 1))))))
                   ((= //s/t //t_/exit)
                    (let ((/n (@value (@i))))
                      (let while-loop ()
                        (cond ((and (> /n 0) (@up?))
                               (begin
                                 (@up)
                                 (cond ((= (@spec_type (@i)) //t_/floop)
                                        (set! /n (- /n 1)))))
                               (while-loop))
                              (#t #t)))
                      (cond ((> /n 0) (set! //v '()) (set! //o/k 0)))))
                   ((or (= //s/t //t_/call)
                        (= //s/t //t_/skip)
                        (= //s/t //t_/comment)))
                   ((and (= //s/t //t_/proc_/call)
                         (= //d/r/s_/globals_/to_/pars_/done 1))
                    (cond ((member (list /os_name) (@elements (@i)))
                           (set! //v '())
                           (set! //o/k 0))
                          ((@elt_clash_list? (@elements (@i)) //v)
                           (set! //v '())
                           (set! //o/k 0))))
                   ((member //s/t //call_/types_/set)
                    (set! //v '())
                    (set! //o/k 0))
                   ((and (not (member //t_/proc_/call (@stat_types (@i))))
                         (@elt_clash_list? (@elts_uba (@i)) //v))
                    (set! //v '())
                    (set! //o/k 0))
                   (#t
                    (let ((/-result-
                            (@drs_process_comps //s/t //v //o/k //agenda)))
                      (set! //v (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //o/k (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //agenda (car /-result-))
                      (set! /-result- (cdr /-result-))))))))
    (set! funct-result (list //v //o/k //agenda))
    (set! //agenda //agenda-save)
    (set! //o/k //o/k-save)
    (set! //v //v-save)
    funct-result))

(define (@drs_process_comps
         //s/t
         //v-par
         //o/k-par
         //agenda-par)
  (let ((//agenda-save //agenda)
        (//o/k-save //o/k)
        (//v-save //v)
        (funct-result '()))
    (set! //agenda //agenda-par)
    (set! //o/k //o/k-par)
    (set! //v //v-par)
    (cond ((or (= //s/t //t_/cond)
               (= //s/t //t_/d_/if)
               (= //s/t //t_/d_/do))
           (@down_last)
           (set! //agenda
             (cons (list (concat (@posn) (list 2 1)) //v)
                   //agenda))
           (let while-loop ()
             (cond ((and (@left?)
                         (not (@elt_clash_list?
                                (@elements (list-ref (@i) (+ 1 1)))
                                //v)))
                    (begin
                      (@left)
                      (set! //agenda
                        (cons (list (concat (@posn) (list 2 1)) //v)
                              //agenda)))
                    (while-loop))
                   (#t #t)))
           (cond ((@elt_clash_list?
                    (@elements (list-ref (@i) (+ 1 1)))
                    //v)
                  (set! //v '())
                  (set! //o/k 0)))
           (@up)
           (cond ((and (not (= //s/t //t_/d_/do)) (= //o/k 1))
                  (set! //v '()))))
          ((= //s/t //t_/a_/s)
           (let ((/start (@value (list-ref (@i) (+ 1 1)))))
             (@down_last)
             (@down)
             (let while-loop ()
               (cond ((and (not (equal?
                                  (@value (list-ref (@i) (+ 1 1)))
                                  /start))
                           (@right?))
                      (@right)
                      (while-loop))
                     (#t #t)))
             (set! //agenda
               (cons (list (concat (@posn) (list 2 1)) //v)
                     //agenda))
             (set! //v '())
             (set! //o/k 1)))
          ((= //s/t //t_/for)
           (cond ((equal?
                    //v
                    (list (list (@v (list-ref (@i) (+ 1 1)))))))
                 ((or (@elt_clash_list?
                        (@elements (list-ref (@i) (+ 1 4)))
                        //v)
                      (@elt_clash_list?
                        (@elements (list-ref (@i) (+ 1 3)))
                        //v)
                      (@elt_clash_list?
                        (@elements (list-ref (@i) (+ 1 2)))
                        //v))
                  (set! //v '())
                  (set! //o/k 0))
                 (#t
                  (set! //agenda
                    (cons (list (concat (@posn) (list 5 1))
                                (@set_difference
                                  //v
                                  (list (list (@v (list-ref (@i) (+ 1 1)))))))
                          //agenda)))))
          ((= //s/t //t_/var)
           (cond ((not (null? (@set_difference
                                //v
                                (@lvars (list-ref (@i) (+ 1 1))))))
                  (set! //agenda
                    (cons (list (concat (@posn) (list 2 1))
                                (@set_difference
                                  //v
                                  (@elt_lvars (list-ref (@i) (+ 1 1)))))
                          //agenda)))))
          ((= //s/t //t_/floop)
           (set! //agenda
             (cons (list (concat (@posn) (list 1 1)) //v)
                   //agenda))
           (set! //v '())
           (set! //o/k 1))
          ((= //s/t //t_/where)
           (set! //agenda
             (cons (list (concat (@posn) (list 1 1)) //v)
                   //agenda))
           (set! //v '())
           (set! //o/k 1))
          ((= //s/t //t_/while)
           (cond ((@elt_clash_list?
                    (@elements (list-ref (@i) (+ 1 1)))
                    //v)
                  (set! //v '())
                  (set! //o/k 0))
                 (#t
                  (set! //agenda
                    (cons (list (concat (@posn) (list 2 1)) //v)
                          //agenda)))))
          (#t (set! //v '()) (set! //o/k 0)))
    (set! funct-result (list //v //o/k //agenda))
    (set! //agenda //agenda-save)
    (set! //o/k //o/k-save)
    (set! //v //v-save)
    funct-result))

(define (@drs_get //l //p)
  (let ((//v '()))
    (let while-loop ()
      (cond ((not (null? //l))
             (cond ((equal?
                      (let ((name (let ((name //l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 1 1))
                          (list-ref name (- 1 1))))
                      //p)
                    (set! //v
                      (let ((name (let ((name //l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 2 1))
                          (list-ref name (- 2 1)))))
                    (set! //l '()))
                   (#t (set! //l (cdr //l))))
             (while-loop))
            (#t #t)))
    //v))

(define (@drs_put //l //p //v-par)
  (let ((//v-save //v) (//r '()) (funct-result '()))
    (set! //v //v-par)
    (let while-loop ()
      (cond ((not (null? //l))
             (cond ((equal?
                      (let ((name (let ((name //l))
                                    (if (vector? name)
                                      (vector-ref name (- 1 1))
                                      (list-ref name (- 1 1))))))
                        (if (vector? name)
                          (vector-ref name (- 1 1))
                          (list-ref name (- 1 1))))
                      //p)
                    (cond ((@set_subset?
                             //v
                             (let ((name (let ((name //l))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1))))))
                               (if (vector? name)
                                 (vector-ref name (- 2 1))
                                 (list-ref name (- 2 1)))))
                           (set! //r (concat (reverse //l) //r)))
                          (#t
                           (set! //r
                             (concat
                               (concat
                                 (reverse (cdr //l))
                                 (list (list //p //v)))
                               //r))))
                    (set! //l '())
                    (set! //v '()))
                   (#t
                    (set! //r (cons (car //l) //r))
                    (set! //l (cdr //l))))
             (while-loop))
            (#t #t)))
    (cond ((not (null? //v))
           (set! //r (cons (list //p //v) //r))))
    (set! funct-result //r)
    (set! //v //v-save)
    funct-result))

(set! //join_/types1
  (@make_set
    (list //t_/cond //t_/d_/if //t_/d_/do //t_/floop)))

(set! //join_/types2
  (@make_set
    (list //t_/floop //t_/while //t_/for //t_/d_/do)))

(define (@join_point?)
  (let ((//j/p 0))
    (cond ((not (@up?)) (set! //j/p 0))
          (#t
           (cond ((@left?)
                  (@left)
                  (cond ((not (null? (@set_intersect
                                       (@stat_types (@i))
                                       //join_/types1)))
                         (set! //j/p 1))
                        (#t (set! //j/p 0)))
                  (@right))
                 (#t
                  (let ((/orig_posn (@posn)))
                    (@up)
                    (let while-loop ()
                      (cond ((and (@up?)
                                  (not (= (@gt (@i)) //t_/statement))
                                  (not (= (@gt (@i)) //t_/action)))
                             (@up)
                             (while-loop))
                            (#t #t)))
                    (cond ((= (@gt (@i)) //t_/action) (set! //j/p 1))
                          ((member (@spec_type (@i)) //join_/types2)
                           (set! //j/p 1))
                          (#t (set! //j/p 0)))
                    (@goto /orig_posn))))))
    (= //j/p 1)))

(define (@next_stats)
  (let ((//p/l '()))
    (cond ((= (@spec_type (@i)) //t_/call)
           (cond ((>= //call_/depth //max_/call_/depth)
                  (set! //p/l (list (- 1))))
                 (#t
                  (set! //call_/depth (+ //call_/depth 1))
                  (let ((/name (@value (@i))))
                    (let while-loop ()
                      (cond ((and (@up?)
                                  (not (= (@spec_type (@i)) //t_/a_/s)))
                             (@up)
                             (while-loop))
                            (#t #t)))
                    (cond ((not (= (@spec_type (@i)) //t_/a_/s))
                           (set! //p/l (list (- 1))))
                          (#t
                           (cond ((equal? /name (@make_name "Z"))
                                  (set! //p/l (@next_stats)))
                                 ((equal? /name (@make_name "dispatch"))
                                  (set! //p/l (list (- 2))))
                                 (#t
                                  (@down_last)
                                  (@down)
                                  (let while-loop ()
                                    (cond ((and (@right?)
                                                (not (equal?
                                                       (@value
                                                         (list-ref
                                                           (@i)
                                                           (+ 1 1)))
                                                       /name)))
                                           (@right)
                                           (while-loop))
                                          (#t #t)))
                                  (cond ((not (equal?
                                                (@v (list-ref (@i) (+ 1 1)))
                                                /name))
                                         (set! //p/l (list (- 1))))
                                        (#t
                                         (set! //p/l
                                           (list (concat
                                                   (@posn)
                                                   (list 2 1))))))))))))))
          ((@right?) (@right) (set! //p/l (list (@posn))))
          ((not (@up?)) (set! //p/l (list (- 1))))
          (#t
           (@up)
           (let while-loop ()
             (cond ((and (and (not (= (@gt (@i)) //t_/statement))
                              (not (= (@gt (@i)) //t_/action))
                              (not (= (@gt (@i)) //t_/definition)))
                         (@up?))
                    (@up)
                    (while-loop))
                   (#t #t)))
           (cond ((= (@gt (@i)) //t_/definition)
                  (set! //p/l (list (- 2))))
                 ((= (@gt (@i)) //t_/action)
                  (set! //p/l (list (- 2))))
                 ((or (not (= (@gt (@i)) //t_/statement))
                      (not (@up?)))
                  (set! //p/l (list (- 1))))
                 (#t
                  (cond ((= (@spec_type (@i)) //t_/floop)
                         (set! //p/l (list (concat (@posn) (list 1 1)))))
                        (#t
                         (cond ((= (@spec_type (@i)) //t_/while)
                                (set! //p/l (list (concat (@posn) (list 2 1)))))
                               ((= (@spec_type (@i)) //t_/for)
                                (set! //p/l (list (concat (@posn) (list 5 1)))))
                               ((= (@spec_type (@i)) //t_/d_/do)
                                (@down)
                                (set! //p/l (list (concat (@posn) (list 2 1))))
                                (let while-loop ()
                                  (cond ((@right?)
                                         (begin
                                           (@right)
                                           (set! //p/l
                                             (list (concat
                                                     (@posn)
                                                     (list 2 1)))))
                                         (while-loop))
                                        (#t #t)))
                                (@up)))
                         (set! //p/l (concat //p/l (@next_stats)))))))))
    //p/l))

