(define (/foreach-absorb_left-1 //depth //a/s_/type)
  (let ((var-save /assign) (seq-save /assigns))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /assign (car for-tmp))
             (cond ((@lr_equal? (@i) (list-ref /assign (+ 1 1)))
                    (@paste_over (list-ref /assign (+ 1 2)))))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /assign var-save)))

(define (/foreach-absorb_left-2 //depth //a/s_/type)
  (cond ((@cs? (@i)) (@paste_over (@simplify_expn (@i))))))

(define (/foreach-absorb_left-3 //depth //a/s_/type)
  (cond ((not (= (@st (@i)) //t_/call)) #t)
        ((or (equal? (@v (@i)) /z_name)
             (equal? (@v (@i)) /dispatch))
         #t)
        ((not (@left?)) (puthash /bad (@v (@i)) 1))
        ((null? (gethash /bad (@v (@i))))
         (set! /name (@v (@i)))
         (set! /posn_n (@posn_n))
         (@left)
         (let while-loop ()
           (cond ((and (= (@st (@i)) //t_/comment) (@left?))
                  (@left)
                  (while-loop))
                 (#t #t)))
         (cond ((= (@st (@i)) //t_/comment)
                (puthash /bad /name 1))
               ((= (@st (@i)) //t_/assignment)
                (puthash /bad /name 1))
               ((null? (gethash /stat /name))
                (puthash /stat /name (@i)))
               ((not (@equal? (gethash /stat /name) (@i)))
                (puthash /bad /name 1)))
         (@to /posn_n))))

(define (/foreach-absorb_left-4 //depth //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/call)
              (equal? (@v (@i)) /name))
         (@left)
         (let while-loop ()
           (cond ((and (= (@st (@i)) //t_/comment) (@left?))
                  (@left)
                  (while-loop))
                 (#t #t)))
         (cond ((@equal? (@i) (gethash /stat /name))
                (@paste_over (@skip)))
               (#t
                (error "@Absorb_Left_A_S statement does not match!")))
         (@to_last))))

(define (@absorb_left_test)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (cond ((not (= (@gt (@i)) //t_/statement))
         (@fail "The selected item is not a Statement."))
        ((= (@st (@i)) //t_/a_/s) (@absorb_left_a_s 0))
        ((not (@left?))
         (@fail "There is no statement to the left of this one."))
        ((= (@st (@i)) //t_/assignment)
         (@absorb_left_test_assignment))
        ((= (@st (@i)) //t_/for) (@absorb_left_test_for))
        ((= (@st (@i)) //t_/var) (@absorb_left_test_var))
        ((= (@st (@i)) //t_/where)
         (@absorb_left_test_where))
        ((= (@st (@i)) //t_/while)
         (@absorb_left_test_while))
        ((or (= (@st (@i)) //t_/cond)
             (= (@st (@i)) //t_/d_/if))
         (@absorb_left_test_cond))
        ((= (@st (@i)) //t_/floop)
         (@absorb_left_test_floop))
        (#t
         (@fail "The selected statement must be of a suitable type."))))

(define (@absorb_left_test_assignment)
  (let ((//c1 '())
        (//c2 '())
        (//assns '())
        (//new '())
        (//u '())
        (//v '()))
    (@left)
    (cond ((not (= (@st (@i)) //t_/assignment))
           (@fail "Can only absorb another assignment into an assignment"))
          (#t
           (set! //c1 (@components (@i)))
           (set! //u (@elts_assigned (@i)))
           (@right)
           (set! //v (@elts_assigned (@i)))
           (cond ((@elt_clash_list? //u (@set_difference //v //u))
                  (@fail "Second assignment updates part of first"))
                 (#t
                  (@edit)
                  (@absorb_left_fix_vars //c1)
                  (set! //v (@elts_assigned (@i)))
                  (let ((var-save //i) (seq-save //c1))
                    (if (vector? seq-save)
                      (set! seq-save (vector-elts seq-save)))
                    (let for-in-loop ((for-tmp seq-save))
                      (cond ((not (null? for-tmp))
                             (set! //i (car for-tmp))
                             (cond ((not (@set_subset?
                                           (@elts_assigned
                                             (list-ref //i (+ 1 1)))
                                           //v))
                                    (cond ((@elt_clash_list?
                                             (@elts_assigned
                                               (list-ref //i (+ 1 1)))
                                             //v)
                                           (@fail "The two assignments clash")))
                                    (set! //new (cons //i //new))))
                             (for-in-loop (cdr for-tmp)))
                            (#t #t)))
                    (set! //i var-save))
                  (@down_last)
                  (cond ((not (null? //new)) (@splice_after //new)))
                  (@up)
                  (set! //c2 (@components (@i)))
                  (set! //assns (@elts_assigned (@i)))
                  (let ((var-save //i) (seq-save //c2))
                    (if (vector? seq-save)
                      (set! seq-save (vector-elts seq-save)))
                    (let for-in-loop ((for-tmp seq-save))
                      (cond ((not (null? for-tmp))
                             (set! //i (car for-tmp))
                             (begin
                               (set! //u (@elts_used //i))
                               (set! //v (@elts_assigned //i))
                               (cond ((not (null? (@set_intersect
                                                    //assns
                                                    (@set_difference //u //v))))
                                      (@fail "Variable would be simultaneously used and assigned"))))
                             (for-in-loop (cdr for-tmp)))
                            (#t #t)))
                    (set! //i var-save))
                  (cond ((not (@failed?)) (@pass)))
                  (@undo_edit)))))))

(define (@absorb_left_test_for)
  (@left)
  (cond ((not (@is_proper?))
         (@fail "Cannot absorb a non-proper statement into a simple statement"))
        ((or (not (null? (@set_intersect (@assigned (@i)) (@used (@i)))))
             (not (null? (@set_intersect
                           (@stat_types (@i))
                           //call_/types_/set))))
         (@fail "A statement cannot be absorbed into a `For' if it could assign to variables it uses."))
        (#t
         (let ((//v (@variables (@i))))
           (@right)
           (cond ((= (@st (@i)) //t_/for)
                  (let ((//l (@v (list-ref (@i) (+ 1 1))))
                        (//e1 (list-ref (@i) (+ 1 2)))
                        (//e2 (list-ref (@i) (+ 1 3)))
                        (//e3 (list-ref (@i) (+ 1 4)))
                        (//s (@cs (list-ref (@i) (+ 1 5)))))
                    (cond ((or (not (null? (@set_intersect
                                             //v
                                             (@variables (@i)))))
                               (member //l //v))
                           (@fail "The loop used the same variables as the other statement."))
                          ((not (or (and (@true?
                                           (@make 315
                                                  '()
                                                  (list (@var_to_expn //e3)
                                                        (@make 205 0 '()))))
                                         (@true?
                                           (@make 317
                                                  '()
                                                  (list (@var_to_expn //e2)
                                                        (@var_to_expn //e1)))))
                                    (and (@true?
                                           (@make 314
                                                  '()
                                                  (list (@var_to_expn //e3)
                                                        (@make 205 0 '()))))
                                         (@true?
                                           (@make 316
                                                  '()
                                                  (list (@var_to_expn //e2)
                                                        (@var_to_expn
                                                          //e1)))))))
                           (@fail "The loop won't definitely execute."))
                          (#t (@pass))))))))))

(define (@absorb_left_test_var)
  (let ((//local (@assigned (list-ref (@i) (+ 1 1))))
        (//v (@variables (list-ref (@i) (+ 1 1)))))
    (@left)
    (cond ((not (@is_proper?))
           (@fail "Cannot absorb a non-proper statement into a simple statement"))
          ((= (@st (@i)) //t_/proc_/call)
           (let ((/vars //local) (/posn (@posn)))
             (let while-loop ()
               (cond ((and (@up?) (not (= (@st (@i)) //t_/where)))
                      (@up)
                      (while-loop))
                     (#t #t)))
             (cond ((= (@st (@i)) //t_/where)
                    (set! /vars (@all_variables (@i)))))
             (@goto /posn)
             (cond ((not (null? (@set_intersect //local /vars)))
                    (@fail "The proc call being absorbed could use some of the local variables."))
                   (#t (@pass)))))
          ((or (not (null? (@set_intersect //local (@variables (@i)))))
               (not (null? (@set_intersect
                             (@stat_types (@i))
                             //call_/types_/set))))
           (@fail "The statement being absorbed could use some of the local variables."))
          ((and (not (= (@st (@i)) //t_/assignment))
                (not (null? (@set_intersect //v (@assigned (@i))))))
           (@fail "Some of the assigning variables are changed by the statement being absorbed."))
          (#t (@pass)))))

(define (@absorb_left_test_where)
  (let ((//d (@make_set
               (let ((l (@cs (list-ref (@i) (+ 1 2))))
                     (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result (cons (@v1 (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result)))))
    (@left)
    (cond ((not (null? (@set_intersect
                         //d
                         (@make_set
                           (concat
                             (let ((l (@proc_calls (@i))) (map-result '()))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! map-result
                                          (cons (car (car l)) map-result))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               (reverse map-result))
                             (let ((l (@funct_calls (@i))) (map-result '()))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! map-result
                                          (cons (car (car l)) map-result))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               (reverse map-result)))))))
           (@fail "The statement being absorbed uses some of the definitions."))
          (#t (@pass)))))

(define (@absorb_left_test_while)
  (@left)
  (cond ((not (@is_proper?))
         (@fail "Cannot absorb a non-proper statement into a simple statement"))
        ((or (not (null? (@set_intersect (@assigned (@i)) (@used (@i)))))
             (not (null? (@set_intersect
                           (@stat_types (@i))
                           //call_/types_/set))))
         (@fail "A statement cannot be absorbed into a `While' if it could assign to variables it uses."))
        (#t
         (let ((//v (@variables (@i)))
               (//a (@assigned (@i)))
               (//b '()))
           (@right)
           (set! //b (list-ref (@i) (+ 1 1)))
           (cond ((not (null? (@set_intersect //v (@variables (@i)))))
                  (@fail "The loop used the same variables as the other statement."))
                 ((or (<= (@posn_n) 2)
                      (not (= (@st (list-ref (@parent) (+ 1 (- (@posn_n) 2))))
                              //t_/assert)))
                  (@fail "There is no assertion before the loop."))
                 (#t
                  (@left)
                  (@left)
                  (cond ((not (@implies? (list-ref (@i) (+ 1 1)) //b))
                         (@fail "The assertion does not imply that the loop executes."))
                        ((not (null? (@set_intersect //a (@variables (@i)))))
                         (@fail "The assertion could be changed by the statement being absorbed."))
                        (#t (@pass)))))))))

(define (@absorb_left_test_cond)
  (@left)
  (cond ((= (@st (@i)) //t_/assignment) (@pass))
        ((not (null? (@set_intersect
                       (@stat_types (@i))
                       //call_/types_/set)))
         (@fail "The statement may affect the conditions."))
        (#t
         (let ((//a (@assigned (@i))))
           (@right)
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (cond ((not (null? (@set_intersect
                                         (@variables (list-ref (@i) (+ 1 1)))
                                         //a)))
                           (@fail "The variables in the statement affect the conditions.")
                           (set! /fl_flag1 1))
                          ((@right?) (@right) (set! /fl_flag1 0))
                          (#t (@pass) (set! /fl_flag1 1)))
                    (while-loop))
                   (#t #t)))))))

(define (@absorb_left_test_floop)
  (let ((//i-save //i))
    (set! //i
      (@increment
        (list-ref (@parent) (+ 1 (- (@posn_n) 1)))
        (@as_type)
        1
        1))
    (cond ((and (= (if (vector? //i)
                     (vector-length //i)
                     (length //i))
                   1)
                (@equal?
                  (last-1 (@cs (list-ref (@i) (+ 1 1))))
                  (car //i)))
           (@pass))
          (#t
           (@fail "The statement to the left doesn't match the end of the body.")))
    (set! //i //i-save)))

(define (@absorb_left_code //data)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (let ((//c '()))
    (cond ((= (@st (@i)) //t_/assignment)
           (@absorb_left_code_assignment))
          ((member (@st (@i)) (list //t_/for //t_/while))
           (@left)
           (@cut)
           (@down_last)
           (@down)
           (@paste_before (@buffer))
           (@up)
           (@up))
          ((= (@st (@i)) //t_/where)
           (@left)
           (@cut)
           (@down)
           (@down)
           (@paste_before (@buffer))
           (@up)
           (@up))
          ((= (@st (@i)) //t_/var)
           (@left)
           (cond ((= (@st (@i)) //t_/assignment)
                  (set! //c (@cs (@i)))))
           (@cut)
           (@down_last)
           (@down)
           (@paste_before (@buffer))
           (@up)
           (@left)
           (cond ((not (null? //c)) (@absorb_left_fix_vars //c)))
           (@up))
          ((= (@st (@i)) //t_/floop)
           (@left)
           (@delete)
           (@down)
           (@down)
           (@paste_before (last-1 (@cs (@parent))))
           (@to_last)
           (@delete)
           (@up)
           (@up))
          ((= (@st (@i)) //t_/a_/s) (@absorb_left_a_s 1))
          (#t
           (@left)
           (cond ((= (@st (@i)) //t_/assignment)
                  (set! //c (@cs (@i)))))
           (@cut)
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (@down_last)
                      (@down)
                      (cond ((and (= (@st (@buffer)) //t_/assignment)
                                  (= (@st (@i)) //t_/assignment)
                                  (= (@size (@buffer)) 1)
                                  (= (@size (@i)) 1)
                                  (@equal?
                                    (list-ref
                                      (list-ref (@buffer) (+ 1 1))
                                      (+ 1 1))
                                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))))
                             (@paste_before (@buffer))
                             (cond ((@trans? //t/r_/absorb_/right)
                                    (@trans //t/r_/absorb_/right ""))))
                            (#t (@paste_before (@buffer))))
                      (@up)
                      (@left)
                      (cond ((not (null? //c)) (@absorb_left_fix_vars //c)))
                      (@up)
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t)))
           (@up)))))

(define (@absorb_left_fix_vars /assigns-par)
  (let ((/assigns-save /assigns))
    (set! /assigns /assigns-par)
    (@foreach_expn
      /foreach-absorb_left-1
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@foreach_expn
      /foreach-absorb_left-2
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! /assigns /assigns-save)))

(define (@absorb_left_code_assignment)
  (let ((//c1 '()) (//v '()) (//new '()))
    (@left)
    (set! //c1 (@cs (@i)))
    (@right)
    (@absorb_left_fix_vars //c1)
    (set! //v (@assigned (@i)))
    (let ((var-save //i) (seq-save //c1))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! //i (car for-tmp))
               (cond ((not (member (@value (list-ref //i (+ 1 1))) //v))
                      (set! //new (cons //i //new))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! //i var-save))
    (@down_last)
    (cond ((not (null? //new)) (@splice_after //new)))
    (@up)
    (@left)
    (@delete)))

(define (@absorb_left_a_s /doit)
  (let ((/bad-save /bad)
        (/stat-save /stat)
        (/name-save /name)
        (/posn_n-save /posn_n)
        (/z_name-save /z_name)
        (/dispatch-save /dispatch))
    (set! /bad (my-make-hash-table 16))
    (set! /stat (my-make-hash-table 16))
    (set! /name '())
    (set! /posn_n '())
    (set! /z_name (@make_name "Z"))
    (set! /dispatch (@make_name "dispatch"))
    (@ateach_statement
      /foreach-absorb_left-3
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (let ((var-save /name) (seq-save (@hash_keys /stat)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /name (car for-tmp))
               (begin
                 (begin
                   (display "======= ")
                   (begin
                     (display (@n_string /name))
                     (begin
                       (display " = ")
                       (begin
                         (display (gethash /bad /name))
                         (newline)
                         (force-output)))))
                 (cond ((and (null? (gethash /bad /name))
                             (not (null? (gethash /stat /name))))
                        (@pass)
                        (cond ((= /doit 1)
                               (set! /doit 0)
                               (@absorb_left_a_s_sub /name /bad /stat))))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /name var-save))
    (cond ((not (@passed?))
           (@fail "No sutable action to absorb left into")))
    (set! /bad /bad-save)
    (set! /stat /stat-save)
    (set! /name /name-save)
    (set! /posn_n /posn_n-save)
    (set! /z_name /z_name-save)
    (set! /dispatch /dispatch-save)))

(define (@absorb_left_a_s_sub
         /name-par
         /bad-par
         /stat-par)
  (let ((/stat-save /stat)
        (/bad-save /bad)
        (/name-save /name))
    (set! /stat /stat-par)
    (set! /bad /bad-par)
    (set! /name /name-par)
    (@ateach_statement
      /foreach-absorb_left-4
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@down_to 2)
    (@down)
    (let while-loop ()
      (cond ((and (@right?)
                  (not (equal? /name (@v (list-ref (@i) (+ 1 1))))))
             (@right)
             (while-loop))
            (#t #t)))
    (cond ((equal? /name (@v (list-ref (@i) (+ 1 1))))
           (@down_to 2)
           (@down)
           (@paste_before (gethash /stat /name))
           (@up)
           (@up)))
    (@up)
    (@up)
    (set! /stat /stat-save)
    (set! /bad /bad-save)
    (set! /name /name-save)))

#t

