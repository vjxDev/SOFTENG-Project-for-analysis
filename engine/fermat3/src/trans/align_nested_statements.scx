(define (@align_nested_statements_test)
  (cond ((not (= (@gt (@i)) //t_/guarded))
         (@fail "The current item is not a guarded clause."))
        (#t
         (@down_last)
         (@down)
         (let while-loop ()
           (cond ((and (or (not (= //t_/cond (@st (@i))))
                           (> (@size (@i)) 60))
                       (= //t_/comment (@st (@i)))
                       (@right?))
                  (@right)
                  (while-loop))
                 (#t #t)))
         (cond ((and (= //t_/cond (@st (@i)))
                     (<= (@size (@i)) 60))
                (@pass)))
         (cond ((not (@passed?))
                (@fail "The first statement in the clause is not an `If'."))))))

(define (@align_nested_statements_code //data)
  (let ((//b (list-ref (@i) (+ 1 1)))
        (/comments '())
        (/rest '())
        (/new '())
        (//a/s (@as_type)))
    (@edit)
    (@down_last)
    (@down)
    (let while-loop ()
      (cond ((= (@st (@i)) //t_/comment)
             (begin
               (set! /comments (cons (@i) /comments))
               (@delete))
             (while-loop))
            (#t #t)))
    (cond ((not (= (@st (@i)) //t_/cond))
           (begin
             (display "ERROR in Align_Nested_Statements!!!")
             (newline)
             (force-output))))
    (@up)
    (set! /comments (reverse /comments))
    (set! /rest (cdr (@cs (@i))))
    (@down)
    (@down)
    (cond ((and #f (not (null? /comments)))
           (@down_last)
           (@down)
           (@splice_before /comments)
           (@up)
           (@up)))
    (let ((//d (@make //t_/false '() '())))
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (begin
                 (@down)
                 (cond ((= (@spec_type (@i)) //t_/true)
                        (@paste_over //b))
                       ((not (= //t_/true (@spec_type //b)))
                        (@paste_over (@and (@i) //b))))
                 (cond ((and (not (null? /rest))
                             (not (@gen_improper?
                                    (list-ref (@parent) (+ 1 2))
                                    //a/s)))
                        (@right)
                        (@down_last)
                        (cond ((= (@st (@i)) //t_/skip) (@splice_over /rest))
                              (#t (@splice_after /rest)))
                        (@up)))
                 (@up)
                 (cond ((or (= (@st (list-ref (@i) (+ 1 1))) //t_/false)
                            (@implies? (list-ref (@i) (+ 1 1)) //d))
                        (@delete)
                        (cond ((> (@posn_n) (@size (@parent)))
                               (set! /fl_flag1 1))
                              (#t (set! /fl_flag1 0))))
                       ((or (= (@st (list-ref (@i) (+ 1 1))) //t_/true)
                            (@implies? //b //d))
                        (@down)
                        (@paste_over (@make //t_/true '() '()))
                        (@up)
                        (@delete_rest)
                        (set! /fl_flag1 1))
                       (#t
                        (set! //d (@or //d (list-ref (@i) (+ 1 1))))
                        (cond ((not (@right?)) (set! /fl_flag1 1))
                              (#t (@right) (set! /fl_flag1 0))))))
               (while-loop))
              (#t #t))))
    (set! /new (@cs (@parent)))
    (@undo_edit)
    (@splice_over /new)
    (cond ((not (null? /comments))
           (cond ((@left?)
                  (@left)
                  (@down_last)
                  (@down_last)
                  (cond ((@gen_improper? (@i) (@as_type))
                         (@splice_before /comments))
                        (#t (@splice_after /comments)))
                  (@up)
                  (@up)
                  (@right))
                 (#t
                  (@down_last)
                  (@down)
                  (@splice_before /comments)
                  (@up)
                  (@up)))))))

