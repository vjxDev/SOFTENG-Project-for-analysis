(define (@merge_left_test)
  (cond ((and (= (@gen_type (@item)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (cond ((not (= (@gen_type (@item)) //t_/statement))
         (@fail "The selected item is not a Statement."))
        ((not (@left?))
         (@fail "There is no statement to the left of this one."))
        (#t
         (@left)
         (cond ((@trans? //t/r_/absorb_/right) (@pass))
               ((= (@spec_type (@item)) //t_/assignment)
                (let ((//a (@assigned (@item))) (//u (@used (@item))))
                  (@right)
                  (cond ((and (= (@spec_type (@item)) //t_/assignment)
                              (null? (@set_intersect //a (@variables (@item))))
                              (null? (@set_intersect //u (@assigned (@item)))))
                         (@pass))
                        (#t
                         (@fail "The assignments were too complex (for this version).")))))
               (#t
                (@fail "It was not possible to `Absorb Right' on the previous statement."))))))

(define (@merge_left_code //data)
  (let ((//p '()) (//span (@span)) (//c '()))
    (cond ((and (= (@gen_type (@item)) //t_/assign)
                (@up?)
                (not (@left?))
                (not (@right?)))
           (@up)))
    (@left)
    (cond ((@trans? //t/r_/absorb_/right)
           (set! //p (@posn))
           (@trans //t/r_/absorb_/right "")
           (@goto //p)
           (set! //span (- //span 1))
           (let while-loop ()
             (cond ((and (@trans? //t/r_/absorb_/right)
                         (>= //span 0))
                    (begin
                      (@trans //t/r_/absorb_/right "")
                      (@goto //p)
                      (set! //span (- //span 1)))
                    (while-loop))
                   (#t #t))))
          (#t
           (set! //c (@components (@item)))
           (@delete)
           (@down)
           (@splice_before //c)
           (@up)))))

