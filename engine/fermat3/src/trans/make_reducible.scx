(define (/foreach-make_reducible-1 //depth //a/s_/type)
  (cond ((= //depth 0)
         (@down_last)
         (cond ((and (member 1 (@gen_tvs (@i) /as)) (@right?))
                (cond ((= //t_/cond (@st (@i))) (@gcr_cond_fix)))
                (@trans //t/r_/fully_/absorb_/right "")))
         (let while-loop ()
           (cond ((@left?)
                  (begin
                    (@left)
                    (cond ((and (member 1 (@gen_tvs (@i) /as)) (@right?))
                           (cond ((= //t_/cond (@st (@i))) (@gcr_cond_fix)))
                           (@trans //t/r_/fully_/absorb_/right ""))))
                  (while-loop))
                 (#t #t)))
         (@up))))

(define (/foreach-make_reducible-2 //depth //a/s_/type)
  (cond ((member //depth (@gen_tvs (@i) /as))
         (set! /n (+ /n 1)))))

(define (@make_reducible_test)
  (cond ((and (not (= (@gt (@i)) //t_/statement))
              (not (= (@gt (@i)) //t_/statements)))
         (@fail "Item is not a statement or statement sequence"))
        ((@gen_reducible? (@i) (@as_type))
         (@fail "Selected item is already reducible"))
        (#t (@pass))))

(define (@make_reducible_code //data)
  (let ((/as-save /as)
        (/calls-save /calls)
        (/call_n-save /call_n))
    (set! /as (@as_type))
    (set! /calls (@mp_proc_calls))
    (set! /call_n 1)
    (let ((/-result- (@mr_process /as /calls /call_n)))
      (set! /calls (car /-result-))
      (set! /-result- (cdr /-result-))
      (set! /call_n (car /-result-))
      (set! /-result- (cdr /-result-)))
    (cond ((not (@gen_reducible? (@i) (@as_type)))
           (let ((/-result- (@mr_process /as /calls /call_n)))
             (set! /calls (car /-result-))
             (set! /-result- (cdr /-result-))
             (set! /call_n (car /-result-))
             (set! /-result- (cdr /-result-)))))
    (cond ((@gen_reducible? (@i) (@as_type)))
          (#t
           (@ateach_stats
             /foreach-make_reducible-1
             0
             (@as_type)
             0)
           (cond ((null? (@program)) (@new_program (@skips))))))
    (set! /as /as-save)
    (set! /calls /calls-save)
    (set! /call_n /call_n-save)))

(define (@mr_process /as-par /calls-par /call_n-par)
  (let ((/call_n-save /call_n)
        (/calls-save /calls)
        (/as-save /as)
        (funct-result '()))
    (set! /call_n /call_n-par)
    (set! /calls /calls-par)
    (set! /as /as-par)
    (cond ((and (@cs? (@i)) (not (@gen_proper? (@i) /as)))
           (cond ((= (@st (@i)) //t_/statements)
                  (let ((/-result- (@mr_statements /as /calls /call_n)))
                    (set! /calls (car /-result-))
                    (set! /-result- (cdr /-result-))
                    (set! /call_n (car /-result-))
                    (set! /-result- (cdr /-result-))))
                 (#t
                  (@down)
                  (let ((/-result- (@mr_process /as /calls /call_n)))
                    (set! /calls (car /-result-))
                    (set! /-result- (cdr /-result-))
                    (set! /call_n (car /-result-))
                    (set! /-result- (cdr /-result-)))
                  (let while-loop ()
                    (cond ((@right?)
                           (begin
                             (@right)
                             (let ((/-result- (@mr_process /as /calls /call_n)))
                               (set! /calls (car /-result-))
                               (set! /-result- (cdr /-result-))
                               (set! /call_n (car /-result-))
                               (set! /-result- (cdr /-result-))))
                           (while-loop))
                          (#t #t)))
                  (@up)))))
    (set! funct-result (list /calls /call_n))
    (set! /call_n /call_n-save)
    (set! /calls /calls-save)
    (set! /as /as-save)
    funct-result))

(define (@mr_statements /as-par /calls-par /call_n-par)
  (let ((/call_n-save /call_n)
        (/calls-save /calls)
        (/as-save /as)
        (funct-result '()))
    (set! /call_n /call_n-par)
    (set! /calls /calls-par)
    (set! /as /as-par)
    (let ((/tvs '()) (/n-save /n) (/trans 0))
      (set! /n 0)
      (@down)
      (cond ((not (= (@st (@i)) //t_/floop))
             (let ((/-result- (@mr_process /as /calls /call_n)))
               (set! /calls (car /-result-))
               (set! /-result- (cdr /-result-))
               (set! /call_n (car /-result-))
               (set! /-result- (cdr /-result-)))))
      (let while-loop ()
        (cond ((@right?)
               (begin
                 (set! /tvs (@gen_tvs (@i) /as))
                 (cond ((member 1 /tvs)
                        (set! /n 0)
                        (cond ((= (@st (@i)) //t_/cond)
                               (set! /trans //t/r_/fully_/expand_/forward)
                               (@down)
                               (cond ((member 0 (@gen_tvs (@i) /as))
                                      (set! /n (+ /n 1))))
                               (let while-loop ()
                                 (cond ((@right?)
                                        (begin
                                          (@right)
                                          (cond ((member 0 (@gen_tvs (@i) /as))
                                                 (set! /n (+ /n 1)))))
                                        (while-loop))
                                       (#t #t)))
                               (@up))
                              (#t
                               (set! /trans //t/r_/fully_/absorb_/right)
                               (set! //depth 0)
                               (@ateach_terminal
                                 /foreach-make_reducible-2
                                 0
                                 (@as_type)
                                 1)
                               (cond ((null? (@program))
                                      (@new_program (@skips))))))
                        (cond (#f
                               (begin
                                 (display "P = ")
                                 (begin
                                   (display (@posn))
                                   (begin
                                     (display " has n = ")
                                     (begin
                                       (display /n)
                                       (newline)
                                       (force-output)))))))
                        (cond ((<= /n 1)
                               (cond ((@trans? /trans) (@trans /trans ""))
                                     (#t (@right))))
                              (#t
                               (@right)
                               (cond ((and (not (@right?))
                                           (<= (@stat_count (@i)) 1)
                                           (<= (@total_size (@i)) 20))
                                      (@left)
                                      (cond ((@trans? //t/r_/absorb_/right)
                                             (@trans //t/r_/absorb_/right ""))
                                            (#t (@right))))
                                     (#t
                                      (let ((/-result-
                                              (@mr_make_and_absorb_proc
                                                /as
                                                /calls
                                                /call_n)))
                                        (set! /calls (car /-result-))
                                        (set! /-result- (cdr /-result-))
                                        (set! /call_n (car /-result-))
                                        (set! /-result- (cdr /-result-))))))))
                       (#t (@right)))
                 (cond ((not (= (@st (@i)) //t_/floop))
                        (let ((/-result- (@mr_process /as /calls /call_n)))
                          (set! /calls (car /-result-))
                          (set! /-result- (cdr /-result-))
                          (set! /call_n (car /-result-))
                          (set! /-result- (cdr /-result-))))))
               (while-loop))
              (#t #t)))
      (@up)
      (set! /n /n-save))
    (set! funct-result (list /calls /call_n))
    (set! /call_n /call_n-save)
    (set! /calls /calls-save)
    (set! /as /as-save)
    funct-result))

(define (@mr_make_and_absorb_proc
         /as-par
         /calls-par
         /call_n-par)
  (let ((/call_n-save /call_n)
        (/calls-save /calls)
        (/as-save /as)
        (funct-result '()))
    (set! /call_n /call_n-par)
    (set! /calls /calls-par)
    (set! /as /as-par)
    (let ((/posn_n (@posn_n))
          (/span 0)
          (/cc_name (@make_name "cc"))
          (/tvs '())
          (/new_tvs '())
          (/name '()))
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (cond ((not (null? (@calls (@i)))) (set! /fl_flag1 1))
                     (#t
                      (set! /new_tvs (@gen_tvs (@i) /as))
                      (cond ((not (@gen_proper? (@i) /as))
                             (cond ((and (equal? /new_tvs (list 1))
                                         (@gen_reducible? (@i) /as)
                                         (or (> /span 0)
                                             (>= (@stat_count (@i)) 2)))
                                    (set! /span (+ /span 1))
                                    (set! /tvs /new_tvs)))
                             (set! /fl_flag1 1))
                            ((member /cc_name (@variables (@i)))
                             (set! /fl_flag1 1))
                            (#t
                             (set! /span (+ /span 1))
                             (set! /tvs /new_tvs)
                             (cond ((not (@right?)) (set! /fl_flag1 1))
                                   (#t (@right) (set! /fl_flag1 0)))))))
               (while-loop))
              (#t #t)))
      (cond ((or (= /span 0) (@right?)))
            (#t
             (@to /posn_n)
             (cond ((and (= /span 1)
                         (<= (@stat_count_nc (@i)) 1)
                         (<= (@total_size (@i)) 20))
                    #t)
                   (#t
                    (set! /name
                      (@make_name
                        (string-append "p_" (@string /call_n))))
                    (let while-loop ()
                      (cond ((member /name /calls)
                             (begin
                               (set! /call_n (+ /call_n 1))
                               (set! /name
                                 (@make_name
                                   (string-append "p_" (@string /call_n)))))
                             (while-loop))
                            (#t #t)))
                    (set! /calls (@set_union (list /name) /calls))
                    (cond ((null? /tvs) (@make_proc /name /span 0))
                          (#t (@make_proc /name /span (car /tvs))))))
             (cond ((not (@left?))
                    (error "Can't move left in @MR_Make_And_Absorb_Proc!!!")))
             (@left)
             (cond ((@trans? //t/r_/absorb_/right)
                    (begin
                      (display "Absorbing right...")
                      (newline)
                      (force-output))
                    (@trans //t/r_/absorb_/right ""))
                   (#t (error "Cannot Absorb_Right at: " (@posn)))))))
    (set! funct-result (list /calls /call_n))
    (set! /call_n /call_n-save)
    (set! /calls /calls-save)
    (set! /as /as-save)
    funct-result))

#t

