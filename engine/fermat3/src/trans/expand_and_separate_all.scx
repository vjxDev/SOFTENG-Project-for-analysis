(define (@expand_and_separate_all_test)
  (cond ((not (= (@st (@i)) //t_/a_/s))
         (@fail "Not Action System"))
        (#t (@pass))))

(define (@expand_and_separate_all_code //data)
  (let ((//a/s_/size (@size (list-ref (@i) (+ 1 2)))))
    (@down_last)
    (@down)
    (let ((var-save //i)
          (for-step 1)
          (for-end //a/s_/size))
      (set! //i 1)
      (let for-loop ()
        (cond ((or (and (> 1 0) (<= //i for-end))
                   (and (< 1 0) (>= //i for-end)))
               (let ((//actn (@posn)))
                 (@down_last)
                 (@down)
                 (cond ((@trans? //t/r_/expand_/and_/separate)
                        (@trans //t/r_/expand_/and_/separate "")))
                 (@goto //actn)
                 (@right))
               (set! //i (+ //i for-step))
               (for-loop))
              (#t #t)))
      (set! //i var-save))))

