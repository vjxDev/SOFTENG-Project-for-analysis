(define (/foreach-rename_local_vars-1
         //depth
         //a/s_/type)
  (cond ((not (null? (gethash /new (@v (@i)))))
         (@paste_over
           (@make (@st (@i)) (gethash /new (@v (@i))) '())))))

(define (/foreach-rename_local_vars-2
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/var)
         (set! /count (+ /count 1))
         (set! /vars (@assigned (list-ref (@i) (+ 1 1))))
         (let ((/new-save /new))
           (set! /new (my-make-hash-table 16))
           (let ((var-save /var) (seq-save /vars))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /var (car for-tmp))
                      (puthash
                        /new
                        /var
                        (@make_name
                          (concat
                            (string-append
                              (concat
                                (string-append /prefix "_")
                                (@string /count))
                              "__")
                            (@n_string /var))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /var var-save))
           (@down)
           (@down)
           (@down)
           (@paste_over
             (@make //t_/var_/lvalue
                    (gethash /new (@v (@i)))
                    '()))
           (@up)
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@right)
                      (@down)
                      (@paste_over
                        (@make //t_/var_/lvalue
                               (gethash /new (@v (@i)))
                               '()))
                      (@up))
                    (while-loop))
                   (#t #t)))
           (@up)
           (@right)
           (@foreach_global_var
             /foreach-rename_local_vars-1
             0
             (@as_type)
             0)
           (cond ((null? (@program)) (@new_program (@skips))))
           (set! /new /new-save))
         (@up)
         (let ((var-save /assign)
               (seq-save (@cs (list-ref (@i) (+ 1 1)))))
           (if (vector? seq-save)
             (set! seq-save (vector-elts seq-save)))
           (let for-in-loop ((for-tmp seq-save))
             (cond ((not (null? for-tmp))
                    (set! /assign (car for-tmp))
                    (begin
                      (@paste_before
                        (@make //t_/assignment '() (list /assign)))
                      (@right))
                    (for-in-loop (cdr for-tmp)))
                   (#t #t)))
           (set! /assign var-save))
         (@splice_over (@cs (list-ref (@i) (+ 1 2)))))))

(define (/foreach-rename_local_vars-3
         //depth
         //a/s_/type)
  (cond ((= (@st (@i)) //t_/var)
         (set! /locals
           (@set_union
             (@assigned (list-ref (@i) (+ 1 1)))
             /locals)))
        ((= (@st (@i)) //t_/for)
         (set! /locals
           (@set_union
             (@assigned (list-ref (@i) (+ 1 1)))
             /locals)))
        ((= (@st (@i)) //t_/where)
         (set! /globals
           (@set_union
             /globals
             (let ((l (let ((l (@cs (list-ref (@i) (+ 1 2))))
                            (map-result '()))
                        (let while-loop ()
                          (cond ((not (null? l))
                                 (set! map-result
                                   (cons (@globals_in_defn (car l)) map-result))
                                 (set! l (cdr l))
                                 (while-loop))
                                (#t #t)))
                        (reverse map-result)))
                   (reduce-result '()))
               (cond ((null? l) '())
                     (#t
                      (set! reduce-result (car l))
                      (set! l (cdr l))
                      (let while-loop ()
                        (cond ((not (null? l))
                               (set! reduce-result
                                 (@set_union reduce-result (car l)))
                               (set! l (cdr l))
                               (while-loop))
                              (#t #t)))
                      reduce-result))))))))

(define (@rename_local_vars_test)
  (cond ((not (member //t_/var (@stat_types (@i))))
         (@fail "No VAR clauses in selected item"))
        (#t (@pass))))

(define (@rename_local_vars_code //data)
  (let ((/prefix-save /prefix)
        (/var-save /var)
        (/vars-save /vars)
        (/count-save /count))
    (set! /prefix (@string //data))
    (set! /var '())
    (set! /vars '())
    (set! /count 0)
    (cond ((equal? /prefix "") (set! /prefix "var")))
    (@foreach_statement
      /foreach-rename_local_vars-2
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    #t
    (set! /prefix /prefix-save)
    (set! /var /var-save)
    (set! /vars /vars-save)
    (set! /count /count-save)))

(define (@check_globals_in_defns?)
  (let ((/locals-save /locals)
        (/globals-save /globals)
        (funct-result '()))
    (set! /locals '())
    (set! /globals '())
    (@foreach_statement
      /foreach-rename_local_vars-3
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! funct-result
      (null? (@set_intersect /locals /globals)))
    (set! /locals /locals-save)
    (set! /globals /globals-save)
    funct-result))

(define (@globals_in_defn /defn)
  (@set_difference
    (@set_difference
      (@variables (list-ref /defn (+ 1 4)))
      (@assigned (list-ref /defn (+ 1 2))))
    (@assigned (list-ref /defn (+ 1 3)))))

#t

