(define (@take_out_left_test)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (cond ((not (= (@gt (@i)) //t_/statement))
         (@fail "The selected item is not a Statement."))
        ((@left?)
         (@fail "There is a statement to the left of this one."))
        ((< (if (vector? (@posn))
              (vector-length (@posn))
              (length (@posn)))
            2)
         (@fail "There is no structure out of which to take this item."))
        ((not (null? (@set_intersect
                       (@stat_types (@i))
                       //ext_/call_/types_/set)))
         (@fail "There are undetermined procedure or function calls in the selected item."))
        ((and (not (= (@st (@gparent)) //t_/for))
              (not (= (@st (@gparent)) //t_/var))
              (not (= (@st (@gparent)) //t_/where))
              (not (= (@st (@gparent)) //t_/while))
              (not (= (@st (@gparent)) //t_/guarded))
              (not (= (@st (@gparent)) //t_/floop)))
         (@fail "The enclosing structure is not of a suitable type."))
        (#t
         (let ((//s (@i)))
           (@save_state)
           (@delete)
           (@up)
           (@up)
           (cond ((= (@st (@i)) //t_/for)
                  (@take_out_left_test_for //s))
                 ((= (@st (@i)) //t_/var)
                  (@take_out_left_test_var //s))
                 ((= (@st (@i)) //t_/where)
                  (@take_out_left_test_where //s))
                 ((= (@st (@i)) //t_/while)
                  (@take_out_left_test_while //s))
                 ((and (= (@gt (@i)) //t_/guarded)
                       (@up?)
                       (not (= (@st (@parent)) //t_/d_/do)))
                  (@take_out_left_test_guarded //s))
                 ((= (@st (@i)) //t_/floop)
                  (@take_out_left_test_floop //s))
                 (#t
                  (@fail "The enclosing item is not of a suitable type.")))
           (@undo)))))

(define (@take_out_left_test_for //s)
  (cond ((not (null? (@set_intersect (@assigned //s) (@used //s))))
         (@fail "A statement cannot be taken out of a `For' if it could assign to variables it uses."))
        (#t
         (let ((//l (@v (list-ref (@i) (+ 1 1))))
               (//e1 (list-ref (@i) (+ 1 2)))
               (//e2 (list-ref (@i) (+ 1 3)))
               (//e3 (list-ref (@i) (+ 1 4)))
               (//body (list-ref (@i) (+ 1 5)))
               (//assd (@assigned //s)))
           (cond ((member //l (@variables //s))
                  (@fail "The statement uses the loop index."))
                 ((not (null? (@set_intersect
                                (@set_union
                                  (@set_union (@used //e1) (@used //e2))
                                  (@used //e3))
                                //assd)))
                  (@fail "The limits or step would be changed by the selected statement"))
                 ((not (null? (@set_intersect (@used //s) (@assigned //body))))
                  (@fail "The statement uses variables which are changed by the loop body."))
                 ((not (null? (@set_intersect
                                (@set_intersect //assd (@assigned //body))
                                (@used //body))))
                  (@fail "Statement assigns to variables which are used in the loop body"))
                 ((not (or (and (@true?
                                  (@make 315
                                         '()
                                         (list (@var_to_expn //e3)
                                               (@make 205 0 '()))))
                                (@true?
                                  (@make 317
                                         '()
                                         (list (@var_to_expn //e2)
                                               (@var_to_expn //e1)))))
                           (and (@true?
                                  (@make 314
                                         '()
                                         (list (@var_to_expn //e3)
                                               (@make 205 0 '()))))
                                (@true?
                                  (@make 316
                                         '()
                                         (list (@var_to_expn //e2)
                                               (@var_to_expn //e1)))))))
                  (@fail "Cannot prove that the loop will be executed."))
                 (#t (@pass)))))))

(define (@take_out_left_test_var //s)
  (let ((//local (@assigned (list-ref (@i) (+ 1 1))))
        (//u (@variables (list-ref (@i) (+ 1 1)))))
    (cond ((not (null? (@set_intersect //local (@variables //s))))
           (@fail "The selected statement being uses some of the local variables."))
          ((not (null? (@set_intersect //u (@assigned //s))))
           (@fail "Some of the assigning variables are changed by the selected statement."))
          (#t (@pass)))))

(define (@take_out_left_test_where //s)
  (let ((//d (@make_set
               (let ((l (@cs (list-ref (@i) (+ 1 2))))
                     (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result (cons (@v1 (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result)))))
    (cond ((not (null? (@set_intersect
                         //d
                         (@make_set
                           (concat
                             (let ((l (@proc_calls //s)) (map-result '()))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! map-result
                                          (cons (car (car l)) map-result))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               (reverse map-result))
                             (let ((l (@funct_calls //s)) (map-result '()))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! map-result
                                          (cons (car (car l)) map-result))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               (reverse map-result)))))))
           (@fail "The statement being taken out uses some of the definitions."))
          (#t (@pass)))))

(define (@take_out_left_test_while //s)
  (cond ((not (null? (@set_intersect (@assigned //s) (@used //s))))
         (@fail "A statement cannot be taken out into a `While' if it could assign to variables it uses."))
        (#t
         (let ((//b (list-ref (@i) (+ 1 1))))
           (cond ((not (null? (@set_intersect
                                (@variables //s)
                                (@assigned (@i)))))
                  (@fail "The loop assigns to some variables used in the other statement."))
                 ((or (not (@left?))
                      (not (= (@st (list-ref (@parent) (+ 1 (- (@posn_n) 1))))
                              //t_/assert)))
                  (@fail "There is no assertion before the loop."))
                 (#t
                  (@left)
                  (cond ((not (@implies? (list-ref (@i) (+ 1 1)) //b))
                         (@fail "The assertion does not imply that the loop executes."))
                        ((not (null? (@set_intersect
                                       (@assigned //s)
                                       (@variables (@i)))))
                         (@fail "The assertion could be changed by the statement being taken out."))
                        (#t (@pass)))))))))

(define (@take_out_left_test_guarded //s)
  (let ((//p (@posn_n)) (//a (@assigned //s)))
    (cond ((not (null? (@set_intersect
                         (@variables (list-ref (@i) (+ 1 1)))
                         //a)))
           (@fail "The selected statement uses the same variables as one of the conditions.")))
    (let while-loop ()
      (cond ((and (not (@failed?)) (@left?))
             (begin
               (@left)
               (cond ((not (null? (@set_intersect
                                    (@variables (list-ref (@i) (+ 1 1)))
                                    //a)))
                      (@fail "The selected statement uses the same variables as one of the conditions.")))
               (cond ((not (@equal?
                             (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))
                             //s))
                      (@fail "The selected statement does not begin each guard."))))
             (while-loop))
            (#t #t)))
    (@to //p)
    (let while-loop ()
      (cond ((and (not (@failed?)) (@right?))
             (begin
               (@right)
               (cond ((not (null? (@set_intersect
                                    (@variables (list-ref (@i) (+ 1 1)))
                                    //a)))
                      (@fail "The selected statement uses the same variables as one of the conditions.")))
               (cond ((not (@equal?
                             (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))
                             //s))
                      (@fail "The selected statement does not begin each guard."))))
             (while-loop))
            (#t #t)))
    (cond ((not (@failed?)) (@pass)))))

(define (@take_out_left_test_floop //s)
  (cond ((@gen_proper? //s (@as_type)) (@pass))
        (#t (@fail "Statement is not a proper sequence"))))

(define (@take_out_left_code //data)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (let ((//s (@i)) (//p1 '()) (//p2 '()) (//p3 '()))
    (set! //p1 (@posn_n))
    (@up)
    (set! //p2 (@posn_n))
    (@up)
    (cond ((= (@gt (@i)) //t_/guarded)
           (@up)
           (@edit_parent)
           (@down)
           (@down_last)
           (@down)
           (@delete)
           (@up)
           (@up)
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@right)
                      (@down_last)
                      (@down)
                      (@delete)
                      (@up)
                      (@up))
                    (while-loop))
                   (#t #t)))
           (@up)
           (@paste_before //s)
           (@right)
           (@fix_cond)
           (@end_edit))
          (#t
           (@edit_parent)
           (@paste_before //s)
           (@right)
           (cond ((= (@st (@i)) //t_/floop)
                  (@down)
                  (@down_last)
                  (@paste_after //s)
                  (@up)
                  (@up)))
           (@down_to //p2)
           (@down_to //p1)
           (@clever_delete)
           (@end_edit)))))

