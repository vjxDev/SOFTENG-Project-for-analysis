(define (@expand_forward_test)
  (cond ((not (member
                (@spec_type (@item))
                (list //t_/cond //t_/d_/if)))
         (@fail "Not an IF statement"))
        ((not (@right?))
         (@fail "There is no statement after this one"))
        (#t (@pass))))

(define (@expand_forward_code //data)
  (let ((//a/s_/type (@as_type)))
    (@gen_expand_forward //a/s_/type)))

(define (@gen_expand_forward //a/s/type)
  (let ((//s '()) (//p (@posn)))
    (@right)
    (set! //s (@item))
    (@left)
    (@down)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (@down_last)
               (@down_last)
               (cond ((not (@gen_improper? (@parent) //a/s/type))
                      (cond ((= (@spec_type (@item)) //t_/skip)
                             (@paste_over //s))
                            (#t (@paste_after //s)))))
               (@up)
               (@up)
               (cond ((not (@right?)) (set! /fl_flag1 1))
                     (#t (@right) (set! /fl_flag1 0))))
             (while-loop))
            (#t #t)))
    (@up)
    (@right)
    (@delete)
    (@goto //p)))

