(define (@insert_assertion_test)
  (cond ((or (= (@st (@i)) //t_/cond)
             (= (@st (@i)) //t_/d_/if)
             (= (@st (@i)) //t_/d_/do)
             (= (@st (@i)) //t_/while)
             (= (@st (@i)) //t_/guarded))
         (@pass))
        (#t
         (@fail "The selected item is not of a valid type."))))

(define (@insert_assertion_code //data)
  (let ((//a '())
        (//else_/cond (@make //t_/false '() '())))
    (cond ((= (@st (@i)) //t_/cond)
           (@down)
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@down)
                      (set! //a (@i))
                      (@right)
                      (@down)
                      (@paste_before (@make 109 '() (list //a)))
                      (set! //else_/cond (@or //else_/cond //a))
                      (@up)
                      (@up)
                      (@right))
                    (while-loop))
                   (#t #t)))
           (@down_last)
           (@down)
           (set! //else_/cond (@not //else_/cond))
           (@paste_before
             (@make 109 '() (list //else_/cond)))
           (@up)
           (@up)
           (@up))
          ((or (= (@st (@i)) //t_/d_/if)
               (= (@st (@i)) //t_/d_/do))
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (@down)
                      (set! //a (@i))
                      (@right)
                      (@down)
                      (@paste_before (@make 109 '() (list //a)))
                      (@up)
                      (@up)
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t (@right) (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t))))
          (#t
           (@down)
           (set! //a (@i))
           (@right)
           (@down)
           (@paste_before (@make 109 '() (list //a)))))))

#t

