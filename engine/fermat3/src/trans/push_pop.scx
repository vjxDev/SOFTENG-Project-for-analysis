(define (/foreach-push_pop-1 //depth //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/a_/proc_/call)
              (member
                /os_name
                (@assigned (list-ref (@i) (+ 1 3)))))
         (set! //found 1))))

(define /%const__push_pop__1
  (@make 135
         '()
         (list (@make 501 (@make_name "__DUMMY__") '())
               (@make 506 -1 '()))))

(define (@push_pop_test)
  (cond ((not (= (@st (@i)) //t_/push))
         (@fail "Current item is not a PUSH statement"))
        ((not (@right?))
         (@fail "No statements to the right of current item "))
        ((null? (@pp_find_pop
                  (list-ref (@i) (+ 1 1))
                  (@variables (list-ref (@i) (+ 1 1)))
                  (@variables (list-ref (@i) (+ 1 2)))))
         (@fail "Cannot find a suitable POP"))
        (#t (@pass))))

(define (@pp_find_pop /stack /vars /used)
  (let ((/pop '()) (/all (@variables (@i))))
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (cond ((not (@right?)) (set! /fl_flag1 1))
                   (#t
                    (@right)
                    (let while-loop ()
                      (cond ((and (= (@st (@i)) //t_/var)
                                  (null? (@set_intersect
                                           (@assigned (list-ref (@i) (+ 1 1)))
                                           /all)))
                             (begin (@down_to 2) (@down))
                             (while-loop))
                            (#t #t)))
                    (cond ((and (= (@st (@i)) //t_/pop)
                                (@equal? (list-ref (@i) (+ 1 2)) /stack))
                           (set! /pop (@posn))
                           (set! /fl_flag1 1))
                          ((not (null? (@set_intersect
                                         (@variables (@i))
                                         /vars)))
                           (set! /fl_flag1 1))
                          ((not (null? (@set_intersect (@assigned (@i)) /used)))
                           (set! /fl_flag1 1))
                          ((not (null? (@set_intersect
                                         (@stat_types (@i))
                                         //call_/types_/set)))
                           (set! /fl_flag1 1))
                          ((not (@is_proper?)) (set! /fl_flag1 1))
                          (#t (set! /fl_flag1 0)))))
             (while-loop))
            (#t #t)))
    /pop))

(define (@push_pop_code //data)
  (let ((/posn (@posn))
        (/p1 (@posn_n))
        (/p2 0)
        (/stack (list-ref (@i) (+ 1 1)))
        (/vars (@variables (list-ref (@i) (+ 1 1))))
        (/pop '())
        (/v '())
        (/e (list-ref (@i) (+ 1 2)))
        (/tmp '())
        (/parent (@parent))
        (/body '())
        (//l '())
        (/needed 0))
    (set! /pop
      (@pp_find_pop
        /stack
        /vars
        (@variables (list-ref (@i) (+ 1 2)))))
    (let ((/__/o/k 1))
      (set! /__/o/k
        (@new_match /%const__push_pop__1 (@i) /__/o/k))
      (cond ((= /__/o/k 1)
             (let ((/__v_save /v))
               (set! /v (vector-ref /__/match_array 0))
               (@clever_delete)
               (@goto /posn)
               (@clever_delete)
               (set! /v /__v_save)))
            (#t
             (set! /v (list-ref (@i) (+ 1 1)))
             (let while-loop ()
               (cond ((> (if (vector? (@posn))
                           (vector-length (@posn))
                           (length (@posn)))
                         (if (vector? /posn)
                           (vector-length /posn)
                           (length /posn)))
                      (@up)
                      (while-loop))
                     (#t #t)))
             (set! /p2 (@posn_n))
             (set! /body (@get_l (@parent) (+ /p1 1) /p2))
             (@goto /pop)
             (cond ((null? (@set_intersect
                             (@variables /e)
                             (@assigned (@make //t_/statements '() /body))))
                    (set! /needed 0)
                    (@paste_over
                      (@make 110
                             '()
                             (list (@make 6
                                          '()
                                          (list (@expn_to_var /v)
                                                (@var_to_expn /e)))))))
                   (#t
                    (set! /needed 1)
                    (set! /tmp
                      (@pp_new_var (@make_name "tmp") /parent))
                    (@paste_over
                      (@make 110
                             '()
                             (list (@make 6
                                          '()
                                          (list (@expn_to_var /v)
                                                (@var_to_expn /tmp))))))))
             (let while-loop ()
               (cond ((> (if (vector? (@posn))
                           (vector-length (@posn))
                           (length (@posn)))
                         (if (vector? /posn)
                           (vector-length /posn)
                           (length /posn)))
                      (@up)
                      (while-loop))
                     (#t #t)))
             (set! /p2 (@posn_n))
             (set! /body (@get_l (@parent) (+ /p1 1) /p2))
             (@up)
             (set! //l (@cs (@i)))
             (@paste_over
               (@make //t_/statements
                      '()
                      (concat
                        (@sub_seg //l 1 /p1)
                        (@sub_seg
                          //l
                          (+ /p2 1)
                          (if (vector? //comps)
                            (vector-length //comps)
                            (length //comps))))))
             (@down_to /p1)
             (cond ((= /needed 1)
                    (@paste_over
                      (@make 139
                             '()
                             (list (@make 13
                                          '()
                                          (list (@make 6
                                                       '()
                                                       (list (@expn_to_var /tmp)
                                                             (@var_to_expn
                                                               /e)))))
                                   (@make 17 '() /body))))
                    (cond ((@trans? //t/r_/remove_/redundant_/vars)
                           (@trans //t/r_/remove_/redundant_/vars ""))))
                   (#t (@splice_over /body))))))))

(define (@pp_new_var /tmp //i)
  (let ((//r /tmp) (/n 1) (/vars (@variables //i)))
    (cond ((member //r /vars)
           (let while-loop ()
             (cond ((member
                      (@make_name
                        (concat (@n_string /tmp) (@string /n)))
                      /vars)
                    (set! /n (+ /n 1))
                    (while-loop))
                   (#t #t)))
           (set! //r
             (@make_name
               (concat (@n_string /tmp) (@string /n))))))
    (@make //t_/variable //r '())))

(define (@push_pop_test_old)
  (cond ((not (= (@st (@i)) //t_/push))
         (@fail "Current item is not a PUSH statement"))
        ((not (= (@st (list-ref (@i) (+ 1 1)))
                 //t_/var_/lvalue))
         (@fail "Stack is not a simple variable"))
        ((not (= (@st (list-ref (@i) (+ 1 2))) //t_/variable))
         (@fail "PUSH statement does not push a simple variable"))
        (#t (@pass))))

(define (@push_pop_code_old //data)
  (let ((/vars '()))
    (cond ((and (= (@st (@i)) //t_/push)
                (= (@st (list-ref (@i) (+ 1 1)))
                   //t_/var_/lvalue)
                (= (@st (list-ref (@i) (+ 1 2))) //t_/variable)
                (@right?))
           (set! /vars (@used (@i)))
           (@cut)
           (let while-loop ()
             (cond ((and (@right?)
                         (null? (@set_intersect /vars (@assigned (@i))))
                         (@ppc_a_proc_call_os? (@i))
                         (null? (@set_intersect
                                  (@stat_types (@i))
                                  //call_/types_/set))
                         (@is_proper?))
                    (@right)
                    (while-loop))
                   (#t #t)))
           (@paste_before (@buffer))
           (let ((/p1 (@posn_n))
                 (/p2 0)
                 (/stack (@v (list-ref (@i) (+ 1 1))))
                 (/v1 (list-ref (@i) (+ 1 2)))
                 (/v2 '()))
             (set! /fl_flag1 0)
             (let while-loop ()
               (cond ((= /fl_flag1 0)
                      (cond ((not (@is_proper?)) (set! /fl_flag1 1))
                            ((member //t_/call (@stat_types (@i)))
                             (set! /fl_flag1 1))
                            ((not (@right?)) (set! /fl_flag1 1))
                            (#t
                             (@right)
                             (cond ((and (= (@st (@i)) //t_/push)
                                         (= (@st (list-ref (@i) (+ 1 1)))
                                            //t_/var_/lvalue)
                                         (equal?
                                           (@v (list-ref (@i) (+ 1 1)))
                                           /stack))
                                    (set! /fl_flag1 1))
                                   ((and (= (@st (@i)) //t_/push)
                                         (= (@st (list-ref (@i) (+ 1 2)))
                                            //t_/variable)
                                         (equal?
                                           (@v (list-ref (@i) (+ 1 2)))
                                           (@v /v1)))
                                    (set! /fl_flag1 1))
                                   ((and (= (@st (@i)) //t_/pop)
                                         (= (@st (list-ref (@i) (+ 1 1)))
                                            //t_/var_/lvalue)
                                         (equal?
                                           (@v (list-ref (@i) (+ 1 2)))
                                           /stack)
                                         (= (@st (list-ref (@i) (+ 1 1)))
                                            //t_/var_/lvalue))
                                    (set! /p2 (@posn_n))
                                    (set! /v2 (list-ref (@i) (+ 1 1)))
                                    (set! /fl_flag1 1))
                                   (#t (set! /fl_flag1 0)))))
                      (while-loop))
                     (#t #t)))
             (@to /p1)
             (cond ((= /p2 (+ /p1 1))
                    (let ((/e (list-ref (@i) (+ 1 2))) (/v '()))
                      (@delete)
                      (cond ((@lr_equal? (list-ref (@i) (+ 1 2)) /e)
                             (@clever_delete))
                            (#t
                             (set! /v (list-ref (@i) (+ 1 2)))
                             (@paste_over
                               (@make 110
                                      '()
                                      (list (@make 6
                                                   '()
                                                   (list (@expn_to_var /v)
                                                         (@var_to_expn
                                                           /e))))))))))
                   ((> /p2 0) (@push_pop_doit /p1 /p2 /v1 /v2))))))))

(define (@push_pop_doit /p1 /p2 /v1 /v2)
  (let ((//s (@get_l (@parent) (+ /p1 1) (- /p2 1)))
        (/tmp (@make_name "__tmp")))
    (cond ((not (@ppc_a_proc_call_os?
                  (@make //t_/statements '() //s)))
           (begin
             (display "Adding VAR for PUSH/POP at ")
             (begin (display /p1) (newline) (force-output)))
           (cond ((or (equal? (@v /v1) (@v /v2))
                      (equal? (@v /v2) (@make_name "__DUMMY__")))
                  (@paste_over
                    (@make 139
                           '()
                           (list (@make 13
                                        '()
                                        (list (@make 6
                                                     '()
                                                     (list (@expn_to_var /v1)
                                                           (@var_to_expn
                                                             /v1)))))
                                 (@make 17 '() //s)))))
                 ((null? (@set_intersect
                           (@stat_types (@make //t_/statements '() //s))
                           //call_/types_/set))
                  (set! /tmp
                    (@pp_new_var
                      /tmp
                      (@make //t_/statements '() //s)))
                  (@paste_over
                    (@make 114
                           '()
                           (list (@make 7
                                        '()
                                        (list (@make 308 '() '())
                                              (@make 17
                                                     '()
                                                     (append
                                                       (list (@make 110
                                                                    '()
                                                                    (list (@make 6
                                                                                 '()
                                                                                 (list (@expn_to_var
                                                                                         /tmp)
                                                                                       (@var_to_expn
                                                                                         /v1))))))
                                                       //s
                                                       (list (@make 110
                                                                    '()
                                                                    (list (@make 6
                                                                                 '()
                                                                                 (list (@expn_to_var
                                                                                         /v2)
                                                                                       (@var_to_expn
                                                                                         /tmp))))))))))
                                 (@make 7
                                        '()
                                        (list (@make 308 '() '())
                                              (@make 17
                                                     '()
                                                     (list (@make 145
                                                                  '()
                                                                  '())))))))))
                 (#t
                  (set! /tmp (@pp_new_var /tmp (@program)))
                  (@paste_over
                    (@make 114
                           '()
                           (list (@make 7
                                        '()
                                        (list (@make 308 '() '())
                                              (@make 17
                                                     '()
                                                     (append
                                                       (list (@make 110
                                                                    '()
                                                                    (list (@make 6
                                                                                 '()
                                                                                 (list (@expn_to_var
                                                                                         /tmp)
                                                                                       (@var_to_expn
                                                                                         /v1))))))
                                                       //s
                                                       (list (@make 110
                                                                    '()
                                                                    (list (@make 6
                                                                                 '()
                                                                                 (list (@expn_to_var
                                                                                         /v2)
                                                                                       (@var_to_expn
                                                                                         /tmp))))))))))
                                 (@make 7
                                        '()
                                        (list (@make 308 '() '())
                                              (@make 17
                                                     '()
                                                     (list (@make 145
                                                                  '()
                                                                  '()))))))))))
           (cond ((> /p2 /p1)
                  (@right)
                  (let ((var-save /i) (for-step 1) (for-end /p2))
                    (set! /i (+ /p1 1))
                    (let for-loop ()
                      (cond ((or (and (> 1 0) (<= /i for-end))
                                 (and (< 1 0) (>= /i for-end)))
                             (@clever_delete)
                             (set! /i (+ /i for-step))
                             (for-loop))
                            (#t #t)))
                    (set! /i var-save))))
           (@to /p1))))
  (cond ((@trans? //t/r_/remove_/redundant_/vars)
         (@trans //t/r_/remove_/redundant_/vars ""))))

(set! //a_/proc_/call_/filter '())

(define (@ppc_a_proc_call_os? //i)
  (let ((//found-save //found) (funct-result '()))
    (set! //found 0)
    (cond ((not (null? //a_/proc_/call_/filter))
           (cond ((member //t_/a_/proc_/call (@stat_types //i))
                  (@edit)
                  (@new_program //i)
                  (@foreach_statement
                    /foreach-push_pop-1
                    0
                    (@as_type)
                    0)
                  (cond ((null? (@program)) (@new_program (@skips))))
                  (@undo_edit)))))
    (set! funct-result (= //found 1))
    (set! //found //found-save)
    funct-result))

#t

