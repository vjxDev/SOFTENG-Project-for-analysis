(define (@unfold_proc_call_test)
  (cond ((not (= (@st (@i)) //t_/proc_/call))
         (@fail "Not a Proc Call."))
        (#t (@pass))))

(define (@unfold_proc_call_code //data)
  (let ((/name (@v (list-ref (@i) (+ 1 1))))
        (/posn (@posn))
        (/defn '()))
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (let while-loop ()
                 (cond ((and (not (= (@st (@i)) //t_/where)) (@up?))
                        (@up)
                        (while-loop))
                       (#t #t)))
               (cond ((not (= (@st (@i)) //t_/where))
                      (set! /fl_flag1 1))
                     (#t
                      (@down_to 2)
                      (@down)
                      (let while-loop ()
                        (cond ((and (or (not (= (@st (@i)) //t_/proc))
                                        (not (equal?
                                               (@v (list-ref (@i) (+ 1 1)))
                                               /name)))
                                    (@right?))
                               (@right)
                               (while-loop))
                              (#t #t)))
                      (cond ((and (= (@st (@i)) //t_/proc)
                                  (equal? (@v (list-ref (@i) (+ 1 1))) /name))
                             (set! /defn (@i))
                             (@goto /posn)
                             (@unfold_proc_call /defn)
                             (cond ((= (@st (@i)) //t_/skip) (@clever_delete)))
                             (set! /fl_flag1 1))
                            (#t
                             (@up)
                             (@up)
                             (cond ((not (@up?)) (set! /fl_flag1 1))
                                   (#t (@up) (set! /fl_flag1 0))))))))
             (while-loop))
            (#t #t)))))

#t

