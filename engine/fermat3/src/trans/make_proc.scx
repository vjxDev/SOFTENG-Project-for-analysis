(define (/foreach-make_proc-1 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/call)
         (cond ((and (= /need_flag 1) (equal? (@v (@i)) //z))
                (@paste_before
                  (@make 110
                         '()
                         (list (@make 6
                                      '()
                                      (list (@expn_to_var /exit_flag)
                                            (@make 205 1 '()))))))
                (@right)))
         (@paste_over (@make //t_/exit //depth '())))))

(define (/foreach-make_proc-2 //depth //a/s_/type)
  (let ((/__/o/k 1))
    (vector-set! /__/match_array 1 /exit_flag)
    (vector-set! /__/match_array 0 /exit_flag)
    (set! /__/o/k
      (@new_match /%const__make_proc__1 (@i) /__/o/k))
    (cond ((= /__/o/k 1)
           (let ((/__/s_save //s))
             (set! //s (vector-ref /__/match_array 2))
             (@splice_over //s)
             (set! //s /__/s_save))))))

(define (/foreach-make_proc-3 //depth //a/s_/type)
  (cond ((>= (@size (@i))
             (if (vector? /body)
               (vector-length /body)
               (length /body)))
         (let ((/b /body) (/c (@cs (@i))))
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (cond ((@prefix_equal? /b /c)
                             (begin (display ".") (force-output))
                             (@paste_over
                               (@make //t_/proc_/call
                                      '()
                                      (list (@name /name) /expns /lvalues)))
                             (set! /i /span)
                             (cond ((and (> /tv 0) (= /span 1))
                                    (@paste_cond
                                      (list (@i) (@make //t_/exit /tv '()))))
                                   ((> /tv 0)
                                    (@right)
                                    (set! /c (cdr /c))
                                    (set! /i (- /i 1))
                                    (@paste_over (@make //t_/exit /tv '()))))
                             (let while-loop ()
                               (cond ((> /i 1)
                                      (begin
                                        (set! /i (- /i 1))
                                        (@right)
                                        (set! /c (cdr /c))
                                        (@paste_over (@skip)))
                                      (while-loop))
                                     (#t #t)))))
                      (cond ((not (@right?)) (set! /fl_flag1 1))
                            (#t
                             (@right)
                             (set! /c (cdr /c))
                             (cond ((< (if (vector? /c)
                                         (vector-length /c)
                                         (length /c))
                                       (if (vector? /b)
                                         (vector-length /b)
                                         (length /b)))
                                    (set! /fl_flag1 1))
                                   (#t (set! /fl_flag1 0))))))
                    (while-loop))
                   (#t #t)))))))

(define (/foreach-make_proc-4 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/call) (@paste_over /call))))

(define (/foreach-make_proc-5 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/a_/proc_/call)
         (set! /calls
           (@set_union
             (list (@v (list-ref (@i) (+ 1 1))))
             /calls)))))

(define /%const__make_proc__1
  (@make 114
         '()
         (list (@make 7
                      '()
                      (list (@make 313
                                   '()
                                   (list (@make 261
                                                '()
                                                (list (@make 205 1 '())))
                                         (@make 205 1 '())))
                            (@make 17
                                   '()
                                   (list (@make 110
                                                '()
                                                (list (@make 6
                                                             '()
                                                             (list (@make 510
                                                                          '()
                                                                          (list (@make 205
                                                                                       2
                                                                                       '())))
                                                                   (@make 205
                                                                          1
                                                                          '())))))
                                         (@make 107 -3 '())))))
               (@make 7
                      '()
                      (list (@make 308 '() '())
                            (@make 17 '() (list (@make 163 -3 '()))))))))

(define (@make_proc_test)
  (let ((/calls-save /calls)
        (/tvs '())
        (/as-save /as)
        (/body-save /body)
        (/span-save /span))
    (set! /calls '())
    (set! /as (@as_type))
    (set! /body (list (@i)))
    (set! /span (+ (@span) 1))
    (cond ((= (@st (@i)) //t_/statements)
           (set! /span (@size (@i)))
           (@down)
           (set! /body (list (@i)))))
    (cond ((= (@st (@i)) //t_/action)
           (cond ((and (= (@size (list-ref (@i) (+ 1 2))) 1)
                       (= (@st (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))
                          //t_/call))
                  (@fail "Cannot make an action call into a procedure call"))
                 ((and (equal? /as "Rec")
                       (or (null? (@calls (@i)))
                           (equal?
                             (car (car (@calls (@i))))
                             (@v (list-ref (@i) (+ 1 1))))))
                  (@pass))
                 ((or (equal? /as "Reg") (null? (@calls (@i))))
                  (@pass))
                 (#t
                  (@fail "The action system is not regular, or the action contains calls"))))
          ((not (= (@gt (@i)) //t_/statement))
           (@fail "A procedure can only be made from an action or a list of statements"))
          (#t
           (let while-loop ()
             (cond ((> /span 1)
                    (begin
                      (@right)
                      (set! /body (cons (@i) /body))
                      (set! /span (- /span 1)))
                    (while-loop))
                   (#t #t)))
           (@edit)
           (@new_program
             (@make //t_/statements '() (reverse /body)))
           (set! /calls (@calls (@program)))
           (set! /tvs (@gen_tvs (@program) /as))
           (cond ((> (if (vector? /calls)
                       (vector-length /calls)
                       (length /calls))
                     1)
                  (@fail "The proc body calls two actions"))
                 ((= (if (vector? /calls)
                       (vector-length /calls)
                       (length /calls))
                     1)
                  (cond ((and (equal? /as "Reg") (@regular? (@program)))
                         (@pass))
                        (#t
                         (@fail "The proc body has calls and is not regular"))))
                 ((and (equal? /tvs (list 1))
                       (@gen_reducible? (@program) /as))
                  (@pass))
                 ((and (not (equal? /tvs (list 0)))
                       (not (null? /tvs)))
                  (@fail "The EXITs are unsuitable for taking out of the proposed body"))
                 (#t (@pass)))
           (@undo_edit)))
    (set! /calls /calls-save)
    (set! /as /as-save)
    (set! /body /body-save)
    (set! /span /span-save)))

(define (@make_proc_code //data)
  (let ((/span-save /span))
    (set! /span (+ (@span) 1))
    (cond ((= (@st (@i)) //t_/statements)
           (set! /span (@size (@i)))
           (@down)))
    (@make_proc_span //data /span)
    (set! /span /span-save)))

(define (@make_proc_span /name-par /span-par)
  (let ((/span-save /span) (/name-save /name))
    (set! /span /span-par)
    (set! /name /name-par)
    (let ((/body-save /body)
          (/orig_posn '())
          (/base "")
          (/calls-save /calls)
          (/calls_z '())
          (/call-save /call)
          (/tvs '())
          (/as-save /as)
          (/i-save /i)
          (/tv-save /tv)
          (/exit_flag-save /exit_flag)
          (//z-save //z)
          (/need_flag-save /need_flag)
          (/flag_posn '())
          (/aname '())
          (/pos '())
          (//i (@i)))
      (set! /body (list (@i)))
      (set! /calls '())
      (set! /call '())
      (set! /as (@as_type))
      (set! /i 0)
      (set! /tv 0)
      (set! /exit_flag '())
      (set! //z (@make_name "Z"))
      (set! /need_flag 0)
      (cond ((and (string? /name) (not (equal? /name "")))
             (set! /name (@make_name /name))))
      (cond ((equal? /name "")
             (cond ((= (@st (@i)) //t_/action)
                    (set! /name (@v (list-ref (@i) (+ 1 1)))))
                   (#t (set! /name (@make_name "p"))))))
      (set! /calls (@mp_proc_calls))
      (cond ((or (member /name /calls)
                 (equal? /name (@make_name "p")))
             (set! /i 1)
             (set! /base (@n_string /name))
             (set! /name
               (@make_name
                 (concat (string-append /base "_") (@string /i))))
             (let while-loop ()
               (cond ((member /name /calls)
                      (begin
                        (set! /i (+ /i 1))
                        (set! /name
                          (@make_name
                            (concat (string-append /base "_") (@string /i)))))
                      (while-loop))
                     (#t #t)))))
      (let while-loop ()
        (cond ((and (@up?) (not (= (@st (@i)) //t_/a_/s)))
               (begin (set! /pos (cons (@posn_n) /pos)) (@up))
               (while-loop))
              (#t #t)))
      (cond ((or (not (= (@st (@i)) //t_/a_/s))
                 (equal?
                   (@v (list-ref (@i) (+ 1 1)))
                   (@make_name "_enter_"))
                 (equal?
                   (@v (list-ref (@i) (+ 1 1)))
                   (@make_name "_enter_1"))
                 (equal?
                   (@v (list-ref (@i) (+ 1 1)))
                   (@make_name "MAIN_1")))
             (set! /exit_flag
               (@make //t_/variable
                      (@make_name "exit_flag")
                      '())))
            (#t
             (set! /exit_flag
               (@make //t_/variable
                      (@make_name
                        (string-append "exit_flag_" (@n_string /name)))
                      '()))
             (@paste_before
               (@make 110
                      '()
                      (list (@make 6
                                   '()
                                   (list (@expn_to_var /exit_flag)
                                         (@make 205 0 '()))))))
             (set! /flag_posn (@posn))
             (@right)))
      (let while-loop ()
        (cond ((not (null? /pos))
               (begin
                 (@down_to (car /pos))
                 (set! /pos (cdr /pos)))
               (while-loop))
              (#t #t)))
      (set! /orig_posn (@posn))
      (cond ((and (= (@st (@i)) //t_/action)
                  (equal? /as "Rec"))
             (@down_to 2)
             (set! /span (@size (@i)))
             (@down)
             (set! /orig_posn (@posn))
             (set! /body (list (@i))))
            ((= (@st (@i)) //t_/action)
             (set! /aname (@v (list-ref (@i) (+ 1 1))))
             (@down_last)
             (set! /calls (@calls (@i)))
             (set! /calls_z (@mp_remove_z /calls))
             (cond ((or (= (if (vector? /calls)
                             (vector-length /calls)
                             (length /calls))
                           0)
                        (and (= (if (vector? /calls_z)
                                  (vector-length /calls_z)
                                  (length /calls_z))
                                0)
                             (@regular? (@i)))
                        (and (= (if (vector? /calls_z)
                                  (vector-length /calls_z)
                                  (length /calls_z))
                                1)
                             (not (equal?
                                    (let ((name (let ((name /calls_z))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))
                                    /aname))
                             (@regular? (@i))))
                    (set! /span (@size (@i)))
                    (@down)
                    (set! /orig_posn (@posn)))
                   (#t
                    (@down)
                    (set! /orig_posn (@posn))
                    (set! /span 0)
                    (set! /fl_flag1 0)
                    (let while-loop ()
                      (cond ((= /fl_flag1 0)
                             (begin
                               (set! /calls (@calls (@i)))
                               (cond ((not (null? /calls))
                                      (cond ((and (= (if (vector? /calls)
                                                       (vector-length /calls)
                                                       (length /calls))
                                                     1)
                                                  (@regular? (@i)))
                                             (set! /span (+ /span 1))))
                                      (set! /fl_flag1 1))
                                     (#t
                                      (set! /span (+ /span 1))
                                      (cond ((not (@right?)) (set! /fl_flag1 1))
                                            (#t (@right) (set! /fl_flag1 0))))))
                             (while-loop))
                            (#t #t)))
                    (@goto /orig_posn)))
             (cond ((= /span 0)
                    (@paste_before (@skip))
                    (set! /span 1)))
             (set! /body (list (@i)))))
      (set! /i /span)
      (let while-loop ()
        (cond ((> /i 1)
               (begin
                 (@right)
                 (set! /body (cons (@i) /body))
                 (set! /i (- /i 1)))
               (while-loop))
              (#t #t)))
      (@edit)
      (@new_program
        (@make //t_/statements '() (reverse /body)))
      (set! /calls (@calls (@program)))
      (set! /tvs (@gen_tvs (@program) /as))
      (cond ((equal? /as "Rec") (set! /tv 0) (@undo_edit))
            ((and (equal? /tvs (list 1)) (null? /calls))
             (set! /tv 1)
             (@undo_edit))
            ((and (null? /calls)
                  (or (equal? /tvs (list 0)) (null? /tvs)))
             (set! /tv 0)
             (@undo_edit))
            ((and (<= (if (vector? (@mp_remove_z /calls))
                        (vector-length (@mp_remove_z /calls))
                        (length (@mp_remove_z /calls)))
                      1)
                  (equal? /tvs (list //omega)))
             (set! /tv 0)
             (cond ((> (if (vector? /calls)
                         (vector-length /calls)
                         (length /calls))
                       1)
                    (set! /need_flag 1)
                    (set! /calls (@mp_remove_z /calls))))
             (cond ((and (= /need_flag 0)
                         (= (let ((name (let ((name /calls))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))))
                              (if (vector? name)
                                (vector-ref name (- 2 1))
                                (list-ref name (- 2 1))))
                            1)
                         (= (@st (car /body)) //t_/call))
                    (set! /span (- /span 1))
                    (@undo_edit)
                    (@goto /orig_posn))
                   (#t
                    (@new_program
                      (@make //t_/statements
                             '()
                             (list (@make //t_/floop '() (list (@program))))))
                    (@foreach_statement
                      /foreach-make_proc-1
                      0
                      (@as_type)
                      0)
                    (cond ((null? (@program)) (@new_program (@skips))))
                    (@foreach_statement
                      /foreach-make_proc-2
                      0
                      (@as_type)
                      0)
                    (cond ((null? (@program)) (@new_program (@skips))))
                    (@down)
                    (cond ((@trans? //t/r_/remove_/dummy_/loop)
                           (@trans //t/r_/remove_/dummy_/loop "")))
                    (@up)
                    (set! /call
                      (@make //t_/call
                             (let ((name (let ((name /calls))
                                           (if (vector? name)
                                             (vector-ref name (- 1 1))
                                             (list-ref name (- 1 1))))))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))
                             '()))
                    (cond ((= /need_flag 1)
                           (set! /call
                             (@make 114
                                    '()
                                    (list (@make 7
                                                 '()
                                                 (list (@make 313
                                                              '()
                                                              (list (@var_to_expn
                                                                      /exit_flag)
                                                                    (@make 205
                                                                           1
                                                                           '())))
                                                       (@make 17
                                                              '()
                                                              (list (@make 112
                                                                           (@make_name
                                                                             "Z")
                                                                           '())))))
                                          (@make 7
                                                 '()
                                                 (list (@make 308 '() '())
                                                       (@make 17
                                                              '()
                                                              (list /call)))))))))
                    (set! /body
                      (concat (@cs (@program)) (list /call)))
                    (@undo_edit)
                    (@goto /orig_posn)
                    (let while-loop ()
                      (cond ((> /span 1)
                             (begin (@delete) (set! /span (- /span 1)))
                             (while-loop))
                            (#t #t)))
                    (@splice_over /body)
                    (set! /span
                      (- (if (vector? /body)
                           (vector-length /body)
                           (length /body))
                         1)))))
            (#t
             (begin
               (display "ERROR in Make_Proc_Code!!!")
               (newline)
               (force-output))
             (begin
               (display "calls = ")
               (begin
                 (display /calls)
                 (begin
                   (display " tvs = ")
                   (begin (display /tvs) (newline) (force-output)))))
             (@pp_item (@i) 80 "")
             (error "Make_Proc_Code" "Error" "???")))
      (cond ((and (= /need_flag 0) (not (null? /flag_posn)))
             (@goto /flag_posn)
             (@paste_over (@skip))))
      (@goto /orig_posn)
      (@make_proc /name /span /tv)
      (set! /body /body-save)
      (set! /calls /calls-save)
      (set! /call /call-save)
      (set! /as /as-save)
      (set! /i /i-save)
      (set! /tv /tv-save)
      (set! /exit_flag /exit_flag-save)
      (set! //z //z-save)
      (set! /need_flag /need_flag-save))
    (set! /span /span-save)
    (set! /name /name-save)))

(define (@make_proc /name-par /span-par /tv-par)
  (let ((/tv-save /tv)
        (/span-save /span)
        (/name-save /name))
    (set! /tv /tv-par)
    (set! /span /span-par)
    (set! /name /name-par)
    (begin
      (display "Creating procedure `")
      (begin
        (display (@n_string /name))
        (begin
          (display "', size = ")
          (begin
            (display /span)
            (begin
              (display ", tv = ")
              (begin (display /tv) (newline) (force-output)))))))
    (begin
      (display "  position = ")
      (begin
        (display (@posn))
        (newline)
        (force-output)))
    (let ((/expns-save /expns)
          (/lvalues-save /lvalues)
          (/orig_posn (@posn))
          (/body-save /body)
          (/rbody '())
          (/defn '())
          (/call-save /call)
          (/n-save /n)
          (/i-save /i)
          (/where_posn '()))
      (set! /expns (@make //t_/expressions '() '()))
      (set! /lvalues (@make //t_/lvalues '() '()))
      (set! /body (list (@i)))
      (set! /call '())
      (set! /n 0)
      (set! /i 0)
      (cond ((null? /tv) (set! /tv 0)))
      (@paste_over
        (@make //t_/proc_/call
               '()
               (list (@name /name) /expns /lvalues)))
      (cond ((> /tv 0)
             (@paste_after (@make //t_/exit /tv '()))
             (@right)))
      (cond ((> /span 1)
             (@right)
             (set! /i /span)
             (let while-loop ()
               (cond ((> /i 1)
                      (begin
                        (set! /i (- /i 1))
                        (set! /body (cons (@i) /body))
                        (@delete))
                      (while-loop))
                     (#t #t)))))
      (set! /body (reverse /body))
      (set! /rbody (@make //t_/statements '() /body))
      (cond ((> /tv 0)
             (set! /rbody (@increment /rbody /as (- /tv) 0))))
      (set! /n (@mp_ensure_where /n))
      (cond ((>= /n 0)
             (set! /orig_posn
               (concat
                 (concat (@sub_seg /orig_posn 1 /n) (list 1 1))
                 (@final_seg /orig_posn (+ /n 1))))))
      (set! /where_posn (@posn))
      (begin
        (display "Searching for other copies of body: ")
        (force-output))
      (@foreach_stats
        /foreach-make_proc-3
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (begin (display " ") (newline) (force-output))
      (@goto /where_posn)
      (cond ((not (= (@st (@i)) //t_/where))
             (error "ERROR_3 in @Make_Proc!!!")))
      (@down_to 2)
      (set! /defn
        (@make //t_/proc
               '()
               (list (@name /name) /lvalues /lvalues /rbody)))
      (cond ((= (@size (@i)) 0)
             (@paste_over
               (@make //t_/definitions '() (list /defn))))
            (#t (@down_last) (@paste_after /defn) (@right)))
      (set! /call
        (@make //t_/proc_/call
               '()
               (list (@name /name) /expns /lvalues)))
      (@foreach_statement
        /foreach-make_proc-4
        0
        (@as_type)
        0)
      (cond ((null? (@program)) (@new_program (@skips))))
      (@goto /orig_posn)
      (set! /expns /expns-save)
      (set! /lvalues /lvalues-save)
      (set! /body /body-save)
      (set! /call /call-save)
      (set! /n /n-save)
      (set! /i /i-save))
    (set! /tv /tv-save)
    (set! /span /span-save)
    (set! /name /name-save)))

(define (@paste_cond /body-par)
  (let ((/body-save /body))
    (set! /body /body-par)
    (@paste_over
      (@make 114
             '()
             (list (@make 7
                          '()
                          (list (@make 308 '() '()) (@make 17 '() /body)))
                   (@make 7
                          '()
                          (list (@make 308 '() '())
                                (@make 17 '() (list (@make 145 '() '()))))))))
    (set! /body /body-save)))

(define (@prefix_equal? //a //b)
  (or (null? //a)
      (and (not (null? //b))
           (@equal? (car //a) (car //b))
           (@prefix_equal? (cdr //a) (cdr //b)))))

(define (@mp_remove_z /calls-par)
  (let ((/calls-save /calls)
        (//z-save //z)
        (//r '())
        (/call-save /call)
        (funct-result '()))
    (set! /calls /calls-par)
    (set! //z (@make_name "Z"))
    (set! /call '())
    (let ((var-save /call) (seq-save /calls))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /call (car for-tmp))
               (cond ((not (equal?
                             (let ((name /call))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))
                             //z))
                      (set! //r (cons /call //r))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /call var-save))
    (set! funct-result (reverse //r))
    (set! /calls /calls-save)
    (set! //z //z-save)
    (set! /call /call-save)
    funct-result))

(define (@mp_ensure_where /n-par)
  (let ((/n-save /n) (funct-result '()))
    (set! /n /n-par)
    (let ((/orig_posn (@posn))
          (/destination (@make_name "destination")))
      (set! /n (- 1))
      (@up)
      (let while-loop ()
        (cond ((and (or (not (= //t_/var (@st (@i))))
                        (not (member
                               /destination
                               (@assigned (list-ref (@i) (+ 1 1))))))
                    (not (= //t_/where (@st (@i))))
                    (@up?))
               (@up)
               (while-loop))
              (#t #t)))
      (cond ((= (@st (@i)) //t_/var)
             (@down_to 2)
             (set! /n
               (if (vector? (@posn))
                 (vector-length (@posn))
                 (length (@posn))))
             (@paste_over
               (@make //t_/statements
                      '()
                      (list (@make //t_/where
                                   '()
                                   (list (@i)
                                         (@make //t_/definitions '() '()))))))
             (@down))
            ((not (= (@st (@i)) //t_/where))
             (cond ((not (= (@st (@i)) //t_/statements))
                    (@goto /orig_posn)
                    (@up)))
             (set! /n
               (if (vector? (@posn))
                 (vector-length (@posn))
                 (length (@posn))))
             (cond ((not (= (@st (@i)) //t_/statements))
                    (error "ERROR_1 in @MP_Ensure_Where!!!")))
             (@paste_over
               (@make //t_/statements
                      '()
                      (list (@make //t_/where
                                   '()
                                   (list (@i)
                                         (@make //t_/definitions '() '()))))))
             (@down)))
      (cond ((not (= (@st (@i)) //t_/where))
             (error "ERROR_2 in @MP_Ensure_Where!!!"))))
    (set! funct-result /n)
    (set! /n /n-save)
    funct-result))

(define (@mp_proc_calls)
  (let ((/calls-save /calls)
        (/posn (@posn))
        (funct-result '()))
    (set! /calls '())
    (let while-loop ()
      (cond ((and (@up?) (not (= (@st (@i)) //t_/where)))
             (@up)
             (while-loop))
            (#t #t)))
    (set! /calls
      (@make_set
        (let ((l (@proc_calls (@i))) (map-result '()))
          (let while-loop ()
            (cond ((not (null? l))
                   (set! map-result (cons (car (car l)) map-result))
                   (set! l (cdr l))
                   (while-loop))
                  (#t #t)))
          (reverse map-result))))
    (cond ((= (@st (@i)) //t_/where)
           (set! /calls
             (@set_union
               /calls
               (@make_set
                 (let ((l (@cs (list-ref (@i) (+ 1 2))))
                       (map-result '()))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! map-result (cons (@v1 (car l)) map-result))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   (reverse map-result)))))))
    (@goto '())
    (@foreach_statement
      /foreach-make_proc-5
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@goto /posn)
    (set! funct-result /calls)
    (set! /calls /calls-save)
    funct-result))

#t

