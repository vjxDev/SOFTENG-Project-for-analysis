(define (@else_if_to_elsif_test)
  (cond ((= (@st (@i)) //t_/cond) (@down_last)))
  (cond ((and (= (@gt (@i)) //t_/guarded) (not (@right?)))
         (@down_last)
         (@down)
         (let ((/n 0))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (cond ((= (@st (@i)) //t_/cond)
                             (set! /n (+ /n 1))
                             (cond ((> /n 1)
                                    (@fail "The ELSE clause has more than one IF statement.")
                                    (set! /fl_flag1 1))
                                   (#t (set! /fl_flag1 0))))
                            ((= (@st (@i)) //t_/comment) (set! /fl_flag1 0))
                            (#t
                             (@fail "The ELSE clause contains something other than an IF statement.")
                             (set! /fl_flag1 1)))
                      (cond ((= /fl_flag1 0)
                             (cond ((@right?) (@right) (set! /fl_flag1 0))
                                   ((= /n 0)
                                    (@fail "The ELSE clause doesn't have an IF statement.")
                                    (set! /fl_flag1 1))
                                   (#t (@pass) (set! /fl_flag1 1))))))
                    (while-loop))
                   (#t #t)))))
        (#t
         (@fail "The selected item is not an ELSE clause or IF statement."))))

(define (@else_if_to_elsif_code //data)
  (let ((/up 0) (/comments '()) (//s '()))
    (cond ((= (@st (@i)) //t_/cond)
           (set! /up 1)
           (@down_last)))
    (@down_last)
    (@down)
    (cond ((= (@st (@i)) //t_/comment)
           (set! /comments (cons (@i) /comments)))
          (#t (set! //s (@i))))
    (let while-loop ()
      (cond ((@right?)
             (begin
               (@right)
               (cond ((= (@st (@i)) //t_/comment)
                      (set! /comments (cons (@i) /comments)))
                     (#t (set! //s (@i)))))
             (while-loop))
            (#t #t)))
    (@up)
    (@up)
    (@splice_over (@cs //s))
    (@down_last)
    (@down)
    (@splice_before (reverse /comments))
    (@up)
    (@up)
    (cond ((= /up 1) (@up)))))

#t

