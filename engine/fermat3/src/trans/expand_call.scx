(define (/foreach-expand_call-1 //depth //a/s_/type)
  (set! //temp //the_/assigns)
  (set! /fl_flag1 0)
  (let while-loop ()
    (cond ((= /fl_flag1 0)
           (cond ((equal?
                    (@value (@i))
                    (@value (car (car //temp))))
                  (@paste_over (car (cdr (car //temp))))
                  (set! /fl_flag1 1))
                 (#t
                  (set! //temp (cdr //temp))
                  (cond ((null? //temp) (set! /fl_flag1 1))
                        (#t (set! /fl_flag1 0)))))
           (while-loop))
          (#t #t))))

(define (@expand_call_test)
  (cond ((= (@st (@i)) //t_/call)
         (cond ((equal? (@v (@i)) (@make_name "Z"))
                (@fail "A call to the action Z is a special statement which terminates the action system."))
               (#t
                (let ((//n (@v (@i))))
                  (let while-loop ()
                    (cond ((and (not (= (@st (@i)) //t_/actions)) (@up?))
                           (@up)
                           (while-loop))
                          (#t #t)))
                  (cond ((not (= (@st (@i)) //t_/actions))
                         (@fail "Action system not found"))
                        (#t
                         (@down)
                         (set! /fl_flag1 0)
                         (let while-loop ()
                           (cond ((= /fl_flag1 0)
                                  (cond ((equal?
                                           (@v (list-ref (@i) (+ 1 1)))
                                           //n)
                                         (@pass)
                                         (set! /fl_flag1 1))
                                        ((@right?) (@right) (set! /fl_flag1 0))
                                        (#t (set! /fl_flag1 1)))
                                  (while-loop))
                                 (#t #t)))))
                  (cond ((not (@passed?))
                         (@fail "Action definition not found")))))))
        ((= (@st (@i)) //t_/proc_/call)
         (@goto_defn
           (@v (list-ref (@i) (+ 1 1)))
           //t_/proc)
         (cond ((= (@st (@i)) //t_/proc) (@pass))
               (#t (@fail "Procedure definition not found"))))
        ((= (@st (@i)) //t_/funct_/call)
         (@goto_defn
           (@v (list-ref (@i) (+ 1 1)))
           //t_/funct)
         (cond ((and (= (@st (@i)) //t_/funct)
                     (or (> (@size (list-ref (@i) (+ 1 4))) 1)
                         (not (= (@st (list-ref
                                        (list-ref (@i) (+ 1 4))
                                        (+ 1 1)))
                                 //t_/skip))))
                (@fail "Function definition includes statements"))
               ((= (@st (@i)) //t_/funct) (@pass))
               (#t (@fail "Function definition not found"))))
        (#t
         (@fail "The selected item is not any kind of call."))))

(define (@expand_call_code //data)
  (let ((//orig_/pos (@posn)) (//s '()))
    (cond ((= (@st (@i)) //t_/call)
           (let ((//n (@v (@i))))
             (let while-loop ()
               (cond ((not (= (@st (@i)) //t_/actions))
                      (@up)
                      (while-loop))
                     (#t #t)))
             (@down)
             (let while-loop ()
               (cond ((not (equal? (@v (list-ref (@i) (+ 1 1))) //n))
                      (@right)
                      (while-loop))
                     (#t #t)))
             (set! //s (list-ref (@i) (+ 1 2)))
             (@goto //orig_/pos)
             (@splice_over (@cs //s))))
          ((= (@st (@i)) //t_/proc_/call)
           (@goto_defn
             (@v (list-ref (@i) (+ 1 1)))
             //t_/proc)
           (let ((//f/params (@cs (list-ref (@i) (+ 1 2))))
                 (//var_/f/params (@cs (list-ref (@i) (+ 1 3))))
                 (//stmnts (list-ref (@i) (+ 1 4)))
                 (//assigs '())
                 (//assigs2 '()))
             (@goto //orig_/pos)
             (set! //params (@cs (list-ref (@i) (+ 1 2))))
             (set! //var_/params
               (@cs (list-ref (@i) (+ 1 3))))
             (let while-loop ()
               (cond ((> (if (vector? //f/params)
                           (vector-length //f/params)
                           (length //f/params))
                         0)
                      (begin
                        (set! //assigs
                          (cons (@make //t_/assign
                                       '()
                                       (list (let ((name //f/params))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))
                                             (let ((name //params))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))))
                                //assigs))
                        (set! //f/params (cdr //f/params))
                        (set! //params (cdr //params)))
                      (while-loop))
                     (#t #t)))
             (let while-loop ()
               (cond ((> (if (vector? //var_/f/params)
                           (vector-length //var_/f/params)
                           (length //var_/f/params))
                         0)
                      (begin
                        (cond ((not (@lr_equal?
                                      (let ((name //var_/params))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))
                                      (let ((name //var_/f/params))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                               (set! //assigs
                                 (cons (@make //t_/assign
                                              '()
                                              (list (let ((name //var_/f/params))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- 1 1))
                                                        (list-ref
                                                          name
                                                          (- 1 1))))
                                                    (@var_to_expn
                                                      (let ((name //var_/params))
                                                        (if (vector? name)
                                                          (vector-ref
                                                            name
                                                            (- 1 1))
                                                          (list-ref
                                                            name
                                                            (- 1 1)))))))
                                       //assigs))
                               (set! //assigs2
                                 (cons (@make //t_/assign
                                              '()
                                              (list (let ((name //var_/params))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- 1 1))
                                                        (list-ref
                                                          name
                                                          (- 1 1))))
                                                    (@var_to_expn
                                                      (let ((name //var_/f/params))
                                                        (if (vector? name)
                                                          (vector-ref
                                                            name
                                                            (- 1 1))
                                                          (list-ref
                                                            name
                                                            (- 1 1)))))))
                                       //assigs2))))
                        (set! //var_/f/params (cdr //var_/f/params))
                        (set! //var_/params (cdr //var_/params)))
                      (while-loop))
                     (#t #t)))
             (@edit)
             (@paste_over
               (@make //t_/var
                      '()
                      (list (@make //t_/assigns '() (reverse //assigs))
                            //stmnts)))
             (@down_last)
             (@down_last)
             (cond ((not (null? //assigs2))
                    (@paste_after
                      (@make //t_/assignment '() (reverse //assigs2)))))
             (@up)
             (@up)
             (@end_edit)
             (cond ((@trans? //t/r_/separate_/right)
                    (@trans //t/r_/separate_/right "")))
             (cond ((@trans? //t/r_/separate_/left)
                    (@trans //t/r_/separate_/left "")))))
          ((= (@st (@i)) //t_/funct_/call)
           (let ((//exps (@cs (list-ref (@i) (+ 1 2))))
                 (//replacement_/expression '()))
             (@goto_defn
               (@v (list-ref (@i) (+ 1 1)))
               //t_/funct)
             (let ((//the_/assigns-save //the_/assigns)
                   (//f/pars (@cs (list-ref (@i) (+ 1 2)))))
               (set! //the_/assigns '())
               (@down_to 3)
               (@edit_parent)
               (set! //the_/assigns
                 (let ((l (@components (@i))) (map-result '()))
                   (let while-loop ()
                     (cond ((not (null? l))
                            (set! map-result
                              (cons (@components (car l)) map-result))
                            (set! l (cdr l))
                            (while-loop))
                           (#t #t)))
                   (reverse map-result)))
               (@right)
               (@right)
               (@substitute_parameter_values //the_/assigns)
               (set! //the_/assigns '())
               (let while-loop ()
                 (cond ((not (null? //f/pars))
                        (begin
                          (set! //the_/assigns
                            (concat
                              //the_/assigns
                              (list (list (car //f/pars) (car //exps)))))
                          (set! //f/pars (cdr //f/pars))
                          (set! //exps (cdr //exps)))
                        (while-loop))
                       (#t #t)))
               (@substitute_parameter_values //the_/assigns)
               (set! //replacement_/expression (@i))
               (@undo_edit)
               (@goto //orig_/pos)
               (@paste_over //replacement_/expression)
               (set! //the_/assigns //the_/assigns-save)))))))

(define (@substitute_parameter_values //the_/assigns-par)
  (let ((//the_/assigns-save //the_/assigns))
    (set! //the_/assigns //the_/assigns-par)
    (cond ((not (null? //the_/assigns))
           (let ((//temp-save //temp))
             (set! //temp '())
             (@foreach_variable
               /foreach-expand_call-1
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (set! //temp //temp-save))))
    (set! //the_/assigns //the_/assigns-save)))

(define (@goto_defn /name /type)
  (set! /fl_flag2 0)
  (let while-loop ()
    (cond ((= /fl_flag2 0)
           (cond ((not (@up?)) (set! /fl_flag2 1))
                 (#t
                  (@up)
                  (set! /fl_flag1 0)
                  (let while-loop ()
                    (cond ((= /fl_flag1 0)
                           (cond ((= (@st (@i)) //t_/where) (set! /fl_flag1 1))
                                 ((@up?) (@up) (set! /fl_flag1 0))
                                 (#t (set! /fl_flag1 2)))
                           (while-loop))
                          (#t #t)))
                  (cond ((= /fl_flag1 2) (set! /fl_flag2 1))
                        (#t
                         (@down_last)
                         (@down)
                         (let while-loop ()
                           (cond ((and (or (not (= /type (@st (@i))))
                                           (not (equal?
                                                  /name
                                                  (@v (list-ref
                                                        (@i)
                                                        (+ 1 1))))))
                                       (@right?))
                                  (@right)
                                  (while-loop))
                                 (#t #t)))
                         (cond ((and (= /type (@st (@i)))
                                     (equal?
                                       /name
                                       (@v (list-ref (@i) (+ 1 1)))))
                                (set! /fl_flag2 1))
                               (#t (@up) (@up) (set! /fl_flag2 0)))))))
           (while-loop))
          (#t #t))))

#t

