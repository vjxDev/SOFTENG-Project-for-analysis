(define /%const__for_in_to_reduce__1
  (@make 154
         '()
         (list (@make 506 -1 '())
               (@make 217 -2 '())
               (@make 17
                      '()
                      (list (@make 107 -3 '())
                            (@make 110
                                   '()
                                   (list (@make 6
                                                '()
                                                (list (@make 506 -4 '())
                                                      (@make 217
                                                             -5
                                                             '()))))))))))

(define (@for_in_to_reduce_test)
  (cond ((not (= (@st (@i)) //t_/for_/in))
         (@fail "Current item is not a FOR x IN y loop"))
        (#t
         (let ((/__/o/k 1))
           (set! /__/o/k
             (@new_match
               /%const__for_in_to_reduce__1
               (@i)
               /__/o/k))
           (cond ((= /__/o/k 1)
                  (let ((/__e_save /e)
                        (/__v_save /v)
                        (/__/s_save //s)
                        (/__/l_save //l)
                        (/__i_save /i))
                    (set! /e (vector-ref /__/match_array 4))
                    (set! /v (vector-ref /__/match_array 3))
                    (set! //s (vector-ref /__/match_array 2))
                    (set! //l (vector-ref /__/match_array 1))
                    (set! /i (vector-ref /__/match_array 0))
                    (cond ((not (@set_subset?
                                  (let ((l (let ((l //s) (map-result '()))
                                             (let while-loop ()
                                               (cond ((not (null? l))
                                                      (set! map-result
                                                        (cons (@stat_types
                                                                (car l))
                                                              map-result))
                                                      (set! l (cdr l))
                                                      (while-loop))
                                                     (#t #t)))
                                             (reverse map-result)))
                                        (reduce-result '()))
                                    (cond ((null? l) '())
                                          (#t
                                           (set! reduce-result (car l))
                                           (set! l (cdr l))
                                           (let while-loop ()
                                             (cond ((not (null? l))
                                                    (set! reduce-result
                                                      (@set_union
                                                        reduce-result
                                                        (car l)))
                                                    (set! l (cdr l))
                                                    (while-loop))
                                                   (#t #t)))
                                           reduce-result)))
                                  (list //t_/assert)))
                           (@fail "Loop body is not in a suitable form"))
                          ((null? (@fr_reduce_pars /v /e /i //l))
                           (@fail "Cannot determine the parameters for the REDUCE"))
                          (#t (@pass)))
                    (set! /e /__e_save)
                    (set! /v /__v_save)
                    (set! //s /__/s_save)
                    (set! //l /__/l_save)
                    (set! /i /__i_save)))
                 (#t (@fail "FOR loop is not in a suitable form")))))))

(define (@for_in_to_reduce_code //data)
  (let ((/pars '())
        (/e1 '())
        (/e2 '())
        (/e3 '())
        (/new '()))
    (let ((/__/o/k 1))
      (set! /__/o/k
        (@new_match
          /%const__for_in_to_reduce__1
          (@i)
          /__/o/k))
      (cond ((= /__/o/k 1)
             (let ((/__e_save /e)
                   (/__v_save /v)
                   (/__/s_save //s)
                   (/__/l_save //l)
                   (/__i_save /i))
               (set! /e (vector-ref /__/match_array 4))
               (set! /v (vector-ref /__/match_array 3))
               (set! //s (vector-ref /__/match_array 2))
               (set! //l (vector-ref /__/match_array 1))
               (set! /i (vector-ref /__/match_array 0))
               (set! /pars (@fr_reduce_pars /v /e /i //l))
               (cond ((= (if (vector? /pars)
                           (vector-length /pars)
                           (length /pars))
                         1)
                      (set! /e3
                        (let ((name /pars))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))))
                     (#t
                      (set! /e1
                        (let ((name /pars))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1)))))
                      (set! /new '())
                      (let ((var-save //s1) (seq-save //s))
                        (if (vector? seq-save)
                          (set! seq-save (vector-elts seq-save)))
                        (let for-in-loop ((for-tmp seq-save))
                          (cond ((not (null? for-tmp))
                                 (set! //s1 (car for-tmp))
                                 (set! /new
                                   (cons (@replace
                                           //s1
                                           //l
                                           (@lvalue_to_expn /i))
                                         /new))
                                 (for-in-loop (cdr for-tmp)))
                                (#t #t)))
                        (set! //s1 var-save))
                      (cond ((not (null? /new))
                             (@paste_before
                               (@make //t_/assert
                                      '()
                                      (list (@simplify_cond
                                              (@make //t_/and '() /new)))))
                             (@right)))
                      (set! /e3
                        (@make //t_/reduce '() (@sub_seg /pars 1 2)))
                      (cond ((or (= (@st /e) //t_/funct_/call)
                                 (= (@st /e) //t_/x_/funct_/call)
                                 (= (@st /e) //t_/m/w_/funct_/call))
                             (set! /e3
                               (@make (@st /e)
                                      '()
                                      (list (list-ref /e (+ 1 1))
                                            (@make //t_/expressions
                                                   '()
                                                   (list (@lvalue_to_expn /v)
                                                         /e3))))))
                            (#t
                             (set! /e3
                               (@make (@st /e)
                                      '()
                                      (list (@lvalue_to_expn /v) /e3)))))))
               (@paste_over
                 (@make 110
                        '()
                        (list (@make 6
                                     '()
                                     (list (@expn_to_var /v)
                                           (@var_to_expn /e3))))))
               #t
               (set! /e /__e_save)
               (set! /v /__v_save)
               (set! //s /__/s_save)
               (set! //l /__/l_save)
               (set! /i /__i_save)))))))

(define (@fr_reduce_pars /vv /e-par /i-par //l-par)
  (let ((//l-save //l)
        (/i-save /i)
        (/e-save /e)
        (/v-save /v)
        (/name '())
        (//r '())
        (funct-result '()))
    (set! //l //l-par)
    (set! /i /i-par)
    (set! /e /e-par)
    (set! /v (@lvalue_to_expn /vv))
    (cond ((and (= (@size /e) 2)
                (member (@st /e) //comm_/ops)
                (@equal? /v (list-ref /e (+ 1 2))))
           (set! /e
             (@make (@st /e)
                    '()
                    (list (list-ref /e (+ 1 2))
                          (list-ref /e (+ 1 1)))))))
    (cond (#f
           (begin (display "v = ") (newline) (force-output))
           (@print_wsl /v "")
           (begin (display "e = ") (newline) (force-output))
           (@print_wsl /e "")
           (begin (display "i = ") (newline) (force-output))
           (@print_wsl /i "")))
    (cond ((and (or (= (@st /e) //t_/funct_/call)
                    (= (@st /e) //t_/x_/funct_/call)
                    (= (@st /e) //t_/m/w_/funct_/call))
                (= (@size (list-ref /e (+ 1 2))) 2)
                (@equal?
                  /v
                  (list-ref (list-ref /e (+ 1 2)) (+ 1 1))))
           (set! //r
             (@fr_reduce_par2
               (list-ref /e (+ 1 1))
               /v
               (list-ref (list-ref /e (+ 1 2)) (+ 1 2))
               /i
               //l)))
          ((and (or (= (@st /e) //t_/plus)
                    (= (@st /e) //t_/minus)
                    (= (@st /e) //t_/times)
                    (= (@st /e) //t_/divide)
                    (= (@st /e) //t_/union)
                    (= (@st /e) //t_/intersection)
                    (= (@st /e) //t_/concat)
                    (= (@st /e) //t_/max)
                    (= (@st /e) //t_/min)
                    (= (@st /e) //t_/exponent))
                (= (@size /e) 2)
                (@equal? /v (list-ref /e (+ 1 1))))
           (cond ((= (@st /e) //t_/plus)
                  (set! /name (@name (@make_name "+"))))
                 ((= (@st /e) //t_/minus)
                  (set! /name (@name (@make_name "-"))))
                 ((= (@st /e) //t_/times)
                  (set! /name (@name (@make_name "*"))))
                 ((= (@st /e) //t_/divide)
                  (set! /name (@name (@make_name "/"))))
                 ((= (@st /e) //t_/union)
                  (set! /name (@name (@make_name "\\/"))))
                 ((= (@st /e) //t_/intersection)
                  (set! /name (@name (@make_name "/\\"))))
                 ((= (@st /e) //t_/concat)
                  (set! /name (@name (@make_name "++"))))
                 ((= (@st /e) //t_/exponent)
                  (set! /name (@name (@make_name "**"))))
                 (#t
                  (set! /name
                    (@name (@make_name (@type_name (@st /e)))))))
           (set! //r
             (@fr_reduce_par2
               /name
               /v
               (list-ref /e (+ 1 2))
               /i
               //l))))
    (set! funct-result //r)
    (set! //l //l-save)
    (set! /i /i-save)
    (set! /e /e-save)
    (set! /v /v-save)
    funct-result))

(define (@fr_reduce_par2
         /par1
         /v-par
         /e-par
         /i-par
         //l-par)
  (let ((//l-save //l)
        (/i-save /i)
        (/e-save /e)
        (/v-save /v)
        (//r '())
        (funct-result '()))
    (set! //l //l-par)
    (set! /i /i-par)
    (set! /e /e-par)
    (set! /v /v-par)
    (cond (#f
           (begin (display "v = ") (newline) (force-output))
           (@print_wsl /v "")
           (begin (display "e = ") (newline) (force-output))
           (@print_wsl /e "")
           (begin (display "i = ") (newline) (force-output))
           (@print_wsl /i "")
           (begin (display "L = ") (newline) (force-output))
           (@print_wsl //l "")))
    (cond ((@lr_equal? /e /i) (set! //r (list /par1 //l)))
          ((= (@st /e) //t_/number)
           (set! //r
             (list (@simplify_expn
                     (@make 222
                            '()
                            (list (@var_to_expn /e)
                                  (@make 244
                                         '()
                                         (list (@var_to_expn //l))))))))))
    (set! funct-result //r)
    (set! //l //l-save)
    (set! /i /i-save)
    (set! /e /e-save)
    (set! /v /v-save)
    funct-result))

#t

