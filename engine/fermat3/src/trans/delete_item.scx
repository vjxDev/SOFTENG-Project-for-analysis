(define /%const__delete_item__1
  (@make 205 1 '()))

(define /%const__delete_item__2
  (@make 205 0 '()))

(define (@delete_item_test)
  (let ((//s/t (@st (@i))))
    (cond ((= //s/t //t_/action)
           (let ((//n (@v (list-ref (@i) (+ 1 1)))))
             (cond ((equal? (@v (list-ref (@gparent) (+ 1 1))) //n)
                    (@fail "It is invalid to delete the starting action."))
                   (#t
                    (cond ((@called? //n (@parent))
                           (@fail "The action is called somewhere."))
                          (#t (@pass)))))))
          ((and (= //s/t //t_/proc)
                (= (@non_recursive_calls
                     (@v (list-ref (@i) (+ 1 1)))
                     (@gparent))
                   0))
           (@pass))
          ((and (or (= //s/t //t_/funct) (= //s/t //t_/b/funct))
                (= (@non_recursive_funct_calls
                     (@v (list-ref (@i) (+ 1 1)))
                     (@gparent))
                   0))
           (@pass))
          ((= //s/t //t_/assert) (@pass))
          ((= //s/t //t_/skip) (@pass))
          ((= //s/t //t_/comment) (@pass))
          ((and (= //s/t //t_/assignment)
                (= (@size (@i)) 1)
                (@lr_equal?
                  (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1))
                  (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))))
           (@pass))
          ((and (= //s/t //t_/while)
                (@false? (list-ref (@i) (+ 1 1))))
           (@pass))
          ((= //s/t //t_/guarded)
           (let ((//b (@simplify_cond (list-ref (@i) (+ 1 1))))
                 (//a (@make //t_/false '() '()))
                 (//cnd '())
                 (//p '()))
             (cond ((= (@st //b) //t_/false) (@pass))
                   (#t
                    (set! //p (@posn))
                    (cond ((= (@st (@parent)) //t_/cond)
                           (let while-loop ()
                             (cond ((@left?)
                                    (begin
                                      (@left)
                                      (set! //cnd
                                        (@simplify_cond
                                          (list-ref (@i) (+ 1 1))))
                                      (set! //a (@or //a //cnd))
                                      (cond ((or (@implies? //b //cnd)
                                                 (= (@st //a) //t_/true))
                                             (@pass))))
                                    (while-loop))
                                   (#t #t)))
                           (@goto //p)))
                    (cond ((not (@passed?))
                           (@down_last)
                           (@down)
                           (set! /fl_flag1 0)
                           (let while-loop ()
                             (cond ((= /fl_flag1 0)
                                    (cond ((@failed?) (set! /fl_flag1 1))
                                          (#t
                                           (cond ((not (@trans?
                                                         //t/r_/delete_/item))
                                                  (@fail "Component cannot be deleted")))
                                           (cond ((not (@right?))
                                                  (set! /fl_flag1 1))
                                                 (#t
                                                  (@right)
                                                  (set! /fl_flag1 0)))))
                                    (while-loop))
                                   (#t #t)))
                           (@goto //p)
                           (cond ((not (@failed?)) (@pass)))))))))
          ((= (@gt (@i)) //t_/expression)
           (let ((//i_/one /%const__delete_item__1)
                 (//i_/zero /%const__delete_item__2))
             (cond ((or (and (@equal? (@i) //i_/one)
                             (or (= (@st (@parent)) //t_/times)
                                 (and (@left?)
                                      (= (@st (@parent)) //t_/divide))))
                        (and (@equal? (@i) //i_/zero)
                             (or (= (@st (@parent)) //t_/plus)
                                 (and (= (@st (@parent)) //t_/minus)
                                      (@left?)))))
                    (@pass)))))
          ((= (@gt (@i)) //t_/condition)
           (cond ((or (and (@false? (@i)) (= (@st (@parent)) //t_/or))
                      (and (@true? (@i)) (= (@st (@parent)) //t_/and)))
                  (@pass))))
          (#t
           (cond ((= (@st (@i)) //t_/for)
                  (let ((//e1 (list-ref (@i) (+ 1 2)))
                        (//e2 (list-ref (@i) (+ 1 3)))
                        (//e3 (list-ref (@i) (+ 1 4))))
                    (cond ((or (and (@true?
                                      (@make 315
                                             '()
                                             (list (@var_to_expn //e3)
                                                   (@make 205 0 '()))))
                                    (@true?
                                      (@make 314
                                             '()
                                             (list (@var_to_expn //e2)
                                                   (@var_to_expn //e1)))))
                               (and (@true?
                                      (@make 314
                                             '()
                                             (list (@var_to_expn //e3)
                                                   (@make 205 0 '()))))
                                    (@true?
                                      (@make 315
                                             '()
                                             (list (@var_to_expn //e2)
                                                   (@var_to_expn //e1))))))
                           (@pass))))))))
    (cond ((and (not (@passed?))
                (@up?)
                (or (= (@gt (@i)) //t_/statement)
                    (= (@gt (@i)) //t_/statements)
                    (= (@st (@i)) //t_/guarded)
                    (= (@st (@i)) //t_/assign)))
           (let ((//p (@posn_n)))
             (@up)
             (cond ((not (@is_reachable? (list //p))) (@pass))))))
    (cond ((not (@passed?))
           (@fail "The item is not redundant")))))

(define (@delete_item_code //data)
  (cond ((= (@st (@i)) //t_/action) (@delete))
        ((and (= (@st (@i)) //t_/guarded)
              (= (@st (@parent)) //t_/cond))
         (let ((//b (list-ref (@i) (+ 1 1)))
               (//p (@posn))
               (//a (@make //t_/false '() '()))
               (//cnd '())
               (//o/k 0))
           (cond ((@false? //b) (@clever_delete))
                 (#t
                  (let while-loop ()
                    (cond ((@left?)
                           (begin
                             (@left)
                             (set! //cnd
                               (@simplify_cond (list-ref (@i) (+ 1 1))))
                             (set! //a (@or //a //cnd))
                             (cond ((or (@implies? //b //cnd)
                                        (= (@st //a) //t_/true))
                                    (set! //o/k 1))))
                           (while-loop))
                          (#t #t)))
                  (@goto //p)
                  (cond ((= //o/k 1) (@clever_delete))
                        (#t
                         (@down_last)
                         (@delete)
                         (@up)
                         (@up)
                         (@fix_cond)
                         (@goto //p)))))))
        ((= (@gt (@i)) //t_/expression)
         (cond ((> (@size (@parent)) 2) (@delete))
               (#t
                (cond ((@left?) (@left)) (#t (@right)))
                (let ((//exp (@i))) (@up) (@paste_over //exp)))))
        ((= (@gt (@i)) //t_/condition)
         (cond ((> (@size (@parent)) 2) (@delete))
               (#t
                (cond ((@left?) (@left)) (#t (@right)))
                (let ((//con (@i))) (@up) (@paste_over //con)))))
        (#t (@clever_delete))))

