(define (/foreach-merge_calls_in_action-1
         //depth
         //a/s_/type)
  (@down)
  (set! /fl_flag2 0)
  (let while-loop ()
    (cond ((= /fl_flag2 0)
           (begin
             (cond ((and (= (@spec_type (@item)) //t_/cond)
                         (member //t_/call (@stat_types (@item))))
                    (set! //p (@posn))
                    (cond ((@right?)
                           (@right)
                           (let while-loop ()
                             (cond ((and (not (@components? (@item)))
                                         (not (= (@spec_type (@item))
                                                 //t_/call))
                                         (@right?))
                                    (@right)
                                    (while-loop))
                                   (#t #t)))
                           (cond ((= (@spec_type (@item)) //t_/call)
                                  (@goto //p)
                                  (let while-loop ()
                                    (cond ((not (= (@spec_type
                                                     (list-ref
                                                       (@parent)
                                                       (+ 1 (+ (@posn_n) 1))))
                                                   //t_/call))
                                           (@trans //t/r_/absorb_/right "")
                                           (while-loop))
                                          (#t #t)))
                                  (@trans //t/r_/absorb_/right "")
                                  (@down)
                                  (set! /fl_flag1 0)
                                  (let while-loop ()
                                    (cond ((= /fl_flag1 0)
                                           (cond ((member
                                                    //t_/call
                                                    (@stat_types (@item)))
                                                  (@down_last)
                                                  (@down)
                                                  (let while-loop ()
                                                    (cond ((and (not (= (@spec_type
                                                                          (@item))
                                                                        //t_/call))
                                                                (@right?))
                                                           (@right)
                                                           (while-loop))
                                                          (#t #t)))
                                                  (cond ((and (= (@spec_type
                                                                   (@item))
                                                                 //t_/call)
                                                              (@right?))
                                                         (@delete_rest)))
                                                  (@up)
                                                  (@up)
                                                  (cond ((not (@right?))
                                                         (set! /fl_flag1 1))
                                                        (#t
                                                         (@right)
                                                         (set! /fl_flag1 0))))
                                                 (#t (set! /fl_flag1 0)))
                                           (while-loop))
                                          (#t #t)))
                                  (@up))
                                 (#t (@goto //p)))))))
             (cond ((not (@right?)) (set! /fl_flag2 1))
                   (#t (@right) (set! /fl_flag2 0))))
           (while-loop))
          (#t #t))))

(define (/foreach-merge_calls_in_action-2
         //depth
         //a/s_/type)
  (cond ((and (= (@spec_type (@item)) //t_/cond)
              (member //t_/call (@stat_types (@item)))
              (@trans? //t/r_/simplify_/if))
         (@trans //t/r_/simplify_/if ""))))

(define (/foreach-merge_calls_in_action-3
         //depth
         //a/s_/type)
  (cond ((and (= (@spec_type (@item)) //t_/cond)
              (@gen_improper? (@item) //a/s/type))
         (set! //calls (@calls (@item)))
         (let while-loop ()
           (cond ((and (not (null? //calls)) (not (@passed?)))
                  (begin
                    (set! /el (car //calls))
                    (set! //calls (cdr //calls))
                    (cond ((> (let ((name /el))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              1)
                           (@pass))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-merge_calls_in_action-4
         //depth
         //a/s_/type)
  (@down)
  (set! /fl_flag2 0)
  (let while-loop ()
    (cond ((= /fl_flag2 0)
           (begin
             (cond ((and (= (@st (@i)) //t_/cond)
                         (member //t_/call (@stat_types (@i))))
                    (cond ((@right?)
                           (set! //p (@posn))
                           (@right)
                           (let while-loop ()
                             (cond ((and (not (@cs? (@i)))
                                         (not (= (@st (@i)) //t_/call))
                                         (@right?))
                                    (@right)
                                    (while-loop))
                                   (#t #t)))
                           (cond ((= (@st (@i)) //t_/call)
                                  (@goto //p)
                                  (let while-loop ()
                                    (cond ((not (= (@st (list-ref
                                                          (@parent)
                                                          (+ 1
                                                             (+ (@posn_n) 1))))
                                                   //t_/call))
                                           (@trans //t/r_/absorb_/right "")
                                           (while-loop))
                                          (#t #t)))
                                  (@trans //t/r_/absorb_/right "")
                                  (@down)
                                  (set! /fl_flag1 0)
                                  (let while-loop ()
                                    (cond ((= /fl_flag1 0)
                                           (begin
                                             (@down_last)
                                             (cond ((member
                                                      //t_/call
                                                      (let ((l (@cs (@i)))
                                                            (map-result '()))
                                                        (let while-loop ()
                                                          (cond ((not (null? l))
                                                                 (set! map-result
                                                                   (cons (@st (car l))
                                                                         map-result))
                                                                 (set! l
                                                                   (cdr l))
                                                                 (while-loop))
                                                                (#t #t)))
                                                        (reverse map-result)))
                                                    (@down)
                                                    (let while-loop ()
                                                      (cond ((and (not (= (@st (@i))
                                                                          //t_/call))
                                                                  (@right?))
                                                             (@right)
                                                             (while-loop))
                                                            (#t #t)))
                                                    (cond ((= (@st (@i))
                                                              //t_/call)
                                                           (@delete_rest)))
                                                    (@up)))
                                             (@up)
                                             (cond ((not (@right?))
                                                    (set! /fl_flag1 1))
                                                   (#t
                                                    (@right)
                                                    (set! /fl_flag1 0))))
                                           (while-loop))
                                          (#t #t)))
                                  (@up))
                                 (#t (@goto //p)))))))
             (cond ((not (@right?)) (set! /fl_flag2 1))
                   (#t (@right) (set! /fl_flag2 0))))
           (while-loop))
          (#t #t))))

(define (/foreach-merge_calls_in_action-5
         //depth
         //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/cond)
              (member //t_/call (@stat_types (@i))))
         (cond ((@trans? //t/r_/simplify_/if)
                (@trans //t/r_/simplify_/if "")))
         (cond ((and (equal? //a/s/type "Reg")
                     (@gen_improper? (@i) //a/s/type))
                (set! //calls (@calls (@i)))
                (set! /freq 0)
                (let while-loop ()
                  (cond ((not (null? //calls))
                         (begin
                           (set! /el (car //calls))
                           (cond ((> (let ((name /el))
                                       (if (vector? name)
                                         (vector-ref name (- 2 1))
                                         (list-ref name (- 2 1))))
                                     /freq)
                                  (set! /freq
                                    (let ((name /el))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1)))))
                                  (set! //target
                                    (let ((name /el))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1)))))))
                           (set! //calls (cdr //calls)))
                         (while-loop))
                        (#t #t)))
                (cond ((> /freq 1)
                       (@down)
                       (set! /fl_flag1 0)
                       (let while-loop ()
                         (cond ((= /fl_flag1 0)
                                (begin
                                  (@down_to 2)
                                  (@down_last)
                                  (cond ((equal? (@v (@i)) //target)
                                         (@paste_over (@make //t_/skip '() '()))
                                         (@goto (@posn))))
                                  (@up)
                                  (@up)
                                  (cond ((not (@right?)) (set! /fl_flag1 1))
                                        (#t (@right) (set! /fl_flag1 0))))
                                (while-loop))
                               (#t #t)))
                       (@up)
                       (@splice_after
                         (list (@make //t_/call //target '())))
                       (@goto (@posn)))))))))

(define (@merge_calls_in_action_test)
  (let ((//orig_/pos (@posn))
        (//orig_/act (@item))
        (//p-save //p)
        (/found "false")
        (//n 0)
        (/el-save /el)
        (/freq-save /freq)
        (//calls-save //calls)
        (//a/s/type-save //a/s/type))
    (set! //p '())
    (set! /el '())
    (set! /freq 0)
    (set! //calls '())
    (set! //a/s/type (@as_type))
    (@edit)
    (cond ((not (= (@spec_type (@item)) //t_/action))
           (@fail "Not an action"))
          (#t
           (set! //old_/calls (@calls (@item)))
           (cond ((and (= (if (vector? //old_/calls)
                            (vector-length //old_/calls)
                            (length //old_/calls))
                          1)
                       (= (car (cdr (car //old_/calls))) 1))
                  (@fail "Only one call in this action"))
                 (#t
                  (cond ((@trans? //t/r_/delete_/unreachable_/code)
                         (@trans //t/r_/delete_/unreachable_/code '())))
                  (cond ((equal? //a/s/type "Reg")
                         (@foreach_stats
                           /foreach-merge_calls_in_action-1
                           0
                           (@as_type)
                           0)
                         (cond ((null? (@program)) (@new_program (@skips))))))
                  (@foreach_statement
                    /foreach-merge_calls_in_action-2
                    0
                    (@as_type)
                    0)
                  (cond ((null? (@program)) (@new_program (@skips))))
                  (set! //calls_/now (@calls (@item)))
                  (cond ((< (if (vector? //calls_/now)
                              (vector-length //calls_/now)
                              (length //calls_/now))
                            (if (vector? //old_/calls)
                              (vector-length //old_/calls)
                              (length //old_/calls)))
                         (@pass))
                        (#t
                         (let while-loop ()
                           (cond ((not (null? //old_/calls))
                                  (begin
                                    (set! /el (car //old_/calls))
                                    (set! //n
                                      (let ((name /el))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1)))))
                                    (set! //freq
                                      (let ((name /el))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1)))))
                                    (cond ((< (@call_freq //n (@item)) //freq)
                                           (@pass)))
                                    (set! //old_/calls (cdr //old_/calls)))
                                  (while-loop))
                                 (#t #t)))))
                  (cond ((and (not (@passed?)) (@in_reg_system?))
                         (@ateach_statement
                           /foreach-merge_calls_in_action-3
                           0
                           (@as_type)
                           0)
                         (cond ((null? (@program)) (@new_program (@skips))))))
                  (cond ((not (@passed?))
                         (@fail "Cannot merge any calls")))))))
    (@undo_edit)
    (set! //p //p-save)
    (set! /el /el-save)
    (set! /freq /freq-save)
    (set! //calls //calls-save)
    (set! //a/s/type //a/s/type-save)))

(define (@merge_calls_in_action_code //data)
  (let ((//calls-save //calls)
        (/el-save /el)
        (/found "false")
        (//target-save //target)
        (//n '())
        (/freq-save /freq)
        (//orig_/pos (@posn))
        (//p-save //p)
        (//orig_/act (@i))
        (//a/s/type-save //a/s/type))
    (set! //calls '())
    (set! /el '())
    (set! //target '())
    (set! /freq '())
    (set! //p '())
    (set! //a/s/type (@as_type))
    (@trans //t/r_/delete_/unreachable_/code "")
    (@goto //orig_/pos)
    (@edit)
    (cond ((equal? //a/s/type "Reg")
           (@foreach_stats
             /foreach-merge_calls_in_action-4
             0
             (@as_type)
             0)
           (cond ((null? (@program)) (@new_program (@skips))))))
    (@foreach_statement
      /foreach-merge_calls_in_action-5
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@goto '())
    (cond ((@equal? (@i) //orig_/act)
           (@notice
             "Transformation `Merge Calls In Action' had nothing to do")))
    (cond ((@trans? //t/r_/delete_/all_/skips)
           (@trans //t/r_/delete_/all_/skips "")))
    (@end_edit)
    (set! //calls //calls-save)
    (set! /el /el-save)
    (set! //target //target-save)
    (set! /freq /freq-save)
    (set! //p //p-save)
    (set! //a/s/type //a/s/type-save)))

