(define (/foreach-stack_to_par-1 //depth //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/proc_/call)
              (equal? (@v (list-ref (@i) (+ 1 1))) /name))
         (let ((/posn_n (@posn_n)))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (cond ((not (@left?))
                           (set! //o/k 0)
                           (set! /fl_flag1 1))
                          (#t
                           (@left)
                           (cond ((and (= (@st (@i)) //t_/push)
                                       (@equal? (list-ref (@i) (+ 1 1)) /stack))
                                  (let ((/vars (@variables
                                                 (list-ref (@i) (+ 1 2)))))
                                    (let while-loop ()
                                      (cond ((and (not (= (@posn_n) /posn_n))
                                                  (null? (@set_intersect
                                                           /vars
                                                           (@assigned (@i)))))
                                             (@right)
                                             (while-loop))
                                            (#t #t))))
                                  (cond ((not (= (@posn_n) /posn_n))
                                         (set! //o/k 0)))
                                  (set! /fl_flag1 1))
                                 ((or (= (@st (@i)) //t_/proc)
                                      (member (@v /stack) (@assigned (@i))))
                                  (set! //o/k 0)
                                  (set! /fl_flag1 1))
                                 (#t (set! /fl_flag1 0)))))
                    (while-loop))
                   (#t #t)))
           (@to /posn_n)
           (cond ((= //o/k 0)
                  (@fail "A proc call has no PUSH or there are calls or assignments")))))))

(define (/foreach-stack_to_par-2 //depth //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/proc_/call)
              (equal? (@v (list-ref (@i) (+ 1 1))) /name))
         (let ((/posn_n (@posn_n)) (/apar '()))
           (let while-loop ()
             (cond ((not (and (= (@st (@i)) //t_/push)
                              (@equal? (list-ref (@i) (+ 1 1)) /stack)))
                    (@left)
                    (while-loop))
                   (#t #t)))
           (set! /apar (list-ref (@i) (+ 1 2)))
           (@paste_over (@skip))
           (@to /posn_n)
           (@down_to 2)
           (@paste_over
             (@make //t_/expressions
                    '()
                    (concat (@cs (@i)) (list /apar))))
           (@up)))))

(define (@stack_to_par_test)
  (cond ((not (= (@st (@i)) //t_/proc))
         (@fail "Selected item is not a procedure definition"))
        (#t
         (let ((/posn (@posn))
               (/name-save /name)
               (//o/k-save //o/k)
               (/stack-save /stack))
           (set! /name (@v (list-ref (@i) (+ 1 1))))
           (set! //o/k 1)
           (set! /stack '())
           (@down_to 4)
           (@down)
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (cond ((and (= (@st (@i)) //t_/pop)
                                (= (@st (list-ref (@i) (+ 1 2)))
                                   //t_/var_/lvalue))
                           (set! /stack (list-ref (@i) (+ 1 2)))
                           (set! /fl_flag1 1))
                          ((= (@st (@i)) //t_/var)
                           (@down_to 2)
                           (@down)
                           (set! /fl_flag1 0))
                          ((@right?) (@right) (set! /fl_flag1 0))
                          (#t (set! /fl_flag1 1)))
                    (while-loop))
                   (#t #t)))
           (cond ((null? /stack)
                  (@fail "No suitable stack in proc body"))
                 (#t
                  (let while-loop ()
                    (cond ((and (@up?) (not (= (@st (@i)) //t_/where)))
                           (@up)
                           (while-loop))
                          (#t #t)))
                  (@ateach_statement
                    /foreach-stack_to_par-1
                    0
                    (@as_type)
                    0)
                  (cond ((null? (@program)) (@new_program (@skips))))
                  (cond ((= //o/k 1) (@pass)))))
           (@goto /posn)
           (set! /name /name-save)
           (set! //o/k //o/k-save)
           (set! /stack /stack-save)))))

(define (@stack_to_par_code //data)
  (let ((/posn (@posn))
        (/name-save /name)
        (//o/k-save //o/k)
        (/stack-save /stack)
        (/par '())
        (/i 1)
        (/names (@all_variables (@i))))
    (set! /name (@v (list-ref (@i) (+ 1 1))))
    (set! //o/k 1)
    (set! /stack '())
    (set! //data (@string //data))
    (cond ((not (equal? //data ""))
           (set! /par (@make_name //data)))
          (#t
           (set! /par (@make_name "par"))
           (let while-loop ()
             (cond ((member
                      (@make_name
                        (concat (@n_string /par) (@string /i)))
                      /names)
                    (set! /i (+ /i 1))
                    (while-loop))
                   (#t #t)))
           (set! /par
             (@make_name
               (concat (@n_string /par) (@string /i))))))
    (set! /par (@make //t_/var_/lvalue /par '()))
    (@down_to 4)
    (@down)
    (let while-loop ()
      (cond ((not (= (@st (@i)) //t_/pop))
             (cond ((= (@st (@i)) //t_/var) (@down_to 2) (@down))
                   (#t (@right)))
             (while-loop))
            (#t #t)))
    (set! /stack (list-ref (@i) (+ 1 2)))
    (@paste_over
      (@make 110
             '()
             (list (@make 6
                          '()
                          (list (@expn_to_var (list-ref (@i) (+ 1 1)))
                                (@var_to_expn /par))))))
    (let while-loop ()
      (cond ((not (= (@st (@i)) //t_/proc))
             (@up)
             (while-loop))
            (#t #t)))
    (@down_to 2)
    (@paste_over
      (@make //t_/lvalues
             '()
             (concat (@cs (@i)) (list /par))))
    (let while-loop ()
      (cond ((and (@up?) (not (= (@st (@i)) //t_/where)))
             (@up)
             (while-loop))
            (#t #t)))
    (@ateach_statement
      /foreach-stack_to_par-2
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@trans //t/r_/delete_/all_/skips "")
    (@goto /posn)
    (set! /name /name-save)
    (set! //o/k //o/k-save)
    (set! /stack /stack-save)))

#t

