(define (@align_nested_vars_test)
  (cond ((not (= (@st (@i)) //t_/var))
         (@fail "Current item not a VAR block"))
        ((not (= (@st (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1)))
                 //t_/var))
         (@fail "Current item not a nested VAR block"))
        ((not (null? (@set_intersect
                       (@assigned (list-ref (@i) (+ 1 1)))
                       (@assigned
                         (list-ref
                           (list-ref (list-ref (@i) (+ 1 2)) (+ 1 1))
                           (+ 1 1))))))
         (@fail "The two VARs have variables in common"))
        (#t (@pass))))

(define (@align_nested_vars_code //data)
  (cond ((= (@st (@i)) //t_/var)
         (let ((/start '())
               (/other '())
               (//l '())
               (/cont 1)
               (/v1 '())
               (/v2 '()))
           (let while-loop ()
             (cond ((= /cont 1)
                    (begin
                      (set! /cont 0)
                      (set! /start (@posn))
                      (@down)
                      (set! /v1 (@assigned (@i)))
                      (@right)
                      (@down)
                      (cond ((= (@st (@i)) //t_/var)
                             (set! /other (@posn))
                             (@down)
                             (@down)
                             (cond ((null? (@set_intersect
                                             (@assigned (@i))
                                             /v1))
                                    (set! /cont 1)
                                    (@cut_rest)
                                    (set! //l (@buffer))
                                    (@cut)
                                    (@goto /start)
                                    (@down)
                                    (@down_last)
                                    (@splice_after //l)
                                    (@paste_after (@buffer))
                                    (@goto /other)
                                    (@down_to 2)
                                    (@down)
                                    (@cut_rest)
                                    (set! //l (@buffer))
                                    (@cut)
                                    (@goto /start)
                                    (@down_to 2)
                                    (@down_last)
                                    (@splice_after //l)
                                    (@paste_after (@buffer))
                                    (@goto /other)
                                    (@delete)
                                    (@goto /start))))))
                    (while-loop))
                   (#t #t)))))))

#t

