(define (@apply_to_right_test)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (cond ((not (= (@gt (@i)) //t_/statement))
         (@fail "Selected item is not a statement."))
        ((not (@right?))
         (@fail "There is no following statement."))
        ((and (not (= (@spec_type (@i)) //t_/assert))
              (not (@trans? //t/r_/add_/assertion)))
         (@fail "The item was not an assertion and it was not possible to add one."))
        (#t
         (@edit_parent)
         (cond ((not (= (@st (@i)) //t_/assert))
                (@trans //t/r_/add_/assertion "")))
         (let ((//b1 (list-ref (@i) (+ 1 1))))
           (@right)
           (cond ((or (= (@st (@i)) //t_/cond)
                      (= (@st (@i)) //t_/d_/if))
                  (@apply_to_right_test_cond //b1))
                 ((= (@st (@i)) //t_/d_/do)
                  (@apply_to_right_test_d_do //b1))
                 ((= (@st (@i)) //t_/while)
                  (cond ((@implies? //b1 (@not (list-ref (@i) (+ 1 1))))
                         (@pass))
                        (#t
                         (@fail "The assertion does not affect the condition."))))
                 (#t
                  (@fail "The following statement is not of a suitable type.")))
           (@left)
           (@undo_edit)))))

(define (@apply_to_right_test_cond //b1)
  (@down)
  (set! /fl_flag1 0)
  (let while-loop ()
    (cond ((= /fl_flag1 0)
           (begin
             (@down)
             (cond ((or (@implies? //b1 (@i))
                        (@implies? //b1 (@not (@i)))
                        (= (@st (@and //b1 (@i))) //t_/false))
                    (@pass)
                    (@up)
                    (set! /fl_flag1 1))
                   (#t
                    (@up)
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))))
           (while-loop))
          (#t #t)))
  (@up)
  (cond ((not (@passed?))
         (@fail "Application of the selected item causes no change"))))

(define (@apply_to_right_test_d_do //b1)
  (@down)
  (set! /fl_flag1 0)
  (let while-loop ()
    (cond ((= /fl_flag1 0)
           (begin
             (@down)
             (cond ((or (@implies? //b1 (@not (@i)))
                        (= (@st (@and //b1 (@i))) //t_/false))
                    (@up)
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                   (#t
                    (@fail "At least one guard cannot be shown to be false")
                    (@up)
                    (set! /fl_flag1 1))))
           (while-loop))
          (#t #t)))
  (@up)
  (cond ((not (@failed?)) (@pass))))

(define (@apply_to_right_code //data)
  (cond ((and (= (@gt (@i)) //t_/assign)
              (@up?)
              (not (@left?))
              (not (@right?)))
         (@up)))
  (let ((//b1 '()))
    (cond ((= (@st (@i)) //t_/assert)
           (set! //b1 (list-ref (@i) (+ 1 1)))
           (@right))
          (#t
           (@trans //t/r_/add_/assertion "")
           (set! //b1 (list-ref (@i) (+ 1 1)))
           (@delete)))
    (cond ((or (= (@st (@i)) //t_/while)
               (= (@st (@i)) //t_/d_/do))
           (@paste_over (@make //t_/skip '() '())))
          (#t
           (@down)
           (@down)
           (cond ((@implies? //b1 (@i))
                  (@paste_over (@make //t_/true '() '())))
                 ((or (= //t_/false (@st (@and //b1 (@i))))
                      (@implies? //b1 (@not (@i))))
                  (@paste_over (@make //t_/false '() '()))))
           (@up)
           (let while-loop ()
             (cond ((@right?)
                    (begin
                      (@right)
                      (@down)
                      (cond ((@implies? //b1 (@i))
                             (@paste_over (@make //t_/true '() '())))
                            ((or (= //t_/false (@st (@and //b1 (@i))))
                                 (@implies? //b1 (@not (@i))))
                             (@paste_over (@make //t_/false '() '()))))
                      (@up))
                    (while-loop))
                   (#t #t)))
           (@up)
           (cond ((@trans? //t/r_/simplify_/item)
                  (@trans //t/r_/simplify_/item "")))))
    (@left)))

#t

