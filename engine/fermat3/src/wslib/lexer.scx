(define (@yy_lex)
  (set! /token1 /yy_sym)
  (set! /token2 /yy_value)
  (@yy_crank))

(define (@yy_lex_debug)
  (set! /token1 /yy_sym)
  (set! /token2 /yy_value)
  (set! /yy_value "")
  (@yy_crank)
  (begin
    (display "@yy_lex symbol = ")
    (begin
      (display /token1)
      (begin
        (display " value = ")
        (begin
          (display /token2)
          (begin
            (display " (")
            (begin
              (display /yy_sym)
              (begin
                (display " ")
                (begin
                  (display /yy_value)
                  (begin (display ")") (newline) (force-output)))))))))))

(define (@yy_look) (list /yy_sym /yy_value))

(define (@yy_crank)
  (let while-loop ()
    (cond ((not (null? (gethash //whitespace /yy_ch)))
           (set! /yy_ch (@yy_next))
           (while-loop))
          (#t #t)))
  (cond ((not (null? (gethash //single_/chars /yy_ch)))
         (set! /yy_sym (gethash //char_/table /yy_ch))
         (set! /yy_ch (@yy_next)))
        ((equal? /yy_ch "=")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "=")
                (set! /yy_sym //s_/d/e/f/i/n/e)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/e/q/u/a/l))))
        ((equal? /yy_ch ":")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "=")
                (set! /yy_sym //s_/b/e/c/o/m/e/s)
                (set! /yy_ch (@yy_next)))
               ((equal? /yy_ch ":")
                (set! /yy_sym //s_/c/o/l/o/n/c/o/l/o/n)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/c/o/l/o/n))))
        ((equal? /yy_ch ".")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch ".")
                (set! /yy_sym //s_/d/o/t/d/o/t)
                (set! /yy_ch (@yy_next)))
               ((or (not (null? (gethash //whitespace /yy_ch)))
                    (equal? /yy_ch "eof"))
                (set! /yy_sym //s_/d/o/t/s/p/a/c/e)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/f/u/l/l/s/t/o/p))))
        ((equal? /yy_ch "+")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "+")
                (set! /yy_sym //s_/c/o/n/c/a/t)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/p/l/u/s))))
        ((equal? /yy_ch "-")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch ">")
                (set! /yy_sym //s_/a/r/r/o/w)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/m/i/n/u/s))))
        ((equal? /yy_ch "*")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "*")
                (set! /yy_sym //s_/e/x/p/o/n/e/n/t)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/t/i/m/e/s))))
        ((equal? /yy_ch "[")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "]")
                (set! /yy_sym //s_/b/o/x)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/l/b/r/a/c/k/e/t))))
        ((equal? /yy_ch "<")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch ">")
                (set! /yy_sym //s_/n/e/q)
                (set! /yy_ch (@yy_next)))
               ((equal? /yy_ch "=")
                (set! /yy_sym //s_/l/e/q)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/l/a/n/g/l/e))))
        ((equal? /yy_ch ">")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "=")
                (set! /yy_sym //s_/g/e/q)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/r/a/n/g/l/e))))
        ((equal? /yy_ch "!")
         (set! /yy_ch (@yy_next))
         (@yy_external_call))
        ((equal? /yy_ch "~")
         (set! /yy_ch (@yy_next))
         (@yy_pattern))
        ((equal? /yy_ch "@")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "[")
                (set! /yy_sym //s_/m/e/m)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/a/t) (@yy_mw_name))))
        ((equal? /yy_ch "C")
         (let ((/c (@yy_next)))
           (cond ((equal? /c ":")
                  (cond ((equal? (@yy_peek) "=")
                         (set! /yy_sym //s_/i/d/e/n/t/i/f/i/e/r)
                         (set! /yy_value "C"))
                        (#t (set! /yy_sym //s_/c/o/m/m/e/n/t)))
                  (set! /yy_ch /c))
                 ((not (null? (gethash //special_/or_/white /c)))
                  (set! /yy_sym //s_/i/d/e/n/t/i/f/i/e/r)
                  (set! /yy_value "C")
                  (set! /yy_ch /c))
                 (#t
                  (set! /yy_ch (concat /yy_ch /c))
                  (@yy_ident 1)))))
        ((equal? /yy_ch "/")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch //backslash)
                (set! /yy_sym //s_/i/n/t/e/r/s/e/c/t)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/s/l/a/s/h))))
        ((equal? /yy_ch //backslash)
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "/")
                (set! /yy_sym //s_/u/n/i/o/n)
                (set! /yy_ch (@yy_next)))
               (#t (set! /yy_sym //s_/b/a/c/k/s/l/a/s/h))))
        ((equal? /yy_ch //quote) (@yy_string))
        ((not (null? (gethash //digits /yy_ch)))
         (@yy_number))
        ((equal? /yy_ch "'")
         (set! /yy_ch (@yy_next))
         (set! /yy_sym //s_/p/r/i/m/e))
        (#t (@yy_ident 1))))

(define (@yy_external_call)
  (cond ((equal? /yy_ch "P")
         (set! /yy_sym //s_/p/l/i/n/k_/p))
        ((equal? /yy_ch "X")
         (set! /yy_ch (@yy_next))
         (cond ((equal? /yy_ch "P")
                (set! /yy_sym //s_/p/l/i/n/k_/x/p))
               ((equal? /yy_ch "F")
                (set! /yy_sym //s_/p/l/i/n/k_/x/f))
               ((equal? /yy_ch "C")
                (set! /yy_sym //s_/p/l/i/n/k_/x/c))
               (#t
                (set! /yy_sym //s_/i/n/v/a/l/i/d)
                (set! /yy_value (string-append "!X" /yy_ch)))))
        (#t
         (set! /yy_sym //s_/i/n/v/a/l/i/d)
         (set! /yy_value (string-append "!X" /yy_ch))))
  (set! /yy_ch (@yy_next)))

(define (@yy_pattern)
  (set! /yy_value "")
  (cond ((equal? /yy_ch "?")
         (cond ((equal? (@yy_peek) "(")
                (set! /yy_sym //s_/i/n/t_/o/n/e))
               ((equal? (@yy_peek) "=")
                (set! /yy_ch (@yy_next))
                (set! /yy_sym //s_/v/a/r_/o/n/e))
               (#t (set! /yy_sym //s_/p/a/t_/o/n/e))))
        ((equal? /yy_ch "+")
         (set! /yy_sym //s_/p/a/t_/m/a/n/y))
        ((equal? /yy_ch "*")
         (cond ((equal? (@yy_peek) "(")
                (set! /yy_sym //s_/i/n/t_/a/n/y))
               ((equal? (@yy_peek) "=")
                (set! /yy_ch (@yy_next))
                (set! /yy_sym //s_/v/a/r_/a/n/y))
               (#t (set! /yy_sym //s_/p/a/t_/a/n/y))))
        (#t
         (set! /yy_sym //s_/i/n/v/a/l/i/d)
         (set! /yy_value (string-append "~" /yy_ch))))
  (set! /yy_ch (@yy_next)))

(define (@yy_mw_name)
  (let while-loop ()
    (cond ((not (null? (gethash //whitespace /yy_ch)))
           (set! /yy_ch (@yy_next))
           (while-loop))
          (#t #t)))
  (cond ((equal? /yy_ch "~")
         (set! /yy_ch (@yy_next))
         (cond ((not (equal? /yy_ch "?"))
                (set! /yy_sym //s_/i/n/v/a/l/i/d))
               (#t (set! /yy_sym //s_/a/t_/p/a/t_/o/n/e)))))
  (@yy_ident 0))

(define (@yy_ident /resolve_keyword)
  (set! /yy_value /yy_ch)
  (set! /yy_ch (@yy_next))
  (let while-loop ()
    (cond ((null? (gethash //special_/or_/white /yy_ch))
           (begin
             (set! /yy_value (concat /yy_value /yy_ch))
             (set! /yy_ch (@yy_next)))
           (while-loop))
          (#t #t)))
  (cond ((= /resolve_keyword 1)
         (set! /yy_sym (gethash //key_/table /yy_value))
         (cond ((not (equal? /yy_sym '())) (set! /yy_value '()))
               (#t (set! /yy_sym //s_/i/d/e/n/t/i/f/i/e/r))))))

(define (@yy_number)
  (let ((/div 1)
        (/str /yy_ch)
        (/exponent 0)
        (/exp_sgn 1))
    (set! /yy_ch (@yy_next))
    (let while-loop ()
      (cond ((not (null? (gethash //digits /yy_ch)))
             (begin
               (set! /str (concat /str /yy_ch))
               (set! /yy_ch (@yy_next)))
             (while-loop))
            (#t #t)))
    (set! /yy_value (@string_to_num /str))
    (set! /str "")
    (cond ((and (equal? /yy_ch ".")
                (not (equal? (@yy_peek) ".")))
           (set! /yy_ch (@yy_next))
           (let while-loop ()
             (cond ((not (null? (gethash //digits /yy_ch)))
                    (begin
                      (set! /str (concat /str /yy_ch))
                      (set! /div (* /div 10))
                      (set! /yy_ch (@yy_next)))
                    (while-loop))
                   (#t #t)))
           (set! /yy_value
             (+ /yy_value (/ (@string_to_num /str) /div)))))
    (cond ((equal? /yy_ch "e")
           (set! /yy_ch (@yy_next))
           (cond ((equal? /yy_ch "-")
                  (set! /yy_ch (@yy_next))
                  (set! /exp_sgn (- 1)))
                 ((equal? /yy_ch "+") (set! /yy_ch (@yy_next))))
           (set! /str "")
           (let while-loop ()
             (cond ((not (null? (gethash //digits /yy_ch)))
                    (begin
                      (set! /str (concat /str /yy_ch))
                      (set! /yy_ch (@yy_next)))
                    (while-loop))
                   (#t #t)))
           (set! /exponent (@string_to_num /str))
           (cond ((not (= /exponent 0))
                  (set! /exponent (* /exponent /exp_sgn))
                  (set! /yy_value
                    (* /yy_value (integer-expt 10 /exponent)))))))
    (set! /yy_sym //s_/n/u/m/b/e/r)))

(define (@yy_string)
  (set! /yy_ch (@yy_next))
  (set! /yy_value "")
  (let while-loop ()
    (cond ((and (not (equal? /yy_ch //quote))
                (not (equal? /yy_ch "eof")))
           (begin
             (cond ((equal? /yy_ch //backslash)
                    (set! /yy_ch (@yy_next))))
             (set! /yy_value (concat /yy_value /yy_ch))
             (set! /yy_ch (@yy_next)))
           (while-loop))
          (#t #t)))
  (cond ((equal? /yy_ch "eof")
         (begin
           (display "EOF while reading string ")
           (begin
             (display /yy_value)
             (newline)
             (force-output))))
        (#t (set! /yy_ch (@yy_next))))
  (set! /yy_sym //s_/s/t/r/i/n/g)
  #t)

(define (@yy_next)
  (let ((/c (@read_char //input_/port)))
    (cond ((@eof? /c) (set! /c "eof"))
          ((@eol? /c)
           (set! /c //newline)
           (set! /yy_lineno (+ /yy_lineno 1)))
          (#t (set! /c (@string /c))))
    /c))

(define (@yy_peek)
  (let ((/c (@peek_char //input_/port)))
    (cond ((@eof? /c) (set! /c "eof"))
          (#t (set! /c (@string /c))))
    /c))

#t

