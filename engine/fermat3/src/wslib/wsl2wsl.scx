(define (/foreach-wsl2wsl-1 //depth //a/s_/type)
  (let ((/__/o/k 1))
    (set! /__/o/k
      (@new_match /%const__wsl2wsl__1 (@i) /__/o/k))
    (cond ((= /__/o/k 1) (@delete)))))

(define (/foreach-wsl2wsl-2 //depth //a/s_/type)
  (cond ((and (= (@st (@i)) //t_/string)
              (@starts_with? (@v (@i)) "hex 0x"))
         (@paste_over
           (@make //t_/expn_/pseudo
                  (let ((s (@v (@i))))
                    (substring s 4 (string-length s)))
                  '())))))

(define /%const__wsl2wsl__1
  (@make 101
         '()
         (list (@make 9 (@make_name "GOBACK") '())
               (@make 10 '() '())
               (@make 12
                      '()
                      (list (@make 501 (@make_name "os") '()))))))

(set! //p/p_/hide_/comments 3)

(define (@checkpoint /file)
  (cond ((not (equal? /file ""))
         (begin
           (display "Saving to file: ")
           (begin (display /file) (newline) (force-output)))))
  (@pp_item (@program) 80 /file))

(set! //h/t/m/l 0)

(set! //base_/name "")

(set! //margin_/link "")

(set! //in_/details 0)

(set! //in_/comment 0)

(set! //skip_/newline 0)

(define (@pp_item //i /width //filename)
  (let ((//text_/width-save //text_/width)
        (//max_/indent-save //max_/indent)
        (//big_/indent-save //big_/indent)
        (/row_no-save /row_no)
        (/col_no-save /col_no)
        (//output_/port-save //output_/port)
        (/len (string-length //filename))
        (/registers
          (@make_set
            (let ((l (list "r0"
                           "r1"
                           "r2"
                           "r3"
                           "r4"
                           "r5"
                           "r6"
                           "r7"
                           "r8"
                           "r9"
                           "r10"
                           "r11"
                           "r12"
                           "r13"
                           "r14"
                           "r15"))
                  (map-result '()))
              (let while-loop ()
                (cond ((not (null? l))
                       (set! map-result
                         (cons (@make_name (car l)) map-result))
                       (set! l (cdr l))
                       (while-loop))
                      (#t #t)))
              (reverse map-result))))
        (//keywords-save //keywords)
        (//max_/split_/line-save //max_/split_/line)
        (//f/c_/business-save //f/c_/business)
        (//f/c_/business_/end-save //f/c_/business_/end)
        (//f/c_/tech-save //f/c_/tech)
        (//f/c_/tech_/end-save //f/c_/tech_/end)
        (//f/c_/newline-save //f/c_/newline)
        (//f/c_/turn_/on-save //f/c_/turn_/on)
        (//f/c_/turn_/off-save //f/c_/turn_/off)
        (/nbsp-save /nbsp)
        (/struct_p (@make_name "struct_p"))
        (/str ""))
    (set! //text_/width
      (quotient (* (abs /width) 2) 3))
    (set! //max_/indent 0)
    (set! //big_/indent 0)
    (set! /row_no 1)
    (set! /col_no 0)
    (set! //output_/port '())
    (set! //keywords
      (list "IF"
            "THEN"
            "ELSIF"
            "ELSE"
            "FI"
            "WHILE"
            "DO"
            "OD"
            "BEGIN"
            "WHERE"
            "END"
            "PROC"))
    (set! //max_/split_/line 65)
    (set! //f/c_/business "")
    (set! //f/c_/business_/end "")
    (set! //f/c_/tech "<!--")
    (set! //f/c_/tech_/end "-->")
    (set! //f/c_/newline "")
    (set! //f/c_/turn_/on "TURN ON")
    (set! //f/c_/turn_/off "TURN OFF")
    (set! /nbsp " ")
    (let ((//qry_/p/p_/size-save //qry_/p/p_/size)
          (//qry_/p/p_/string-save //qry_/p/p_/string)
          (//qry_/p/p/h_/string-save //qry_/p/p/h_/string)
          (//p/p_/n/l_/types-save //p/p_/n/l_/types)
          (//p/p_/o/l_/types-save //p/p_/o/l_/types)
          (//h/t/m/l_/header
            "<HTML>
<HEAD>
<link rel='stylesheet' type='text/css' href='PrettyWSL.css'>
</HEAD>
<BODY>")
          (//h/t/m/l_/footer "</BODY></HTML>")
          (//printing-save //printing)
          (//data //data_/file)
          (//data_/names-save //data_/names)
          (//data_/lengths-save //data_/lengths)
          (//data_/origlen-save //data_/origlen)
          (//data_/repeats-save //data_/repeats)
          (//data_/fields-save //data_/fields)
          (//data_/types-save //data_/types)
          (//data_/values-save //data_/values)
          (//init_/types-save //init_/types)
          (//init_/values-save //init_/values)
          (//init_/string-save //init_/string)
          (//equ_/symbol-save //equ_/symbol)
          (//d/s/e/c/t_/tag-save //d/s/e/c/t_/tag)
          (//comment-save //comment)
          (//orig_/name-save //orig_/name)
          (//c/i/c/s_/maps-save //c/i/c/s_/maps)
          (//symbol_/equ-save //symbol_/equ))
      (set! //qry_/p/p_/size
        (@make_name
          (string-append
            "Qry_PP_Size_"
            (@string //text_/width))))
      (set! //qry_/p/p_/string
        (@make_name "Qry_PP_String"))
      (set! //qry_/p/p/h_/string
        (@make_name "Qry_PPH_String"))
      (set! //p/p_/n/l_/types
        (@make_set (list //t_/comment //t_/proc)))
      (set! //p/p_/o/l_/types
        (@make_set
          (list //t_/equal
                //t_/not_/equal
                //t_/less
                //t_/greater
                //t_/less_/eq
                //t_/greater_/eq
                //t_/in
                //t_/not_/in
                //t_/x_/b/funct_/call
                //t_/x_/funct_/call)))
      (set! //printing 1)
      (set! //data_/names (my-make-hash-table 16))
      (set! //data_/lengths (my-make-hash-table 16))
      (set! //data_/origlen (my-make-hash-table 16))
      (set! //data_/repeats (my-make-hash-table 16))
      (set! //data_/fields (my-make-hash-table 16))
      (set! //data_/types (my-make-hash-table 16))
      (set! //data_/values (my-make-hash-table 16))
      (set! //init_/types (my-make-hash-table 16))
      (set! //init_/values (my-make-hash-table 16))
      (set! //init_/string (my-make-hash-table 16))
      (set! //equ_/symbol (my-make-hash-table 16))
      (set! //d/s/e/c/t_/tag (my-make-hash-table 16))
      (set! //comment (my-make-hash-table 16))
      (set! //orig_/name (my-make-hash-table 16))
      (set! //c/i/c/s_/maps (my-make-hash-table 16))
      (set! //symbol_/equ (my-make-hash-table 16))
      (cond ((> /width 0)
             (set! //max_/indent (- /width //text_/width))
             (set! //big_/indent
               (+ (quotient //max_/indent 2) 1)))
            (#t
             (set! //max_/indent //omega)
             (set! //big_/indent 10)))
      (cond ((equal? //filename "")
             (set! //output_/port //standard_/output_/port))
            (#t
             (set! //output_/port
               (@open_output_file //filename))))
      (cond ((and (> /len 5)
                  (equal?
                    (let ((f (- /len 5)))
                      (substring //filename f (+ f 5)))
                    ".html"))
             (set! //h/t/m/l 1)
             (set! //base_/name
               (let ((f 0))
                 (substring //filename f (+ f (- /len 5)))))
             (cond ((equal? //data "")
                    (set! //data (string-append //base_/name ".ll"))))
             (cond ((@file_exists? //data)
                    (let ((/-result-
                            (@load_file
                              //data
                              //data_/names
                              //data_/lengths
                              //data_/origlen
                              //data_/repeats
                              //data_/fields
                              //data_/types
                              //data_/values
                              //init_/types
                              //init_/values
                              //init_/string
                              //equ_/symbol
                              //d/s/e/c/t_/tag
                              //comment
                              //orig_/name
                              //c/i/c/s_/maps)))
                      (set! //data_/names (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/lengths (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/origlen (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/repeats (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/fields (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/types (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //data_/values (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //init_/types (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //init_/values (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //init_/string (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //equ_/symbol (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //d/s/e/c/t_/tag (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //comment (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //orig_/name (car /-result-))
                      (set! /-result- (cdr /-result-))
                      (set! //c/i/c/s_/maps (car /-result-))
                      (set! /-result- (cdr /-result-))))
                   (#t
                    (begin
                      (display "Warning: data file `")
                      (begin
                        (display //data)
                        (begin
                          (display "' not found!")
                          (newline)
                          (force-output))))))
             (let ((var-save /equ)
                   (seq-save (@hash_keys //equ_/symbol)))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /equ (car for-tmp))
                        (puthash
                          //symbol_/equ
                          (gethash //equ_/symbol /equ)
                          (@set_union
                            (gethash
                              //symbol_/equ
                              (gethash //equ_/symbol /equ))
                            (list /equ)))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /equ var-save))
             (@ph (@ws_replace "'" //quote //h/t/m/l_/header))
             (@edit)
             (@new_program //i)
             (@foreach_statement
               /foreach-wsl2wsl-1
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (@foreach_expn /foreach-wsl2wsl-2 0 (@as_type) 0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (@fc_business_tech_process //orig_/name 0)
             (set! //i (@program))
             (@undo_edit)
             (@pph //i 0 0)
             (@ph //h/t/m/l_/footer))
            (#t
             (set! //h/t/m/l 0)
             (cond ((and (< /width 0)
                         (> (let ((index-result (substring? "." //filename)))
                              (if index-result index-result -1))
                            0))
                    (set! //base_/name
                      (let ((f 0))
                        (substring
                          //filename
                          f
                          (+ f
                             (let ((index-result (substring? "." //filename)))
                               (if index-result index-result -1))))))
                    (set! //data (string-append //base_/name ".ll"))
                    (cond ((@file_exists? //data)
                           (begin
                             (display "Loading data file: ")
                             (begin (display //data) (newline) (force-output)))
                           (let ((/-result-
                                   (@load_file
                                     //data
                                     //data_/names
                                     //data_/lengths
                                     //data_/origlen
                                     //data_/repeats
                                     //data_/fields
                                     //data_/types
                                     //data_/values
                                     //init_/types
                                     //init_/values
                                     //init_/string
                                     //equ_/symbol
                                     //d/s/e/c/t_/tag
                                     //comment
                                     //orig_/name
                                     //c/i/c/s_/maps)))
                             (set! //data_/names (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/lengths (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/origlen (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/repeats (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/fields (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/types (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //data_/values (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //init_/types (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //init_/values (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //init_/string (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //equ_/symbol (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //d/s/e/c/t_/tag (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //comment (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //orig_/name (car /-result-))
                             (set! /-result- (cdr /-result-))
                             (set! //c/i/c/s_/maps (car /-result-))
                             (set! /-result- (cdr /-result-))))
                          (#t
                           (begin
                             (display "Warning: data file `")
                             (begin
                               (display //data)
                               (begin
                                 (display "' not found!")
                                 (newline)
                                 (force-output))))))
                    (@edit)
                    (@new_program //i)
                    (@fc_rename //orig_/name)
                    (set! //i (@program))
                    (@undo_edit)))
             (@pp //i 0 0)))
      (@pl "")
      (set! //h/t/m/l 0)
      (cond ((not (equal? //filename ""))
             (@close_output_port //output_/port)))
      (set! //qry_/p/p_/size //qry_/p/p_/size-save)
      (set! //qry_/p/p_/string //qry_/p/p_/string-save)
      (set! //qry_/p/p/h_/string
        //qry_/p/p/h_/string-save)
      (set! //p/p_/n/l_/types //p/p_/n/l_/types-save)
      (set! //p/p_/o/l_/types //p/p_/o/l_/types-save)
      (set! //printing //printing-save)
      (set! //data_/names //data_/names-save)
      (set! //data_/lengths //data_/lengths-save)
      (set! //data_/origlen //data_/origlen-save)
      (set! //data_/repeats //data_/repeats-save)
      (set! //data_/fields //data_/fields-save)
      (set! //data_/types //data_/types-save)
      (set! //data_/values //data_/values-save)
      (set! //init_/types //init_/types-save)
      (set! //init_/values //init_/values-save)
      (set! //init_/string //init_/string-save)
      (set! //equ_/symbol //equ_/symbol-save)
      (set! //d/s/e/c/t_/tag //d/s/e/c/t_/tag-save)
      (set! //comment //comment-save)
      (set! //orig_/name //orig_/name-save)
      (set! //c/i/c/s_/maps //c/i/c/s_/maps-save)
      (set! //symbol_/equ //symbol_/equ-save))
    (set! //text_/width //text_/width-save)
    (set! //max_/indent //max_/indent-save)
    (set! //big_/indent //big_/indent-save)
    (set! /row_no /row_no-save)
    (set! /col_no /col_no-save)
    (set! //output_/port //output_/port-save)
    (set! //keywords //keywords-save)
    (set! //max_/split_/line //max_/split_/line-save)
    (set! //f/c_/business //f/c_/business-save)
    (set! //f/c_/business_/end
      //f/c_/business_/end-save)
    (set! //f/c_/tech //f/c_/tech-save)
    (set! //f/c_/tech_/end //f/c_/tech_/end-save)
    (set! //f/c_/newline //f/c_/newline-save)
    (set! //f/c_/turn_/on //f/c_/turn_/on-save)
    (set! //f/c_/turn_/off //f/c_/turn_/off-save)
    (set! /nbsp /nbsp-save)))

(define (@ps /x)
  (cond ((string? /x)
         (set! /col_no (+ /col_no (string-length /x)))
         (cond ((= //printing 1) (@write /x //output_/port))))
        (#t
         (set! /col_no
           (+ /col_no
              (string-length
                (let ((name /x))
                  (if (vector? name)
                    (vector-ref name (- 1 1))
                    (list-ref name (- 1 1)))))))
         (cond ((= //printing 0) #t)
               ((= //h/t/m/l 0)
                (@write
                  (let ((name /x))
                    (if (vector? name)
                      (vector-ref name (- 1 1))
                      (list-ref name (- 1 1))))
                  //output_/port))
               (#t
                (@write
                  (let ((name /x))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  //output_/port))))))

(define (@pl /x)
  (set! //in_/comment 0)
  (set! /col_no 0)
  (set! /row_no (+ /row_no 1))
  (cond ((= //printing 1)
         (cond ((= //skip_/newline 1)
                (@ps /x)
                (set! //skip_/newline 0))
               ((string? /x) (@write_line /x //output_/port))
               ((= //h/t/m/l 0)
                (@write_line
                  (let ((name /x))
                    (if (vector? name)
                      (vector-ref name (- 1 1))
                      (list-ref name (- 1 1))))
                  //output_/port))
               (#t
                (@write_line
                  (let ((name /x))
                    (if (vector? name)
                      (vector-ref name (- 2 1))
                      (list-ref name (- 2 1))))
                  //output_/port))))))

(define (@ph /str)
  (cond ((= //printing 1) (@write /str //output_/port))))

(define (@pp_infix /type-par /op-par /prec-par)
  (let ((/prec-save /prec)
        (/op-save /op)
        (/type-save /type))
    (set! /prec /prec-par)
    (set! /op /op-par)
    (set! /type /type-par)
    (vector-set!
      //p/p_/type
      (- /type 1)
      //type_/infix)
    (vector-set! //p/p_/opening (- /type 1) "(")
    (vector-set!
      //p/p_/operator
      (- /type 1)
      (string-append (string-append " " /op) " "))
    (vector-set! //p/p_/operator1 (- /type 1) "")
    (vector-set!
      //p/p_/operator2
      (- /type 1)
      (string-append /op " "))
    (vector-set!
      //p/p_/sub_/indent
      (- /type 1)
      (+ (vector-ref //p/p_/indent (- /type 1))
         (string-length
           (vector-ref //p/p_/operator2 (- /type 1)))))
    (vector-set! //p/p_/closing (- /type 1) ")")
    (vector-set! //p/p_/prec (- /type 1) /prec)
    #t
    (set! /prec /prec-save)
    (set! /op /op-save)
    (set! /type /type-save)))

(define (@pp_funct /type-par /op-par)
  (let ((/op-save /op) (/type-save /type))
    (set! /op /op-par)
    (set! /type /type-par)
    (vector-set!
      //p/p_/type
      (- /type 1)
      //type_/infix)
    (vector-set!
      //p/p_/opening
      (- /type 1)
      (string-append /op "("))
    (vector-set!
      //p/p_/indent
      (- /type 1)
      (string-length
        (vector-ref //p/p_/opening (- /type 1))))
    (vector-set!
      //p/p_/sub_/indent
      (- /type 1)
      (vector-ref //p/p_/indent (- /type 1)))
    (vector-set! //p/p_/operator (- /type 1) ", ")
    (vector-set! //p/p_/operator1 (- /type 1) ",")
    (vector-set! //p/p_/operator2 (- /type 1) "")
    (vector-set! //p/p_/closing (- /type 1) ")")
    #t
    (set! /op /op-save)
    (set! /type /type-save)))

(define (@pp_call
         /type-par
         /open-par
         /op1-par
         /split-par)
  (let ((/split-save /split)
        (/op1-save /op1)
        (/open-save /open)
        (/type-save /type))
    (set! /split /split-par)
    (set! /op1 /op1-par)
    (set! /open /open-par)
    (set! /type /type-par)
    (vector-set!
      //p/p_/type
      (- /type 1)
      //type_/split)
    (vector-set! //p/p_/split (- /type 1) /split)
    (vector-set! //p/p_/opening (- /type 1) /open)
    (cond ((= /split 1)
           (vector-set!
             //p/p_/operator
             (- /type 1)
             (list (string-append /op1 "(") " VAR "))
           (vector-set!
             //p/p_/operator1
             (- /type 1)
             (list (string-append /op1 "(") ""))
           (vector-set!
             //p/p_/operator2
             (- /type 1)
             (list "" "VAR ")))
          (#t
           (vector-set!
             //p/p_/operator
             (- /type 1)
             (list (string-append /op1 "(")))
           (vector-set!
             //p/p_/operator1
             (- /type 1)
             (list (string-append /op1 "(")))
           (vector-set!
             //p/p_/operator2
             (- /type 1)
             (list ""))))
    (vector-set! //p/p_/closing (- /type 1) ")")
    #t
    (set! /split /split-save)
    (set! /op1 /op1-save)
    (set! /open /open-save)
    (set! /type /type-save)))

(define (@pp_simple /type-par /opening /closing)
  (let ((/type-save /type))
    (set! /type /type-par)
    (vector-set!
      //p/p_/type
      (- /type 1)
      //type_/simple)
    (vector-set! //p/p_/opening (- /type 1) /opening)
    (vector-set! //p/p_/closing (- /type 1) /closing)
    #t
    (set! /type /type-save)))

(define (@pp_fill /type-par /keyword)
  (let ((/type-save /type))
    (set! /type /type-par)
    (vector-set!
      //p/p_/type
      (- /type 1)
      //type_/infix)
    (vector-set!
      //p/p_/opening
      (- /type 1)
      (string-append
        (string-append "FILL " /keyword)
        " "))
    (vector-set!
      //p/p_/indent
      (- /type 1)
      (string-length
        (vector-ref //p/p_/opening (- /type 1))))
    (vector-set!
      //p/p_/sub_/indent
      (- /type 1)
      (vector-ref //p/p_/indent (- /type 1)))
    (vector-set! //p/p_/operator (- /type 1) "")
    (vector-set! //p/p_/operator1 (- /type 1) "")
    (vector-set! //p/p_/operator2 (- /type 1) "")
    (vector-set!
      //p/p_/closing
      (- /type 1)
      " ENDFILL")
    #t
    (set! /type /type-save)))

(define (@fix_quotes /str)
  (let ((/n1 (let* ((s /str)
                    (start 0)
                    (index-result
                      (substring?
                        //quote
                        (substring s start (string-length s)))))
               (if index-result (+ start index-result) -1)))
        (/n2 (let* ((s /str)
                    (start 0)
                    (index-result
                      (substring?
                        //backslash
                        (substring s start (string-length s)))))
               (if index-result (+ start index-result) -1))))
    (if (equal? /n1 /n2)
      /str
      (if (< /n1 0)
        (concat
          (concat
            (concat
              (let ((f 0)) (substring /str f (+ f /n2)))
              //backslash)
            //backslash)
          (@fix_quotes
            (let ((s /str))
              (substring s (+ /n2 1) (string-length s)))))
        (if (< /n2 0)
          (concat
            (concat
              (concat
                (let ((f 0)) (substring /str f (+ f /n1)))
                //backslash)
              //quote)
            (@fix_quotes
              (let ((s /str))
                (substring s (+ /n1 1) (string-length s)))))
          (if (< /n1 /n2)
            (concat
              (concat
                (concat
                  (let ((f 0)) (substring /str f (+ f /n1)))
                  //backslash)
                //quote)
              (@fix_quotes
                (let ((s /str))
                  (substring s (+ /n1 1) (string-length s)))))
            (concat
              (concat
                (concat
                  (let ((f 0)) (substring /str f (+ f /n2)))
                  //backslash)
                //backslash)
              (@fix_quotes
                (let ((s /str))
                  (substring s (+ /n2 1) (string-length s)))))))))))

(define (@qq /str)
  (concat
    (concat //quote (@fix_quotes /str))
    //quote))

(define (@pairs //l)
  (if (null? //l)
    //l
    (if (= (if (vector? //l)
             (vector-length //l)
             (length //l))
           1)
      (car //l)
      (if (null? (let ((name //l))
                   (if (vector? name)
                     (vector-ref name (- 1 1))
                     (list-ref name (- 1 1)))))
        (@pairs (cdr //l))
        (@pairs
          (cons (list (concat
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1))))))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1)))))
                      (concat
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))
                        (let ((name (let ((name //l))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1))))))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))))
                (cdr (cdr //l))))))))

(define (@pp_size //i /parent_prec)
  (let ((//printing-save //printing)
        (/row_no-save /row_no)
        (/col_no-save /col_no)
        (funct-result '()))
    (set! //printing 0)
    (set! /row_no 1)
    (set! /col_no 0)
    (@pp //i 0 /parent_prec)
    (set! funct-result (list /row_no /col_no))
    (set! //printing //printing-save)
    (set! /row_no /row_no-save)
    (set! /col_no /col_no-save)
    funct-result))

(define (@pph_size //i /parent_prec)
  (let ((//printing-save //printing)
        (/row_no-save /row_no)
        (/col_no-save /col_no)
        (funct-result '()))
    (set! //printing 0)
    (set! /row_no 1)
    (set! /col_no 0)
    (@pph //i 0 /parent_prec)
    (set! funct-result (list /row_no /col_no))
    (set! //printing //printing-save)
    (set! /row_no /row_no-save)
    (set! /col_no /col_no-save)
    funct-result))

(define (@pph //i /indent /parent_prec)
  (cond ((equal?
           (vector-ref //p/p_/type (- (@st //i) 1))
           //type_/simple)
         (@ps (@h_open
                (vector-ref //p/p_/opening (- (@st //i) 1))))
         (@ps (@fix_quotes (@value_string //i)))
         (@ps (@h_close
                (vector-ref //p/p_/closing (- (@st //i) 1)))))
        ((= //printing 1)
         (@pph_calc //i /indent /parent_prec))
        (#t
         (let ((//prev (@dtable_get //i //qry_/p/p_/size)))
           (cond ((and (not (null? //prev))
                       (equal?
                         /parent_prec
                         (car (@dtable_value_part //prev))))
                  (set! //prev (cdr (@dtable_value_part //prev)))
                  (cond ((= (let ((name //prev))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))
                            1)
                         (set! /col_no
                           (+ /col_no
                              (let ((name //prev))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1)))))))
                        (#t
                         (set! /row_no
                           (- (+ /row_no
                                 (let ((name //prev))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1)))))
                              1))
                         (set! /col_no
                           (let ((name //prev))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))))))
                 (#t
                  (let ((/row_save /row_no)
                        (/col_save /col_no)
                        (/new '()))
                    (@pph_calc //i /indent /parent_prec)
                    (cond ((equal? /row_no /row_save)
                           (set! /new
                             (list /parent_prec 1 (- /col_no /col_save))))
                          (#t
                           (set! /new
                             (list /parent_prec
                                   (+ (- /row_no /row_save) 1)
                                   /col_no))))
                    (@dtable_put //i //qry_/p/p_/size /new))))))))

(define (@pp //i /indent /parent_prec)
  (cond ((equal?
           (vector-ref //p/p_/type (- (@st //i) 1))
           //type_/simple)
         (@ps (concat
                (concat
                  (vector-ref //p/p_/opening (- (@st //i) 1))
                  (@fix_quotes (@value_string //i)))
                (vector-ref //p/p_/closing (- (@st //i) 1)))))
        ((= //printing 1)
         (@pp_calc //i /indent /parent_prec))
        (#t
         (let ((//prev (@dtable_get //i //qry_/p/p_/size)))
           (cond ((and (not (null? //prev))
                       (equal?
                         /parent_prec
                         (car (@dtable_value_part //prev))))
                  (set! //prev (cdr (@dtable_value_part //prev)))
                  (cond ((= (let ((name //prev))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1))))
                            1)
                         (set! /col_no
                           (+ /col_no
                              (let ((name //prev))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1)))))))
                        (#t
                         (set! /row_no
                           (- (+ /row_no
                                 (let ((name //prev))
                                   (if (vector? name)
                                     (vector-ref name (- 1 1))
                                     (list-ref name (- 1 1)))))
                              1))
                         (set! /col_no
                           (let ((name //prev))
                             (if (vector? name)
                               (vector-ref name (- 2 1))
                               (list-ref name (- 2 1))))))))
                 (#t
                  (let ((/row_save /row_no)
                        (/col_save /col_no)
                        (/new '()))
                    (@pp_calc //i /indent /parent_prec)
                    (cond ((equal? /row_no /row_save)
                           (set! /new
                             (list /parent_prec 1 (- /col_no /col_save))))
                          (#t
                           (set! /new
                             (list /parent_prec
                                   (+ (- /row_no /row_save) 1)
                                   /col_no))))
                    (@dtable_put //i //qry_/p/p_/size /new))))))))

(define (@pph_calc //i /indent /parent_prec)
  (let ((//s/t-save //s/t))
    (set! //s/t (@st //i))
    (let ((/type-save /type)
          (/prec-save /prec)
          (/size-save /size)
          (/chars 0)
          (/lines 0)
          (/pair "")
          (/sizes-save /sizes)
          (/comp-save /comp)
          (/one_line 1)
          (/open-save /open)
          (/close-save /close)
          (/op-save /op)
          (/op1-save /op1)
          (/op2-save /op2)
          (/comps-save /comps)
          (/split-save /split)
          (/opening "")
          (/sub_indent-save /sub_indent)
          (/sub2_indent-save /sub2_indent)
          (/last/l 0)
          (/save_comps '()))
      (set! /type (vector-ref //p/p_/type (- //s/t 1)))
      (set! /prec (vector-ref //p/p_/prec (- //s/t 1)))
      (set! /size (@size //i))
      (set! /sizes '())
      (set! /comp '())
      (set! /open
        (vector-ref //p/p_/opening (- //s/t 1)))
      (set! /close
        (vector-ref //p/p_/closing (- //s/t 1)))
      (set! /op
        (vector-ref //p/p_/operator (- //s/t 1)))
      (set! /op1
        (vector-ref //p/p_/operator1 (- //s/t 1)))
      (set! /op2
        (vector-ref //p/p_/operator2 (- //s/t 1)))
      (set! /comps (@components //i))
      (set! /split
        (vector-ref //p/p_/split (- //s/t 1)))
      (set! /sub_indent
        (+ /indent
           (vector-ref //p/p_/indent (- (@st //i) 1))))
      (set! /sub2_indent
        (+ /indent
           (vector-ref //p/p_/sub_/indent (- (@st //i) 1))))
      (let ((/open/l-save /open/l)
            (/close/l (string-length /close)))
        (set! /open/l (string-length /open))
        (set! /chars (@value_length //i))
        (cond ((equal? /type //type_/split)
               (cond ((or (= (@st (car /comps)) //t_/name)
                          (= (@st (car /comps)) //t_/name_/pat_/one)
                          (= (@st (car /comps)) //t_/name_/var_/one))
                      (set! /chars (@value_length (car /comps))))
                     ((= (@st (car /comps)) //t_/name_/var_/one)
                      (set! /chars
                        (car (@pph_size (car /comps) /parent_prec)))))
               (let ((/-result-
                       (@split_preprocess
                         //s/t
                         /op
                         /op1
                         /op2
                         /split
                         /comps
                         /size
                         /close)))
                 (set! /op (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /op1 (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /op2 (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /split (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /comps (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /size (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /close (car /-result-))
                 (set! /-result- (cdr /-result-)))))
        (set! /save_comps /comps)
        (cond ((member //s/t //p/p_/non_/assoc_/ops)
               (set! /prec (+ //p/p_/prec_/increment /prec))))
        (let ((var-save /comp) (seq-save /comps))
          (if (vector? seq-save)
            (set! seq-save (vector-elts seq-save)))
          (let for-in-loop ((for-tmp seq-save))
            (cond ((not (null? for-tmp))
                   (set! /comp (car for-tmp))
                   (begin
                     (set! /sizes
                       (cons (@pph_size /comp /prec) /sizes))
                     (set! /lines
                       (+ /lines
                          (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                     (set! /chars
                       (+ /chars
                          (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1))))))
                     (cond ((> (let ((name (let ((name /sizes))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))
                               1)
                            (set! /one_line 0))))
                   (for-in-loop (cdr for-tmp)))
                  (#t #t)))
          (set! /comp var-save))
        (set! /sizes (reverse /sizes))
        (cond ((> /chars //text_/width) (set! /one_line 0)))
        (cond ((and (= /one_line 1)
                    (not (null? (@set_intersect
                                  (@stat_types //i)
                                  //p/p_/n/l_/types))))
               (set! /one_line 0)))
        (cond ((member (@st //i) //p/p_/o/l_/types)
               (set! /one_line 1)))
        (cond ((= /one_line 0)
               (@pph_n_lines //i /indent /parent_prec))
              (#t
               (let ((//prev (@dtable_get //i //qry_/p/p/h_/string)))
                 (cond ((and (not (null? //prev))
                             (equal?
                               /parent_prec
                               (car (@dtable_value_part //prev))))
                        (set! /pair
                          (car (cdr (@dtable_value_part //prev)))))
                       (#t
                        (set! /pair (@pph_1_line //i /parent_prec))
                        (@dtable_put
                          //i
                          //qry_/p/p/h_/string
                          (list /parent_prec /pair)))))
               (cond ((or (<= (string-length
                                (let ((name /pair))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1)))))
                              //text_/width)
                          (member (@st //i) //p/p_/o/l_/types))
                      (@ps /pair))
                     (#t
                      (set! /comps /save_comps)
                      (@pph_n_lines //i /indent /parent_prec)))))
        (set! /open/l /open/l-save))
      (set! /type /type-save)
      (set! /prec /prec-save)
      (set! /size /size-save)
      (set! /sizes /sizes-save)
      (set! /comp /comp-save)
      (set! /open /open-save)
      (set! /close /close-save)
      (set! /op /op-save)
      (set! /op1 /op1-save)
      (set! /op2 /op2-save)
      (set! /comps /comps-save)
      (set! /split /split-save)
      (set! /sub_indent /sub_indent-save)
      (set! /sub2_indent /sub2_indent-save))
    (set! //s/t //s/t-save)))

(define (@pp_calc //i /indent /parent_prec)
  (let ((//s/t-save //s/t))
    (set! //s/t (@st //i))
    (let ((/type-save /type)
          (/prec-save /prec)
          (/size-save /size)
          (/chars 0)
          (/lines 0)
          (/str "")
          (/sizes-save /sizes)
          (/comp-save /comp)
          (/one_line 1)
          (/open-save /open)
          (/close-save /close)
          (/op-save /op)
          (/op1-save /op1)
          (/op2-save /op2)
          (/comps-save /comps)
          (/split-save /split)
          (/opening "")
          (/sub_indent-save /sub_indent)
          (/sub2_indent-save /sub2_indent)
          (/last/l 0)
          (/save_comps '()))
      (set! /type (vector-ref //p/p_/type (- //s/t 1)))
      (set! /prec (vector-ref //p/p_/prec (- //s/t 1)))
      (set! /size (@size //i))
      (set! /sizes '())
      (set! /comp '())
      (set! /open
        (vector-ref //p/p_/opening (- //s/t 1)))
      (set! /close
        (vector-ref //p/p_/closing (- //s/t 1)))
      (set! /op
        (vector-ref //p/p_/operator (- //s/t 1)))
      (set! /op1
        (vector-ref //p/p_/operator1 (- //s/t 1)))
      (set! /op2
        (vector-ref //p/p_/operator2 (- //s/t 1)))
      (set! /comps (@components //i))
      (set! /split
        (vector-ref //p/p_/split (- //s/t 1)))
      (set! /sub_indent
        (+ /indent
           (vector-ref //p/p_/indent (- (@st //i) 1))))
      (set! /sub2_indent
        (+ /indent
           (vector-ref //p/p_/sub_/indent (- (@st //i) 1))))
      (let ((/open/l-save /open/l)
            (/close/l (string-length /close)))
        (set! /open/l (string-length /open))
        (set! /chars (@value_length //i))
        (cond ((equal? /type //type_/split)
               (cond ((or (= (@st (car /comps)) //t_/name)
                          (= (@st (car /comps)) //t_/name_/pat_/one)
                          (= (@st (car /comps)) //t_/name_/var_/one))
                      (set! /chars (@value_length (car /comps))))
                     ((= (@st (car /comps)) //t_/name_/var_/one)
                      (set! /chars
                        (car (@pp_size (car /comps) /parent_prec)))))
               (let ((/-result-
                       (@split_preprocess
                         //s/t
                         /op
                         /op1
                         /op2
                         /split
                         /comps
                         /size
                         /close)))
                 (set! /op (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /op1 (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /op2 (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /split (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /comps (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /size (car /-result-))
                 (set! /-result- (cdr /-result-))
                 (set! /close (car /-result-))
                 (set! /-result- (cdr /-result-)))))
        (set! /save_comps /comps)
        (cond ((member //s/t //p/p_/non_/assoc_/ops)
               (set! /prec (+ //p/p_/prec_/increment /prec))))
        (let ((var-save /comp) (seq-save /comps))
          (if (vector? seq-save)
            (set! seq-save (vector-elts seq-save)))
          (let for-in-loop ((for-tmp seq-save))
            (cond ((not (null? for-tmp))
                   (set! /comp (car for-tmp))
                   (begin
                     (set! /sizes
                       (cons (@pp_size /comp /prec) /sizes))
                     (set! /lines
                       (+ /lines
                          (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))
                     (set! /chars
                       (+ /chars
                          (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1))))))
                     (cond ((> (let ((name (let ((name /sizes))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 1 1))
                                   (list-ref name (- 1 1))))
                               1)
                            (set! /one_line 0))))
                   (for-in-loop (cdr for-tmp)))
                  (#t #t)))
          (set! /comp var-save))
        (set! /sizes (reverse /sizes))
        (cond ((> /chars //text_/width) (set! /one_line 0)))
        (cond ((= /one_line 0)
               (@pp_n_lines //i /indent /parent_prec))
              (#t
               (let ((//prev (@dtable_get //i //qry_/p/p_/string)))
                 (cond ((and (not (null? //prev))
                             (equal?
                               /parent_prec
                               (car (@dtable_value_part //prev))))
                        (set! /str
                          (car (cdr (@dtable_value_part //prev)))))
                       (#t
                        (set! /str (@pp_1_line //i /parent_prec))
                        (@dtable_put
                          //i
                          //qry_/p/p_/string
                          (list /parent_prec /str)))))
               (cond ((<= (string-length /str) //text_/width)
                      (@ps /str))
                     (#t
                      (set! /comps /save_comps)
                      (@pp_n_lines //i /indent /parent_prec)))))
        (set! /open/l /open/l-save))
      (set! /type /type-save)
      (set! /prec /prec-save)
      (set! /size /size-save)
      (set! /sizes /sizes-save)
      (set! /comp /comp-save)
      (set! /open /open-save)
      (set! /close /close-save)
      (set! /op /op-save)
      (set! /op1 /op1-save)
      (set! /op2 /op2-save)
      (set! /comps /comps-save)
      (set! /split /split-save)
      (set! /sub_indent /sub_indent-save)
      (set! /sub2_indent /sub2_indent-save))
    (set! //s/t //s/t-save)))

(define (@pph_1 //i /parent_prec)
  (let ((//prev (@dtable_get //i //qry_/p/p/h_/string))
        (//s/t-save //s/t)
        (//r '())
        (funct-result '()))
    (set! //s/t (@st //i))
    (cond ((and (not (null? //prev))
                (equal?
                  /parent_prec
                  (car (@dtable_value_part //prev))))
           (set! //r
             (car (cdr (@dtable_value_part //prev)))))
          (#t
           (let ((/type-save /type)
                 (/prec-save /prec)
                 (/size-save /size)
                 (/open-save /open)
                 (/close-save /close)
                 (/op-save /op)
                 (/op1-save /op1)
                 (/op2-save /op2)
                 (/comps-save /comps)
                 (/split-save /split))
             (set! /type (vector-ref //p/p_/type (- //s/t 1)))
             (set! /prec (vector-ref //p/p_/prec (- //s/t 1)))
             (set! /size (@size //i))
             (set! /open
               (vector-ref //p/p_/opening (- //s/t 1)))
             (set! /close
               (vector-ref //p/p_/closing (- //s/t 1)))
             (set! /op
               (vector-ref //p/p_/operator (- //s/t 1)))
             (set! /op1
               (vector-ref //p/p_/operator1 (- //s/t 1)))
             (set! /op2
               (vector-ref //p/p_/operator2 (- //s/t 1)))
             (set! /comps (@components //i))
             (set! /split
               (vector-ref //p/p_/split (- //s/t 1)))
             (let ((/open/l-save /open/l)
                   (/close/l (string-length /close)))
               (set! /open/l (string-length /open))
               (cond ((equal? /type //type_/split)
                      (let ((/-result-
                              (@split_preprocess
                                //s/t
                                /op
                                /op1
                                /op2
                                /split
                                /comps
                                /size
                                /close)))
                        (set! /op (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /op1 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /op2 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /split (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /comps (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /size (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /close (car /-result-))
                        (set! /-result- (cdr /-result-)))))
               (set! //r (@pph_1_line //i /parent_prec))
               (@dtable_put
                 //i
                 //qry_/p/p/h_/string
                 (list /parent_prec //r))
               (set! /open/l /open/l-save))
             (set! /type /type-save)
             (set! /prec /prec-save)
             (set! /size /size-save)
             (set! /open /open-save)
             (set! /close /close-save)
             (set! /op /op-save)
             (set! /op1 /op1-save)
             (set! /op2 /op2-save)
             (set! /comps /comps-save)
             (set! /split /split-save))))
    (set! funct-result //r)
    (set! //s/t //s/t-save)
    funct-result))

(define (@pp_1 //i /parent_prec)
  (let ((//prev (@dtable_get //i //qry_/p/p_/string))
        (//s/t-save //s/t)
        (//r "")
        (funct-result '()))
    (set! //s/t (@st //i))
    (cond ((and (not (null? //prev))
                (equal?
                  /parent_prec
                  (car (@dtable_value_part //prev))))
           (set! //r
             (car (cdr (@dtable_value_part //prev)))))
          (#t
           (let ((/type-save /type)
                 (/prec-save /prec)
                 (/size-save /size)
                 (/open-save /open)
                 (/close-save /close)
                 (/op-save /op)
                 (/op1-save /op1)
                 (/op2-save /op2)
                 (/comps-save /comps)
                 (/split-save /split))
             (set! /type (vector-ref //p/p_/type (- //s/t 1)))
             (set! /prec (vector-ref //p/p_/prec (- //s/t 1)))
             (set! /size (@size //i))
             (set! /open
               (vector-ref //p/p_/opening (- //s/t 1)))
             (set! /close
               (vector-ref //p/p_/closing (- //s/t 1)))
             (set! /op
               (vector-ref //p/p_/operator (- //s/t 1)))
             (set! /op1
               (vector-ref //p/p_/operator1 (- //s/t 1)))
             (set! /op2
               (vector-ref //p/p_/operator2 (- //s/t 1)))
             (set! /comps (@components //i))
             (set! /split
               (vector-ref //p/p_/split (- //s/t 1)))
             (let ((/open/l-save /open/l)
                   (/close/l (string-length /close)))
               (set! /open/l (string-length /open))
               (cond ((equal? /type //type_/split)
                      (let ((/-result-
                              (@split_preprocess
                                //s/t
                                /op
                                /op1
                                /op2
                                /split
                                /comps
                                /size
                                /close)))
                        (set! /op (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /op1 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /op2 (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /split (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /comps (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /size (car /-result-))
                        (set! /-result- (cdr /-result-))
                        (set! /close (car /-result-))
                        (set! /-result- (cdr /-result-)))))
               (set! //r (@pp_1_line //i /parent_prec))
               (@dtable_put
                 //i
                 //qry_/p/p_/string
                 (list /parent_prec //r))
               (set! /open/l /open/l-save))
             (set! /type /type-save)
             (set! /prec /prec-save)
             (set! /size /size-save)
             (set! /open /open-save)
             (set! /close /close-save)
             (set! /op /op-save)
             (set! /op1 /op1-save)
             (set! /op2 /op2-save)
             (set! /comps /comps-save)
             (set! /split /split-save))))
    (set! funct-result //r)
    (set! //s/t //s/t-save)
    funct-result))

(set! /space (list " " " "))

(define (@h_span /class-par /str)
  (let ((/class-save /class)
        (/p1 0)
        (/p2 (- (string-length /str) 1))
        (//r /str)
        (/nospan "()[],")
        (funct-result '()))
    (set! /class /class-par)
    (cond ((> /p2 0)
           (let while-loop ()
             (cond ((and (< /p1 /p2)
                         (equal?
                           (let ((f /p1)) (substring /str f (+ f 1)))
                           " "))
                    (set! /p1 (+ /p1 1))
                    (while-loop))
                   (#t #t)))
           (let while-loop ()
             (cond ((and (< /p1 /p2)
                         (equal?
                           (let ((f /p2)) (substring /str f (+ f 1)))
                           " "))
                    (set! /p2 (- /p2 1))
                    (while-loop))
                   (#t #t)))
           (cond ((and (< /p1 /p2)
                       (member
                         (let ((f /p1))
                           (substring /str f (+ f (+ (- /p2 /p1) 1))))
                         //keywords))
                  (set! /class "KEY")))
           (cond ((> /p1 /p2))
                 ((and (equal? /p1 /p2)
                       (>= (let ((index-result
                                   (substring?
                                     (let ((f /p1)) (substring /str f (+ f 1)))
                                     /nospan)))
                             (if index-result index-result -1))
                           0)))
                 (#t
                  (set! //r
                    (concat
                      (string-append
                        (concat
                          (string-append
                            (concat
                              (string-append
                                (let ((f 0)) (substring /str f (+ f /p1)))
                                "<SPAN class='")
                              /class)
                            "'>")
                          (@html (let ((f /p1))
                                   (substring /str f (+ f (+ (- /p2 /p1) 1))))))
                        "</SPAN>")
                      (let ((s /str))
                        (substring s (+ /p2 1) (string-length s)))))))))
    (set! funct-result //r)
    (set! /class /class-save)
    funct-result))

(define (@h_open /str)
  (list /str (@h_span "OPEN" /str)))

(define (@h_close /str)
  (list /str (@h_span "CLOSE" /str)))

(define (@h_op /str)
  (list /str (@h_span "OPER" /str)))

(define (@h_str /str)
  (let ((//r (@fix_quotes /str)))
    (list //r
          (if (@spaces? /str)
            /str
            (string-append
              (string-append
                "<SPAN class='STRING'>"
                (@html /str))
              "</SPAN>")))))

(define (@html /str)
  (if (equal? /str "")
    /str
    (if (equal?
          (let ((f 0)) (substring /str f (+ f 1)))
          "<")
      (string-append
        "&lt;"
        (@html (let ((s /str))
                 (substring s 1 (string-length s)))))
      (if (equal?
            (let ((f 0)) (substring /str f (+ f 1)))
            ">")
        (string-append
          "&gt;"
          (@html (let ((s /str))
                   (substring s 1 (string-length s)))))
        (if (equal?
              (let ((f 0)) (substring /str f (+ f 1)))
              "&")
          (string-append
            "&amp;"
            (@html (let ((s /str))
                     (substring s 1 (string-length s)))))
          (if (equal?
                (let ((f 0)) (substring /str f (+ f 1)))
                //quote)
            (string-append
              "&quot;"
              (@html (let ((s /str))
                       (substring s 1 (string-length s)))))
            (concat
              (let ((f 0)) (substring /str f (+ f 1)))
              (@html (let ((s /str))
                       (substring s 1 (string-length s)))))))))))

(define (@h_value //i)
  (let ((//s/t-save //s/t)
        (/str "")
        (//r '())
        (funct-result '()))
    (set! //s/t (@st //i))
    (cond ((not (@has_value_type? //s/t))
           (set! //r (list "" "")))
          ((= //s/t //t_/string)
           (set! //r (@h_str (@v //i))))
          ((= //s/t //t_/comment)
           (error "@H_Value called on a comment!"))
          ((or (= //s/t //t_/number) (= //s/t //t_/exit))
           (set! /str (@string (@v //i)))
           (set! //r (list /str /str)))
          ((= //s/t //t_/name)
           (set! /str (@h_rename (@v //i)))
           (set! //r (list /str (@h_span "NAME" /str))))
          ((= //s/t //t_/call)
           (set! /str (@h_rename (@v //i)))
           (set! //r (list /str (@h_span "CALL" /str))))
          ((or (= //s/t //t_/variable)
               (= //s/t //t_/var_/lvalue)
               (= //s/t //t_/primed_/var))
           (set! /str (@h_rename (@v //i)))
           (set! //r (list /str (@h_span "VARIABLE" /str))))
          ((@any_pattern_type? //s/t)
           (set! /str (@n_string (@v //i)))
           (set! //r (list /str /str)))
          ((or (= //s/t //t_/expn_/pseudo)
               (= //s/t //t_/lvalue_/pseudo)
               (= //s/t //t_/cond_/pseudo)
               (= //s/t //t_/stat_/pseudo))
           (set! /str (@v //i))
           (set! //r (list /str /str)))
          (#t
           (@print_wsl //i "")
           (error "Unexpected type in @H_Value")))
    (set! funct-result //r)
    (set! //s/t //s/t-save)
    funct-result))

(define (@h_rename /name)
  (if (null? (gethash //orig_/name /name))
    (@n_string /name)
    (@html (@n_string (gethash //orig_/name /name)))))

(define (@h_name_value //i)
  (let ((//s/t-save //s/t)
        (/str "")
        (//r '())
        (funct-result '()))
    (set! //s/t '())
    (cond ((@cs? //i)
           (set! //s/t (@st (list-ref //i (+ 1 1))))
           (cond ((= //s/t //t_/name)
                  (set! /str
                    (@n_string (@v (list-ref //i (+ 1 1)))))
                  (set! //r (list /str (@h_span "NAME" /str))))
                 ((= //s/t //t_/name_/pat_/one)
                  (set! /str
                    (string-append
                      "~?"
                      (@n_string (@v (list-ref //i (+ 1 1))))))
                  (set! //r (list /str /str)))
                 ((= //s/t //t_/name_/var_/one)
                  (set! /str
                    (string-append
                      "~?="
                      (@n_string (@v (list-ref //i (+ 1 1))))))
                  (set! //r (list /str /str)))
                 ((= //s/t //t_/name_/int_/one)
                  (set! /str
                    (string-append
                      (string-append
                        "~?("
                        (car (@pph_1
                               (list-ref (list-ref //i (+ 1 1)) (+ 1 1))
                               0)))
                      ")"))
                  (set! //r (list /str /str)))
                 (#t (set! //r (list "" "")))))
          (#t (set! //r (list "" ""))))
    (set! funct-result //r)
    (set! //s/t //s/t-save)
    funct-result))

(define (@pp_nl /op1-par /sub_indent-par /op2-par)
  (let ((/op2-save /op2)
        (/sub_indent-save /sub_indent)
        (/op1-save /op1))
    (set! /op2 /op2-par)
    (set! /sub_indent /sub_indent-par)
    (set! /op1 /op1-par)
    (cond ((= //in_/comment 1)
           (@ps "<SPAN class='CO'>")
           (@pl (@h_op /op1))
           (@pp_indent /sub_indent)
           (@ps (@h_op /op2))
           (@ps "</SPAN>")
           (set! //in_/comment 0))
          (#t
           (@pl (@h_op /op1))
           (@pp_indent /sub_indent)
           (@ps (@h_op /op2))))
    (set! /op2 /op2-save)
    (set! /sub_indent /sub_indent-save)
    (set! /op1 /op1-save)))

(define (@h_comment_orig //i)
  (let ((/line "") (/str ""))
    (cond ((@h_fermat? //i)
           (set! /line
             (let ((f 9)) (substring (@v //i) f (+ f 8))))
           (set! /class "COF")
           (set! /str
             (string-append
               (concat
                 (string-append
                   (string-append
                     (concat
                       (string-append
                         (concat
                           (string-append
                             (string-append
                               (string-append "<A NAME=" (@qq /line))
                               "></A>")
                             "<A HREF=")
                           (@qq (concat
                                  (string-append
                                    (string-append "source/" //base_/name)
                                    "-asm.htm#")
                                  /line)))
                         " TARGET=")
                       (@qq "_blank"))
                     "> ")
                   "<SPAN class='COF'>")
                 (@ws_replace
                   " "
                   /nbsp
                   (@html (let ((f 0)) (substring (@v //i) f (+ f 17))))))
               "</SPAN></A>")))
          (#t
           (set! /str
             (@ws_replace " " /nbsp (@html (@v //i))))))
    (string-append
      (string-append "<SPAN class='CO'>" /str)
      "</SPAN>")))

(define (@pph_comment //i)
  (let ((/line "") (/str "") (/arrow "&#8594;"))
    (cond ((@h_fermat? //i)
           (cond ((= //printing 1)
                  (set! /line
                    (let ((f 9)) (substring (@v //i) f (+ f 8))))
                  (set! //margin_/link
                    (string-append
                      (concat
                        (string-append
                          (concat
                            (string-append
                              (concat
                                (string-append
                                  (string-append
                                    (string-append "<A NAME=" (@qq /line))
                                    "></A>")
                                  "<A HREF=")
                                (@qq (concat
                                       (string-append
                                         (string-append "source/" //base_/name)
                                         "-asm.htm#")
                                       /line)))
                              " style=")
                            (@qq "text-decoration:none"))
                          ">")
                        /arrow)
                      "</A>")))))
          (#t
           (cond ((= //printing 1) (set! //in_/comment 1)))
           (@ps (string-append
                  (string-append
                    "<SPAN class='CO'>"
                    (@ws_replace " " /nbsp (@html (@v //i))))
                  "</SPAN>"))))))

(define (@pph_1_line //i /parent_prec)
  (let ((//r '()))
    (cond ((and (= (@st //i) //t_/proc_/call)
                (= (@size (list-ref //i (+ 1 2))) 0)
                (= (@size (list-ref //i (+ 1 3))) 0))
           (let ((/str (@pp_1 (list-ref //i (+ 1 1)) /parent_prec)))
             (set! //r
               (list /str
                     (string-append
                       (string-append
                         (concat
                           (string-append
                             (string-append
                               "<A HREF="
                               (@qq (string-append
                                      "#"
                                      (@n_string (@v (list-ref //i (+ 1 1)))))))
                             ">")
                           /str)
                         "</A>")
                       "()")))))
          ((and (= (@st //i) //t_/string)
                (@starts_with? (@v //i) "hex 0x"))
           (set! //r
             (@h_str
               (let ((s (@v //i)))
                 (substring s 4 (string-length s))))))
          ((equal? /type //type_/simple)
           (set! //r
             (@pairs
               (list (@h_open /open)
                     (@h_value //i)
                     (@h_close /close)))))
          ((equal? /type //type_/prefix)
           (cond ((@cs? (list-ref //i (+ 1 1)))
                  (set! //r
                    (@pairs
                      (list (@h_op /op)
                            (@h_open /open)
                            (@pph_1 (list-ref //i (+ 1 1)) /prec)
                            (@h_close /close)))))
                 (#t
                  (set! //r
                    (@pairs
                      (list (@h_op /op)
                            (@pph_1 (list-ref //i (+ 1 1)) /prec)))))))
          ((equal? /type //type_/infix)
           (cond ((and (= //s/t //t_/sequence)
                       (= (@size (list-ref //i (+ 1 1))) 0))
                  (set! //r
                    (@pairs
                      (list (@h_open /open) /space (@h_close /close)))))
                 (#t
                  (let ((/new_prec /prec))
                    (cond ((member //s/t //p/p_/non_/assoc_/ops)
                           (set! /new_prec (+ //p/p_/prec_/increment /prec))))
                    (cond ((or (= /prec 0)
                               (< /prec /parent_prec)
                               (and (equal? /prec //prec_/and)
                                    (equal? /parent_prec //prec_/or)))
                           (set! //r
                             (@pairs
                               (list (@h_open /open)
                                     (@pph_join /comps /op /new_prec)
                                     (@h_close /close)))))
                          (#t (set! //r (@pph_join /comps /op /new_prec))))))))
          ((equal? /type //type_/split)
           (set! //r
             (@pairs
               (list (@h_open /open) (@h_name_value //i))))
           (let ((/op_1 '()))
             (let ((var-save /op_1) (seq-save /op))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /op_1 (car for-tmp))
                        (begin
                          (set! //r
                            (@pairs
                              (list //r
                                    (@h_op /op_1)
                                    (@pph_1 (car /comps) /prec))))
                          (set! /comps (cdr /comps)))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /op_1 var-save)))
           (set! //r (@pairs (list //r (@h_close /close)))))
          ((equal? /type //type_/ifmatch)
           (set! //r
             (@pairs
               (list (@h_open /open)
                     (@pph_1 (list-ref //i (+ 1 1)) /prec))))
           (set! //r
             (@pairs
               (list //r
                     (@h_op (let ((name /op))
                              (if (vector? name)
                                (vector-ref name (- 1 1))
                                (list-ref name (- 1 1)))))
                     (@pph_1 (list-ref //i (+ 1 2)) /prec))))
           (cond ((and (= (@size (list-ref //i (+ 1 3))) 1)
                       (= (@st (list-ref //i (+ 1 3))) //t_/skip))
                  #t)
                 (#t
                  (set! //r
                    (@pairs
                      (list //r
                            (@h_op (let ((name /op))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                            (@pph_1 (list-ref //i (+ 1 3)) /prec))))))
           (set! //r (@pairs (list //r (@h_close /close)))))
          ((= //s/t //t_/cond)
           (set! //r (@h_open /open))
           (let ((//b '()) (//s '()))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (cond ((< (@size (car /comps)) 2)
                               (set! //r
                                 (@pairs
                                   (list //r (@pph_1 (car /comps) /prec))))
                               (set! /comps (cdr /comps)))
                              (#t
                               (set! //b (list-ref (car /comps) (+ 1 1)))
                               (set! //s (list-ref (car /comps) (+ 1 2)))
                               (set! /comps (cdr /comps))
                               (cond ((and (null? /comps)
                                           (= (@st //b) //t_/true))
                                      (cond ((and (= (@size //s) 1)
                                                  (= (@st (list-ref
                                                            //s
                                                            (+ 1 1)))
                                                     //t_/skip))
                                             #t)
                                            (#t
                                             (set! //r
                                               (@pairs
                                                 (list //r
                                                       (@h_op (let ((name /op))
                                                                (if (vector?
                                                                      name)
                                                                  (vector-ref
                                                                    name
                                                                    (- 3 1))
                                                                  (list-ref
                                                                    name
                                                                    (- 3 1)))))
                                                       (@pph_1 //s /prec)))))))
                                     (#t
                                      (set! //r
                                        (@pairs
                                          (list //r
                                                (@pph_1 //b /prec)
                                                (@h_op (let ((name /op))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- 1 1))
                                                           (list-ref
                                                             name
                                                             (- 1 1)))))
                                                (@pph_1 //s /prec))))))))
                        (cond ((and (not (null? /comps))
                                    (or (not (null? (cdr /comps)))
                                        (< (@size (car /comps)) 2)
                                        (not (= (@st (list-ref
                                                       (car /comps)
                                                       (+ 1 1)))
                                                //t_/true))))
                               (set! //r
                                 (@pairs
                                   (list //r
                                         (@h_op (let ((name /op))
                                                  (if (vector? name)
                                                    (vector-ref name (- 2 1))
                                                    (list-ref
                                                      name
                                                      (- 2 1)))))))))))
                      (while-loop))
                     (#t #t)))
             (set! //r (@pairs (list //r (@h_close /close))))))
          ((= //s/t //t_/assignment)
           (cond ((= /size 1)
                  (set! //r (@pph_1 (list-ref //i (+ 1 1)) /prec)))
                 (#t
                  (set! //r
                    (@pph_1 (@make //t_/assigns '() /comps) /prec)))))
          ((or (= //s/t //t_/aref)
               (= //s/t //t_/aref_/lvalue))
           (set! //r
             (@pairs
               (list (@pph_1 (list-ref //i (+ 1 1)) /prec)
                     (@h_open /open)
                     (@pph_join
                       (@cs (list-ref //i (+ 1 2)))
                       /op
                       /prec)
                     (@h_close /close)))))
          ((or (= //s/t //t_/struct)
               (= //s/t //t_/struct_/lvalue))
           (set! //r
             (@pairs
               (list (@pph_1 (list-ref //i (+ 1 2)) /prec)
                     (@h_op /op)
                     (@h_value (list-ref //i (+ 1 1)))))))
          ((= //s/t //t_/where)
           (set! //r
             (@pairs
               (list (@h_open /open)
                     /space
                     (@pph_1 (list-ref //i (+ 1 1)) /prec)
                     /space
                     (@h_op /op)
                     /space
                     (@pph_1 (list-ref //i (+ 1 2)) /prec)
                     /space
                     (@h_close /close)))))
          (#t
           (begin
             (display
               (string-append
                 (concat
                   (string-append
                     (string-append
                       "UNRECOGNISED TYPE 3: "
                       (@type_name (@st //i)))
                     "(")
                   (@st //i))
                 ")"))
             (newline)
             (force-output))))
    //r))

(define (@pp_1_line //i /parent_prec)
  (let ((//r ""))
    (cond ((= (@st //i) //t_/string)
           (set! //r
             (concat
               (concat /open (@fix_quotes (@value_string //i)))
               /close)))
          ((equal? /type //type_/simple)
           (set! //r
             (concat
               (concat /open (@value_string //i))
               /close)))
          ((equal? /type //type_/prefix)
           (cond ((@cs? (list-ref //i (+ 1 1)))
                  (set! //r
                    (concat
                      (concat
                        (concat /op /open)
                        (@pp_1 (list-ref //i (+ 1 1)) /prec))
                      /close)))
                 (#t
                  (set! //r
                    (concat /op (@pp_1 (list-ref //i (+ 1 1)) /prec))))))
          ((equal? /type //type_/infix)
           (cond ((and (= //s/t //t_/sequence)
                       (= (@size (list-ref //i (+ 1 1))) 0))
                  (set! //r
                    (concat (string-append /open " ") /close)))
                 (#t
                  (let ((/new_prec /prec))
                    (cond ((member //s/t //p/p_/non_/assoc_/ops)
                           (set! /new_prec (+ //p/p_/prec_/increment /prec))))
                    (cond ((or (= /prec 0) (< /prec /parent_prec))
                           (set! //r
                             (concat
                               (concat /open (@pp_join /comps /op /new_prec))
                               /close)))
                          (#t (set! //r (@pp_join /comps /op /new_prec))))))))
          ((equal? /type //type_/split)
           (set! //r (concat /open (@name_value //i)))
           (let ((/op_1 '()))
             (let ((var-save /op_1) (seq-save /op))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /op_1 (car for-tmp))
                        (begin
                          (set! //r
                            (concat
                              (concat //r /op_1)
                              (@pp_1 (car /comps) /prec)))
                          (set! /comps (cdr /comps)))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /op_1 var-save)))
           (set! //r (concat //r /close)))
          ((equal? /type //type_/ifmatch)
           (set! //r
             (concat
               /open
               (@pp_1 (list-ref //i (+ 1 1)) /prec)))
           (set! //r
             (concat
               (concat
                 //r
                 (let ((name /op))
                   (if (vector? name)
                     (vector-ref name (- 1 1))
                     (list-ref name (- 1 1)))))
               (@pp_1 (list-ref //i (+ 1 2)) /prec)))
           (cond ((and (= (@size (list-ref //i (+ 1 3))) 1)
                       (= (@st (list-ref //i (+ 1 3))) //t_/skip))
                  #t)
                 (#t
                  (set! //r
                    (concat
                      (concat
                        //r
                        (let ((name /op))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1)))))
                      (@pp_1 (list-ref //i (+ 1 3)) /prec)))))
           (set! //r (concat //r /close)))
          ((= //s/t //t_/cond)
           (set! //r /open)
           (let ((//b '()) (//s '()))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (cond ((< (@size (car /comps)) 2)
                               (set! //r
                                 (concat //r (@pp_1 (car /comps) /prec)))
                               (set! /comps (cdr /comps)))
                              (#t
                               (set! //b (list-ref (car /comps) (+ 1 1)))
                               (set! //s (list-ref (car /comps) (+ 1 2)))
                               (set! /comps (cdr /comps))
                               (cond ((and (null? /comps)
                                           (= (@st //b) //t_/true))
                                      (cond ((and (= (@size //s) 1)
                                                  (= (@st (list-ref
                                                            //s
                                                            (+ 1 1)))
                                                     //t_/skip))
                                             #t)
                                            (#t
                                             (set! //r
                                               (concat
                                                 (concat
                                                   //r
                                                   (let ((name /op))
                                                     (if (vector? name)
                                                       (vector-ref name (- 3 1))
                                                       (list-ref
                                                         name
                                                         (- 3 1)))))
                                                 (@pp_1 //s /prec))))))
                                     (#t
                                      (set! //r
                                        (concat
                                          (concat
                                            (concat //r (@pp_1 //b /prec))
                                            (let ((name /op))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1)))))
                                          (@pp_1 //s /prec)))))))
                        (cond ((and (not (null? /comps))
                                    (or (not (null? (cdr /comps)))
                                        (< (@size (car /comps)) 2)
                                        (not (= (@st (list-ref
                                                       (car /comps)
                                                       (+ 1 1)))
                                                //t_/true))))
                               (set! //r
                                 (concat
                                   //r
                                   (let ((name /op))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))))))
                      (while-loop))
                     (#t #t)))
             (set! //r (concat //r /close))))
          ((= //s/t //t_/assignment)
           (cond ((= /size 1)
                  (set! //r (@pp_1 (list-ref //i (+ 1 1)) /prec)))
                 (#t
                  (set! //r
                    (@pp_1 (@make //t_/assigns '() /comps) /prec)))))
          ((or (= //s/t //t_/aref)
               (= //s/t //t_/aref_/lvalue))
           (set! //r
             (concat
               (concat
                 (concat
                   (@pp_1 (list-ref //i (+ 1 1)) /prec)
                   /open)
                 (@pp_join (@cs (list-ref //i (+ 1 2))) /op /prec))
               /close)))
          ((or (= //s/t //t_/struct)
               (= //s/t //t_/struct_/lvalue))
           (set! //r
             (concat
               (concat (@pp_1 (list-ref //i (+ 1 2)) /prec) /op)
               (@n_string (@v (list-ref //i (+ 1 1)))))))
          ((= //s/t //t_/where)
           (set! //r
             (concat
               (string-append
                 (concat
                   (string-append
                     (concat
                       (string-append
                         (concat
                           (string-append /open " ")
                           (@pp_1 (list-ref //i (+ 1 1)) /prec))
                         " ")
                       /op)
                     " ")
                   (@pp_1 (list-ref //i (+ 1 2)) /prec))
                 " ")
               /close)))
          (#t
           (begin
             (display
               (string-append
                 (concat
                   (string-append
                     (string-append
                       "UNRECOGNISED TYPE 3: "
                       (@type_name (@st //i)))
                     "(")
                   (@st //i))
                 ")"))
             (newline)
             (force-output))))
    //r))

(define (@pph_n_lines //i /indent /parent_prec)
  (let ((/last/l 0) (/last '()))
    (set! /last/l (car (cdr (last-1 /sizes))))
    (cond ((or (= (@st //i) //t_/comment)
               (= (@st //i) //t_/proc_/call))
           (@ps (@pph_1_line //i 0)))
          ((equal? /type //type_/simple)
           (@ps (@h_open /open))
           (@ps (@fix_quotes (@value_string //i)))
           (@ps (@h_close /close)))
          ((equal? /type //type_/prefix)
           (cond ((@cs? (list-ref //i (+ 1 1)))
                  (@ps (@h_op /op))
                  (@ps (@h_open /open))
                  (@pph (list-ref //i (+ 1 1)) /sub2_indent /prec)
                  (@ps (@h_close /close)))
                 (#t
                  (@ps (@h_op /op))
                  (@pph (list-ref //i (+ 1 1)) /sub2_indent /prec))))
          ((equal? /type //type_/infix)
           (let ((/new_prec /prec))
             (cond ((member //s/t //p/p_/non_/assoc_/ops)
                    (set! /new_prec (+ //p/p_/prec_/increment /prec))))
             (cond ((or (= /prec 0)
                        (< /prec /parent_prec)
                        (and (equal? /prec //prec_/and)
                             (equal? /parent_prec //prec_/or)))
                    (@ps (@h_open /open))
                    (cond ((and (= (let ((name (let ((name /sizes))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   1)
                                (<= (+ (let ((name (let ((name /sizes))
                                                     (if (vector? name)
                                                       (vector-ref name (- 1 1))
                                                       (list-ref
                                                         name
                                                         (- 1 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 2 1))
                                           (list-ref name (- 2 1))))
                                       /open/l)
                                    (- /sub_indent /indent)))
                           (@ps (@pph_1 (car /comps) /new_prec))
                           (@ps (@h_op /op))
                           (set! /comps (cdr /comps)))))
                   (#t
                    (cond ((and (= (let ((name (let ((name /sizes))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   1)
                                (<= (let ((name (let ((name /sizes))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1))))
                                    (- /sub_indent /indent)))
                           (@ps (@pph_1 (car /comps) /new_prec))
                           (@ps (@h_op /op))
                           (set! /comps (cdr /comps))))))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (cond ((= (@st (car /comps)) //t_/comment)
                               (set! /comps
                                 (@pph_comments "" /sub_indent /op2 /comps)))
                              (#t
                               (cond ((and (= (@st (car /comps))
                                              //t_/a_/proc_/call)
                                           (member
                                             //t/p/f_name
                                             (@assigned (car /comps))))
                                      (@pph_tpf
                                        (car /comps)
                                        /sub2_indent
                                        /prec))
                                     (#t
                                      (@pph (car /comps) /sub2_indent /prec)))
                               (set! /last (car /comps))
                               (set! /comps (cdr /comps))
                               (let while-loop ()
                                 (cond ((and (not (null? /comps))
                                             (@h_fermat? (car /comps)))
                                        (begin
                                          (@pph_comment (car /comps))
                                          (set! /comps (cdr /comps)))
                                        (while-loop))
                                       (#t #t)))
                               (cond ((>= (@h_count_comments /comps)
                                          //p/p_/hide_/comments)
                                      (cond ((not (= (@st /last) //t_/comment))
                                             (@ps /op1))))
                                     ((and (not (null? /comps))
                                           (= (@st (car /comps)) //t_/proc))
                                      (@pl (list "" "")))
                                     ((not (null? /comps))
                                      (@pp_nl /op1 /sub_indent /op2))))))
                      (while-loop))
                     (#t #t)))
             (cond ((or (= /prec 0)
                        (< /prec /parent_prec)
                        (and (equal? /prec //prec_/and)
                             (equal? /parent_prec //prec_/or)))
                    (@pp_close
                      /last/l
                      /prec
                      /indent
                      /sub2_indent
                      /close)))))
          ((equal? /type //type_/split)
           (cond ((= (@st //i) //t_/proc)
                  (@ph "<HR>")
                  (@pp_indent /indent)
                  (@ph (string-append
                         (string-append
                           "<A NAME="
                           (@qq (@n_string (@v (list-ref //i (+ 1 1))))))
                         ">"))))
           (let ((/chars1 0) (/i 0))
             (set! /chars1 (+ /open/l (@name_length //i)))
             (let ((var-save /i) (for-step 1) (for-end /split))
               (set! /i 1)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (begin
                          (cond ((> (let ((name (let ((name /sizes))
                                                  (if (vector? name)
                                                    (vector-ref name (- /i 1))
                                                    (list-ref name (- /i 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))
                                    1)
                                 (set! /chars1 (+ //text_/width 1))))
                          (set! /chars1
                            (+ /chars1
                               (string-length
                                 (let ((name /op))
                                   (if (vector? name)
                                     (vector-ref name (- /i 1))
                                     (list-ref name (- /i 1)))))
                               (let ((name (let ((name /sizes))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 2 1))
                                   (list-ref name (- 2 1)))))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (cond ((<= /chars1 //text_/width)
                    (@ps (@h_open /open))
                    (@ps (@h_name_value //i))
                    (let ((var-save /i) (for-step 1) (for-end /split))
                      (set! /i 1)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (begin
                                 (@ps (@h_op (let ((name /op))
                                               (if (vector? name)
                                                 (vector-ref name (- /i 1))
                                                 (list-ref name (- /i 1))))))
                                 (@ps (@pph_1
                                        (let ((name /comps))
                                          (if (vector? name)
                                            (vector-ref name (- /i 1))
                                            (list-ref name (- /i 1))))
                                        /prec)))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))
                    (cond ((< /split /size)
                           (cond ((and (= (@st //i) //t_/proc)
                                       (>= (@h_count_comments
                                             (@cs (list-ref //i (+ 1 4))))
                                           //p/p_/hide_/comments))
                                  (@ps (@h_op (let ((name /op))
                                                (if (vector? name)
                                                  (vector-ref
                                                    name
                                                    (- (+ /split 1) 1))
                                                  (list-ref
                                                    name
                                                    (- (+ /split 1) 1)))))))
                                 ((> /chars1 (- /sub_indent /indent))
                                  (cond ((and (= (@st (let ((name /comps))
                                                        (if (vector? name)
                                                          (vector-ref
                                                            name
                                                            (- (+ /split 1) 1))
                                                          (list-ref
                                                            name
                                                            (- (+ /split 1)
                                                               1)))))
                                                 //t_/statements)
                                              (@h_fermat?
                                                (list-ref
                                                  (let ((name /comps))
                                                    (if (vector? name)
                                                      (vector-ref
                                                        name
                                                        (- (+ /split 1) 1))
                                                      (list-ref
                                                        name
                                                        (- (+ /split 1) 1))))
                                                  (+ 1 1))))
                                         (@pph_comment
                                           (list-ref
                                             (let ((name /comps))
                                               (if (vector? name)
                                                 (vector-ref
                                                   name
                                                   (- (+ /split 1) 1))
                                                 (list-ref
                                                   name
                                                   (- (+ /split 1) 1))))
                                             (+ 1 1)))))
                                  (@pp_nl
                                    (let ((name /op1))
                                      (if (vector? name)
                                        (vector-ref name (- (+ /split 1) 1))
                                        (list-ref name (- (+ /split 1) 1))))
                                    /sub_indent
                                    (let ((name /op2))
                                      (if (vector? name)
                                        (vector-ref name (- (+ /split 1) 1))
                                        (list-ref name (- (+ /split 1) 1))))))
                                 (#t
                                  (@ps (@h_op (let ((name /op))
                                                (if (vector? name)
                                                  (vector-ref
                                                    name
                                                    (- (+ /split 1) 1))
                                                  (list-ref
                                                    name
                                                    (- (+ /split 1) 1)))))))))))
                   (#t
                    (set! /chars1
                      (+ /open/l
                         (@name_length //i)
                         (string-length
                           (let ((name /op))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1)))))))
                    (@ps (@h_open /open))
                    (@ps (@h_name_value //i))
                    (cond ((<= /chars1 //big_/indent)
                           (set! /sub3_indent (+ /indent /chars1))
                           (@ps (@h_op (let ((name /op))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))))
                           (cond ((> /split 0)
                                  (@pph (let ((name /comps))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))
                                        (+ /sub3_indent
                                           (string-length
                                             (let ((name /op))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))))
                                        /prec))))
                          (#t
                           (set! /sub3_indent /sub2_indent)
                           (@pp_nl
                             (let ((name /op1))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))
                             /sub3_indent
                             (let ((name /op2))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1)))))
                           (cond ((> /split 0)
                                  (@pph (let ((name /comps))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))
                                        (+ /sub3_indent
                                           (string-length
                                             (let ((name /op2))
                                               (if (vector? name)
                                                 (vector-ref name (- 1 1))
                                                 (list-ref name (- 1 1))))))
                                        /prec)))))
                    (let ((var-save /i) (for-step 1) (for-end /split))
                      (set! /i 2)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (begin
                                 (@pp_nl
                                   (let ((name /op1))
                                     (if (vector? name)
                                       (vector-ref name (- /i 1))
                                       (list-ref name (- /i 1))))
                                   /sub3_indent
                                   (let ((name /op2))
                                     (if (vector? name)
                                       (vector-ref name (- /i 1))
                                       (list-ref name (- /i 1)))))
                                 (@pph (let ((name /comps))
                                         (if (vector? name)
                                           (vector-ref name (- /i 1))
                                           (list-ref name (- /i 1))))
                                       (+ /sub3_indent
                                          (string-length
                                            (let ((name /op2))
                                              (if (vector? name)
                                                (vector-ref name (- /i 1))
                                                (list-ref name (- /i 1))))))
                                       /prec))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))
                    (cond ((< /split /size)
                           (@pp_nl
                             (let ((name /op1))
                               (if (vector? name)
                                 (vector-ref name (- (+ /split 1) 1))
                                 (list-ref name (- (+ /split 1) 1))))
                             /sub_indent
                             (let ((name /op2))
                               (if (vector? name)
                                 (vector-ref name (- (+ /split 1) 1))
                                 (list-ref name (- (+ /split 1) 1)))))))))
             (cond ((= (@st //i) //t_/proc) (@ph "</A>")))
             (let ((var-save /i) (for-step 1) (for-end /size))
               (set! /i (+ /split 1))
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (begin
                          (@pph (let ((name /comps))
                                  (if (vector? name)
                                    (vector-ref name (- /i 1))
                                    (list-ref name (- /i 1))))
                                /sub2_indent
                                /prec)
                          (cond ((< /i /size)
                                 (@pp_nl
                                   (let ((name /op1))
                                     (if (vector? name)
                                       (vector-ref name (- (+ /i 1) 1))
                                       (list-ref name (- (+ /i 1) 1))))
                                   /sub_indent
                                   (let ((name /op2))
                                     (if (vector? name)
                                       (vector-ref name (- (+ /i 1) 1))
                                       (list-ref name (- (+ /i 1) 1))))))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (@pp_close
               /last/l
               /prec
               /indent
               /sub2_indent
               /close)))
          ((equal? /type //type_/ifmatch)
           (@ps (@h_open /open))
           (@pph (list-ref //i (+ 1 1))
                 (+ /indent /open/l)
                 /prec)
           (@pp_nl
             (let ((name /op1))
               (if (vector? name)
                 (vector-ref name (- 1 1))
                 (list-ref name (- 1 1))))
             /sub_indent
             (let ((name /op2))
               (if (vector? name)
                 (vector-ref name (- 1 1))
                 (list-ref name (- 1 1)))))
           (@pph (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (cond ((and (= (@size (list-ref //i (+ 1 3))) 1)
                       (= (@st (list-ref //i (+ 1 3))) //t_/skip))
                  (set! /last/l
                    (let ((name (let ((name /sizes))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))))
                 (#t
                  (@pp_nl
                    (let ((name /op1))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))
                    /sub_indent
                    (let ((name /op2))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1)))))
                  (@pph (list-ref //i (+ 1 3)) /sub2_indent /prec)))
           (@pp_close
             /last/l
             /prec
             /indent
             /sub2_indent
             /close))
          ((= //s/t //t_/cond)
           (@ps (@h_open /open))
           (let ((//b '())
                 (//s '())
                 (/sub3_indent-save /sub3_indent))
             (set! /sub3_indent (+ /indent /open/l))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (cond ((< (@size (car /comps)) 2)
                               (@pph (car /comps) /sub3_indent /prec)
                               (set! /comps (cdr /comps)))
                              (#t
                               (set! //b (list-ref (car /comps) (+ 1 1)))
                               (set! //s (list-ref (car /comps) (+ 1 2)))
                               (set! /comps (cdr /comps))
                               (cond ((and (null? /comps)
                                           (= (@st //b) //t_/true))
                                      (cond ((and (= (@size //s) 1)
                                                  (= (@st (list-ref
                                                            //s
                                                            (+ 1 1)))
                                                     //t_/skip))
                                             #t)
                                            (#t
                                             (@pp_nl
                                               (let ((name /op1))
                                                 (if (vector? name)
                                                   (vector-ref name (- 3 1))
                                                   (list-ref name (- 3 1))))
                                               /sub_indent
                                               (let ((name /op2))
                                                 (if (vector? name)
                                                   (vector-ref name (- 3 1))
                                                   (list-ref name (- 3 1)))))
                                             (@pph //s /sub2_indent /prec))))
                                     (#t
                                      (@pph //b /sub3_indent /prec)
                                      (@pp_nl
                                        (let ((name /op1))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1))))
                                        /sub_indent
                                        (let ((name /op2))
                                          (if (vector? name)
                                            (vector-ref name (- 1 1))
                                            (list-ref name (- 1 1)))))
                                      (@pph //s /sub2_indent /prec)))))
                        (cond ((and (not (null? /comps))
                                    (or (not (null? (cdr /comps)))
                                        (< (@size (car /comps)) 2)
                                        (not (= (@st (list-ref
                                                       (car /comps)
                                                       (+ 1 1)))
                                                //t_/true))))
                               (@pp_nl
                                 (let ((name /op1))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1))))
                                 /indent
                                 (let ((name /op2))
                                   (if (vector? name)
                                     (vector-ref name (- 2 1))
                                     (list-ref name (- 2 1)))))
                               (set! /sub3_indent
                                 (+ /indent
                                    (string-length
                                      (let ((name /op2))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1))))))))))
                      (while-loop))
                     (#t #t)))
             (@pp_close
               (car (cdr (@pph_size //s /prec)))
               /prec
               /indent
               /sub2_indent
               /close)
             (set! /sub3_indent /sub3_indent-save)))
          ((= //s/t //t_/assignment)
           (cond ((= /size 1)
                  (@pph (list-ref //i (+ 1 1)) /indent /prec))
                 (#t
                  (@pph (@make //t_/assigns '() /comps)
                        /indent
                        /prec))))
          ((or (= //s/t //t_/aref)
               (= //s/t //t_/aref_/lvalue))
           (@pph (list-ref //i (+ 1 1)) /indent /prec)
           (@ps /open)
           (cond ((and (= (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))
                          1)
                       (<= (+ (let ((name (let ((name /sizes))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              /open/l)
                           (- /sub_indent /indent)))
                  (set! /sub_indent
                    (+ /indent
                       (let ((name (let ((name /sizes))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))))
                  (set! /sub2_indent
                    (+ /indent
                       (let ((name (let ((name /sizes))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       /open/l)))
                 (#t (@pl (list "" "")) (@pp_indent /sub2_indent)))
           (set! /comps (@cs (list-ref //i (+ 1 2))))
           (set! /last/l
             (car (cdr (@pph_size (last-1 /comps) /prec))))
           (let while-loop ()
             (cond ((not (null? /comps))
                    (begin
                      (@pph (car /comps) /sub2_indent /prec)
                      (set! /comps (cdr /comps))
                      (cond ((not (null? /comps))
                             (@pp_nl /op1 /sub_indent /op2))))
                    (while-loop))
                   (#t #t)))
           (@pp_close
             /last/l
             /prec
             /indent
             /sub2_indent
             /close))
          ((or (= //s/t //t_/struct)
               (= //s/t //t_/struct_/lvalue))
           (@pph (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (@pp_nl "" /sub_indent /op)
           (@ps (@h_value (list-ref //i (+ 1 1)))))
          ((= //s/t //t_/where)
           (@pl (@h_open /open))
           (@pp_indent /sub2_indent)
           (@pph (list-ref //i (+ 1 1)) /sub2_indent /prec)
           (@pl (list "" ""))
           (cond (#f
                  (@pl (list "" ""))
                  (@pp_indent /sub_indent)
                  (@pl (@h_op /op))
                  (@pp_indent /sub2_indent)))
           (@pph (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (@pl (list "" ""))
           (@pp_indent /sub_indent)
           (@ps (@h_close /close)))
          (#t
           (begin
             (display
               (string-append
                 (concat
                   (string-append
                     (string-append
                       "UNRECOGNISED TYPE 4: "
                       (@type_name (@st //i)))
                     "(")
                   (@st //i))
                 ")"))
             (newline)
             (force-output))))))

(define (@pp_n_lines //i /indent /parent_prec)
  (let ((/last/l 0))
    (set! /last/l (car (cdr (last-1 /sizes))))
    (cond ((= (@st //i) //t_/string)
           (@ps (concat
                  (concat /open (@fix_quotes (@value_string //i)))
                  /close)))
          ((equal? /type //type_/simple)
           (@ps (concat
                  (concat /open (@value_string //i))
                  /close)))
          ((equal? /type //type_/prefix)
           (cond ((@cs? (list-ref //i (+ 1 1)))
                  (@ps /op)
                  (@ps /open)
                  (@pp (list-ref //i (+ 1 1)) /sub2_indent /prec)
                  (@ps /close))
                 (#t
                  (@ps /op)
                  (@pp (list-ref //i (+ 1 1)) /sub2_indent /prec))))
          ((equal? /type //type_/infix)
           (let ((/new_prec /prec))
             (cond ((member //s/t //p/p_/non_/assoc_/ops)
                    (set! /new_prec (+ //p/p_/prec_/increment /prec))))
             (cond ((or (= /prec 0) (< /prec /parent_prec))
                    (@ps /open)
                    (cond ((and (= (let ((name (let ((name /sizes))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   1)
                                (<= (+ (let ((name (let ((name /sizes))
                                                     (if (vector? name)
                                                       (vector-ref name (- 1 1))
                                                       (list-ref
                                                         name
                                                         (- 1 1))))))
                                         (if (vector? name)
                                           (vector-ref name (- 2 1))
                                           (list-ref name (- 2 1))))
                                       /open/l)
                                    (- /sub_indent /indent)))
                           (@ps (@pp_1 (car /comps) /new_prec))
                           (@ps /op)
                           (set! /comps (cdr /comps)))))
                   (#t
                    (cond ((and (= (let ((name (let ((name /sizes))
                                                 (if (vector? name)
                                                   (vector-ref name (- 1 1))
                                                   (list-ref name (- 1 1))))))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   1)
                                (<= (let ((name (let ((name /sizes))
                                                  (if (vector? name)
                                                    (vector-ref name (- 1 1))
                                                    (list-ref name (- 1 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1))))
                                    (- /sub_indent /indent)))
                           (@ps (@pp_1 (car /comps) /new_prec))
                           (@ps /op)
                           (set! /comps (cdr /comps))))))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (@pp (car /comps) /sub2_indent /prec)
                        (set! /comps (cdr /comps))
                        (cond ((not (null? /comps))
                               (@pl /op1)
                               (@pp_indent /sub_indent)
                               (@ps /op2))))
                      (while-loop))
                     (#t #t)))
             (cond ((or (= /prec 0) (< /prec /parent_prec))
                    (@pp_close
                      /last/l
                      /prec
                      /indent
                      /sub2_indent
                      /close)))))
          ((equal? /type //type_/split)
           (let ((/chars1 0) (/i 0))
             (set! /chars1 (+ /open/l (@name_length //i)))
             (let ((var-save /i) (for-step 1) (for-end /split))
               (set! /i 1)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (begin
                          (cond ((> (let ((name (let ((name /sizes))
                                                  (if (vector? name)
                                                    (vector-ref name (- /i 1))
                                                    (list-ref name (- /i 1))))))
                                      (if (vector? name)
                                        (vector-ref name (- 1 1))
                                        (list-ref name (- 1 1))))
                                    1)
                                 (set! /chars1 (+ //text_/width 1))))
                          (set! /chars1
                            (+ /chars1
                               (string-length
                                 (let ((name /op))
                                   (if (vector? name)
                                     (vector-ref name (- /i 1))
                                     (list-ref name (- /i 1)))))
                               (let ((name (let ((name /sizes))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))))
                                 (if (vector? name)
                                   (vector-ref name (- 2 1))
                                   (list-ref name (- 2 1)))))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (cond ((<= /chars1 //text_/width)
                    (@ps /open)
                    (@ps (@name_value //i))
                    (let ((var-save /i) (for-step 1) (for-end /split))
                      (set! /i 1)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (@ps (concat
                                      (let ((name /op))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1))))
                                      (@pp_1 (let ((name /comps))
                                               (if (vector? name)
                                                 (vector-ref name (- /i 1))
                                                 (list-ref name (- /i 1))))
                                             /prec)))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))
                    (cond ((< /split /size)
                           (cond ((> /chars1 (- /sub_indent /indent))
                                  (@pl (let ((name /op1))
                                         (if (vector? name)
                                           (vector-ref name (- (+ /split 1) 1))
                                           (list-ref name (- (+ /split 1) 1)))))
                                  (@pp_indent /sub_indent)
                                  (@ps (let ((name /op2))
                                         (if (vector? name)
                                           (vector-ref name (- (+ /split 1) 1))
                                           (list-ref
                                             name
                                             (- (+ /split 1) 1))))))
                                 (#t
                                  (@ps (let ((name /op))
                                         (if (vector? name)
                                           (vector-ref name (- (+ /split 1) 1))
                                           (list-ref
                                             name
                                             (- (+ /split 1) 1))))))))))
                   (#t
                    (set! /chars1
                      (+ /open/l
                         (@name_length //i)
                         (string-length
                           (let ((name /op))
                             (if (vector? name)
                               (vector-ref name (- 1 1))
                               (list-ref name (- 1 1)))))))
                    (@ps /open)
                    (@ps (@name_value //i))
                    (cond ((<= /chars1 //big_/indent)
                           (set! /sub3_indent (+ /indent /chars1))
                           (@ps (let ((name /op))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1)))))
                           (cond ((> /split 0)
                                  (@pp (let ((name /comps))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))
                                       (+ /sub3_indent
                                          (string-length
                                            (let ((name /op))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                       /prec))))
                          (#t
                           (set! /sub3_indent /sub2_indent)
                           (@pl (let ((name /op1))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1)))))
                           (@pp_indent /sub3_indent)
                           (@ps (let ((name /op2))
                                  (if (vector? name)
                                    (vector-ref name (- 1 1))
                                    (list-ref name (- 1 1)))))
                           (cond ((> /split 0)
                                  (@pp (let ((name /comps))
                                         (if (vector? name)
                                           (vector-ref name (- 1 1))
                                           (list-ref name (- 1 1))))
                                       (+ /sub3_indent
                                          (string-length
                                            (let ((name /op2))
                                              (if (vector? name)
                                                (vector-ref name (- 1 1))
                                                (list-ref name (- 1 1))))))
                                       /prec)))))
                    (let ((var-save /i) (for-step 1) (for-end /split))
                      (set! /i 2)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (begin
                                 (@pl (let ((name /op1))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1)))))
                                 (@pp_indent /sub3_indent)
                                 (@ps (let ((name /op2))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1)))))
                                 (@pp (let ((name /comps))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1))))
                                      (+ /sub3_indent
                                         (string-length
                                           (let ((name /op2))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))))
                                      /prec))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))
                    (cond ((< /split /size)
                           (@pl (let ((name /op1))
                                  (if (vector? name)
                                    (vector-ref name (- (+ /split 1) 1))
                                    (list-ref name (- (+ /split 1) 1)))))
                           (@pp_indent /sub_indent)
                           (@ps (let ((name /op2))
                                  (if (vector? name)
                                    (vector-ref name (- (+ /split 1) 1))
                                    (list-ref name (- (+ /split 1) 1)))))))))
             (let ((var-save /i) (for-step 1) (for-end /size))
               (set! /i (+ /split 1))
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /i for-end))
                            (and (< 1 0) (>= /i for-end)))
                        (begin
                          (@pp (let ((name /comps))
                                 (if (vector? name)
                                   (vector-ref name (- /i 1))
                                   (list-ref name (- /i 1))))
                               /sub2_indent
                               /prec)
                          (cond ((< /i /size)
                                 (@pl (let ((name /op1))
                                        (if (vector? name)
                                          (vector-ref name (- (+ /i 1) 1))
                                          (list-ref name (- (+ /i 1) 1)))))
                                 (@pp_indent /sub_indent)
                                 (@ps (let ((name /op2))
                                        (if (vector? name)
                                          (vector-ref name (- (+ /i 1) 1))
                                          (list-ref name (- (+ /i 1) 1))))))))
                        (set! /i (+ /i for-step))
                        (for-loop))
                       (#t #t)))
               (set! /i var-save))
             (@pp_close
               /last/l
               /prec
               /indent
               /sub2_indent
               /close)))
          ((equal? /type //type_/ifmatch)
           (@ps /open)
           (@pp (list-ref //i (+ 1 1))
                (+ /indent /open/l)
                /prec)
           (@pl (let ((name /op1))
                  (if (vector? name)
                    (vector-ref name (- 1 1))
                    (list-ref name (- 1 1)))))
           (@pp_indent /sub_indent)
           (@ps (let ((name /op2))
                  (if (vector? name)
                    (vector-ref name (- 1 1))
                    (list-ref name (- 1 1)))))
           (@pp (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (cond ((and (= (@size (list-ref //i (+ 1 3))) 1)
                       (= (@st (list-ref //i (+ 1 3))) //t_/skip))
                  (set! /last/l
                    (let ((name (let ((name /sizes))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1))))))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1))))))
                 (#t
                  (@pl (let ((name /op1))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1)))))
                  (@pp_indent /sub_indent)
                  (@ps (let ((name /op2))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1)))))
                  (@pp (list-ref //i (+ 1 3)) /sub2_indent /prec)))
           (@pp_close
             /last/l
             /prec
             /indent
             /sub2_indent
             /close))
          ((= //s/t //t_/cond)
           (@ps /open)
           (let ((//b '())
                 (//s '())
                 (/sub3_indent-save /sub3_indent))
             (set! /sub3_indent (+ /indent /open/l))
             (let while-loop ()
               (cond ((not (null? /comps))
                      (begin
                        (cond ((< (@size (car /comps)) 2)
                               (@pp (car /comps) /sub3_indent /prec)
                               (set! /comps (cdr /comps)))
                              (#t
                               (set! //b (list-ref (car /comps) (+ 1 1)))
                               (set! //s (list-ref (car /comps) (+ 1 2)))
                               (set! /comps (cdr /comps))
                               (cond ((and (null? /comps)
                                           (= (@st //b) //t_/true))
                                      (cond ((and (= (@size //s) 1)
                                                  (= (@st (list-ref
                                                            //s
                                                            (+ 1 1)))
                                                     //t_/skip))
                                             #t)
                                            (#t
                                             (@pl (let ((name /op1))
                                                    (if (vector? name)
                                                      (vector-ref name (- 3 1))
                                                      (list-ref name (- 3 1)))))
                                             (@pp_indent /sub_indent)
                                             (@ps (let ((name /op2))
                                                    (if (vector? name)
                                                      (vector-ref name (- 3 1))
                                                      (list-ref name (- 3 1)))))
                                             (@pp //s /sub2_indent /prec))))
                                     (#t
                                      (@pp //b /sub3_indent /prec)
                                      (@pl (let ((name /op1))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1)))))
                                      (@pp_indent /sub_indent)
                                      (@ps (let ((name /op2))
                                             (if (vector? name)
                                               (vector-ref name (- 1 1))
                                               (list-ref name (- 1 1)))))
                                      (@pp //s /sub2_indent /prec)))))
                        (cond ((and (not (null? /comps))
                                    (or (not (null? (cdr /comps)))
                                        (< (@size (car /comps)) 2)
                                        (not (= (@st (list-ref
                                                       (car /comps)
                                                       (+ 1 1)))
                                                //t_/true))))
                               (@pl (let ((name /op1))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1)))))
                               (@pp_indent /indent)
                               (@ps (let ((name /op2))
                                      (if (vector? name)
                                        (vector-ref name (- 2 1))
                                        (list-ref name (- 2 1)))))
                               (set! /sub3_indent
                                 (+ /indent
                                    (string-length
                                      (let ((name /op2))
                                        (if (vector? name)
                                          (vector-ref name (- 2 1))
                                          (list-ref name (- 2 1))))))))))
                      (while-loop))
                     (#t #t)))
             (@pp_close
               (car (cdr (@pp_size //s /prec)))
               /prec
               /indent
               /sub2_indent
               /close)
             (set! /sub3_indent /sub3_indent-save)))
          ((= //s/t //t_/assignment)
           (cond ((= /size 1)
                  (@pp (list-ref //i (+ 1 1)) /indent /prec))
                 (#t
                  (@pp (@make //t_/assigns '() /comps)
                       /indent
                       /prec))))
          ((or (= //s/t //t_/aref)
               (= //s/t //t_/aref_/lvalue))
           (@pp (list-ref //i (+ 1 1)) /indent /prec)
           (@ps /open)
           (cond ((and (= (let ((name (let ((name /sizes))
                                        (if (vector? name)
                                          (vector-ref name (- 1 1))
                                          (list-ref name (- 1 1))))))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))
                          1)
                       (<= (+ (let ((name (let ((name /sizes))
                                            (if (vector? name)
                                              (vector-ref name (- 1 1))
                                              (list-ref name (- 1 1))))))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              /open/l)
                           (- /sub_indent /indent)))
                  (set! /sub_indent
                    (+ /indent
                       (let ((name (let ((name /sizes))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))))
                  (set! /sub2_indent
                    (+ /indent
                       (let ((name (let ((name /sizes))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       /open/l)))
                 (#t (@pl "") (@pp_indent /sub2_indent)))
           (set! /comps (@cs (list-ref //i (+ 1 2))))
           (set! /last/l
             (car (cdr (@pp_size (last-1 /comps) /prec))))
           (let while-loop ()
             (cond ((not (null? /comps))
                    (begin
                      (@pp (car /comps) /sub2_indent /prec)
                      (set! /comps (cdr /comps))
                      (cond ((not (null? /comps))
                             (@pl /op1)
                             (@pp_indent /sub_indent)
                             (@ps /op2))))
                    (while-loop))
                   (#t #t)))
           (@pp_close
             /last/l
             /prec
             /indent
             /sub2_indent
             /close))
          ((or (= //s/t //t_/struct)
               (= //s/t //t_/struct_/lvalue))
           (@pp (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (@pl "")
           (@pp_indent /sub_indent)
           (@ps (concat
                  /op
                  (@n_string (@v (list-ref //i (+ 1 1)))))))
          ((= //s/t //t_/where)
           (@pl /open)
           (@pp_indent /sub2_indent)
           (@pp (list-ref //i (+ 1 1)) /sub2_indent /prec)
           (@pl "")
           (@pp_indent /sub_indent)
           (@pl /op)
           (@pp_indent /sub2_indent)
           (@pp (list-ref //i (+ 1 2)) /sub2_indent /prec)
           (@pl "")
           (@pp_indent /sub_indent)
           (@ps /close))
          (#t
           (begin
             (display
               (string-append
                 (concat
                   (string-append
                     (string-append
                       "UNRECOGNISED TYPE 4: "
                       (@type_name (@st //i)))
                     "(")
                   (@st //i))
                 ")"))
             (newline)
             (force-output))))))

(define (@pp_close
         /chars
         /prec-par
         /indent
         /sub_indent-par
         /closing)
  (let ((/sub_indent-save /sub_indent)
        (/prec-save /prec))
    (set! /sub_indent /sub_indent-par)
    (set! /prec /prec-par)
    (let ((/len (string-length /closing)))
      (cond ((and (= //h/t/m/l 1)
                  (or (equal? /closing " FI")
                      (equal? /closing " OD")
                      (equal? /closing " END")))
             (@pl (list "" ""))
             (@pp_indent /indent)
             (@ps (@h_close
                    (let ((s /closing))
                      (substring s 1 (string-length s))))))
            ((or (<= /len 1)
                 (and (<= (+ (- /sub_indent /indent) /chars /len)
                          //text_/width)
                      (equal? //margin_/link "")))
             (@ps (@h_close /closing)))
            (#t
             (set! //in_/details 0)
             (@pl (list "" ""))
             (@pp_indent /indent)
             (cond ((and (> /len 0)
                         (equal?
                           (let ((f 0)) (substring /closing f (+ f 1)))
                           " "))
                    (@ps (@h_close
                           (let ((s /closing))
                             (substring s 1 (string-length s))))))
                   (#t (@ps (@h_close /closing)))))))
    (set! /sub_indent /sub_indent-save)
    (set! /prec /prec-save)))

(define (@pp_indent /indent)
  (cond ((= //h/t/m/l 0)
         (@ps (let ((f 0))
                (substring
                  //spaces
                  f
                  (+ f (modulo /indent //max_/indent))))))
        (#t
         (set! /col_no (+ /col_no /indent))
         (cond ((and (not (equal? //margin_/link ""))
                     (= //in_/details 0)
                     (= //printing 1))
                (@ph //margin_/link)
                (set! //margin_/link ""))
               (#t (@ph /nbsp))
               (#t
                (@ph (string-append
                       (string-append
                         "<span style="
                         (@qq "color: white"))
                       ">&#8594;</span>"))))
         (let ((var-save /i) (for-step 1) (for-end /indent))
           (set! /i 1)
           (let for-loop ()
             (cond ((or (and (> 1 0) (<= /i for-end))
                        (and (< 1 0) (>= /i for-end)))
                    (@ph /nbsp)
                    (set! /i (+ /i for-step))
                    (for-loop))
                   (#t #t)))
           (set! /i var-save)))))

(define (@h_fermat? //i)
  (and (= (@st //i) //t_/comment)
       (> (string-length (@v //i)) 17)
       (equal?
         (let ((f 0)) (substring (@v //i) f (+ f 9)))
         "<FermaT> ")))

(define (@pph_comments
         /op1-par
         /sub_indent-par
         /op2-par
         /comps-par)
  (let ((/comps-save /comps)
        (/op2-save /op2)
        (/sub_indent-save /sub_indent)
        (/op1-save /op1)
        (funct-result '()))
    (set! /comps /comps-par)
    (set! /op2 /op2-par)
    (set! /sub_indent /sub_indent-par)
    (set! /op1 /op1-par)
    (let ((/n 0) (/comments '()) (/indent_str ""))
      (let while-loop ()
        (cond ((and (not (null? /comps))
                    (= (@st (car /comps)) //t_/comment))
               (begin
                 (cond ((@h_fermat? (car /comps))
                        (@pph_comment (car /comps)))
                       (#t
                        (set! /comments (cons (car /comps) /comments))))
                 (set! /comps (cdr /comps)))
               (while-loop))
              (#t #t)))
      (set! /n
        (if (vector? /comments)
          (vector-length /comments)
          (length /comments)))
      (cond ((= /n 0))
            (#t
             (set! //in_/details 1)
             (cond ((>= /n //p/p_/hide_/comments)
                    (set! //in_/details 1)
                    (set! /indent_str "")
                    (let ((var-save /i)
                          (for-step 1)
                          (for-end (- /sub_indent 1)))
                      (set! /i 1)
                      (let for-loop ()
                        (cond ((or (and (> 1 0) (<= /i for-end))
                                   (and (< 1 0) (>= /i for-end)))
                               (set! /indent_str (concat /indent_str /nbsp))
                               (set! /i (+ /i for-step))
                               (for-loop))
                              (#t #t)))
                      (set! /i var-save))
                    (@ph (string-append
                           (string-append
                             (concat
                               (string-append
                                 (string-append
                                   "<BR><DETAILS class='CO'><SUMMARY>"
                                   /indent_str)
                                 "===== ")
                               (@string /n))
                             " Comments hidden (click to expand)")
                           " =====</SUMMARY>"))
                    (@pp_indent /sub_indent)
                    (@ps (@h_op /op2))))
             (set! /comments (reverse /comments))
             (let while-loop ()
               (cond ((not (null? /comments))
                      (begin
                        (@pph_comment (car /comments))
                        (set! /comments (cdr /comments))
                        (cond ((not (null? /comments))
                               (@pp_nl /op1 /sub_indent /op2))))
                      (while-loop))
                     (#t #t)))
             (cond ((and (>= /n //p/p_/hide_/comments)
                         (not (null? /comps)))
                    (@pl (@h_op /op1))
                    (@ph "</DETAILS>")
                    (set! //in_/details 0)
                    (set! //in_/comment 0)
                    (@pp_indent /sub_indent)
                    (@ps (@h_op /op2)))
                   ((and (>= /n //p/p_/hide_/comments)
                         (null? /comps))
                    (@ph "</DETAILS>")
                    (set! //in_/details 0)
                    (set! //in_/comment 0)
                    (cond ((= //printing 1) (set! //skip_/newline 1))))
                   ((not (null? /comps))
                    (set! //in_/details 0)
                    (@pp_nl /op1 /sub_indent /op2))
                   (#t (set! //in_/details 0))))))
    (set! funct-result /comps)
    (set! /comps /comps-save)
    (set! /op2 /op2-save)
    (set! /sub_indent /sub_indent-save)
    (set! /op1 /op1-save)
    funct-result))

(define (@h_count_comments /comps-par)
  (let ((/comps-save /comps) (/n 0) (funct-result '()))
    (set! /comps /comps-par)
    (let while-loop ()
      (cond ((and (not (null? /comps))
                  (= (@st (car /comps)) //t_/comment))
             (begin
               (cond ((not (@h_fermat? (car /comps)))
                      (set! /n (+ /n 1))))
               (set! /comps (cdr /comps)))
             (while-loop))
            (#t #t)))
    (set! funct-result /n)
    (set! /comps /comps-save)
    funct-result))

(define (@pph_join /comps-par /op-par /prec-par)
  (let ((/prec-save /prec)
        (/op-save /op)
        (/comps-save /comps)
        (//r (list "" ""))
        (funct-result '()))
    (set! /prec /prec-par)
    (set! /op /op-par)
    (set! /comps /comps-par)
    (let while-loop ()
      (cond ((not (null? /comps))
             (begin
               (set! //r
                 (@pairs (list //r (@pph_1 (car /comps) /prec))))
               (set! /comps (cdr /comps))
               (cond ((not (null? /comps))
                      (set! //r (@pairs (list //r (@h_op /op)))))))
             (while-loop))
            (#t #t)))
    (set! funct-result //r)
    (set! /prec /prec-save)
    (set! /op /op-save)
    (set! /comps /comps-save)
    funct-result))

(define (@pph_tpf //i /indent /prec-par)
  (let ((/prec-save /prec))
    (set! /prec /prec-par)
    (let ((/open-save /open) (/close-save /close))
      (set! /open "<SPAN class='TPF'>")
      (set! /close "</SPAN>")
      (@ph /open)
      (@ps (@html (@n_string (@v (list-ref //i (+ 1 1))))))
      (cond ((and (equal?
                    (@v (list-ref //i (+ 1 1)))
                    (@make_name "SENDA"))
                  (> (@size (list-ref //i (+ 1 2))) 0)
                  (= (@st (list-ref (list-ref //i (+ 1 2)) (+ 1 1)))
                     //t_/string)
                  (@starts_with?
                    (@v (list-ref (list-ref //i (+ 1 2)) (+ 1 1)))
                    "MSG='"))
             (@ps (string-append
                    " "
                    (let ((s (@v (list-ref (list-ref //i (+ 1 2)) (+ 1 1)))))
                      (substring s 4 (string-length s))))))
            ((>= (@size (list-ref //i (+ 1 2))) 1)
             (@ps " ")
             (@ps (@html (@pp_1 (list-ref (list-ref //i (+ 1 2)) (+ 1 1))
                                /prec)))))
      (@ph /close)
      (let ((var-save /comp)
            (seq-save (@cs (list-ref //i (+ 1 2)))))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /comp (car for-tmp))
                 (begin
                   (cond ((and (= (@st /comp) //t_/string)
                               (@starts_with? (@v /comp) "CALL={"))
                          (@pl (list "" ""))
                          (@pp_indent /indent)
                          (@ph /open)
                          (@ph (@html (let ((s (@v /comp)))
                                        (substring s 5 (string-length s)))))
                          (@ph /close)))
                   (cond ((and (= (@st /comp) //t_/string)
                               (@starts_with? (@v /comp) "DESC={"))
                          (@pl (list "" ""))
                          (@pp_indent /indent)
                          (@ph /open)
                          (@ph (@html (let ((s (@v /comp)))
                                        (substring s 5 (string-length s)))))
                          (@ph /close))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /comp var-save))
      (set! /open /open-save)
      (set! /close /close-save))
    (set! /prec /prec-save)))

(define (@pp_join /comps-par /op-par /prec-par)
  (let ((/prec-save /prec)
        (/op-save /op)
        (/comps-save /comps)
        (//r "")
        (funct-result '()))
    (set! /prec /prec-par)
    (set! /op /op-par)
    (set! /comps /comps-par)
    (let while-loop ()
      (cond ((not (null? /comps))
             (begin
               (set! //r
                 (concat //r (@pp_1 (car /comps) /prec)))
               (set! /comps (cdr /comps))
               (cond ((not (null? /comps))
                      (set! //r (concat //r /op)))))
             (while-loop))
            (#t #t)))
    (set! funct-result //r)
    (set! /prec /prec-save)
    (set! /op /op-save)
    (set! /comps /comps-save)
    funct-result))

(define (@split_preprocess
         //s/t-par
         /op-par
         /op1-par
         /op2-par
         /split-par
         /comps-par
         /size-par
         /close-par)
  (let ((/close-save /close)
        (/size-save /size)
        (/comps-save /comps)
        (/split-save /split)
        (/op2-save /op2)
        (/op1-save /op1)
        (/op-save /op)
        (//s/t-save //s/t)
        (funct-result '()))
    (set! /close /close-par)
    (set! /size /size-par)
    (set! /comps /comps-par)
    (set! /split /split-par)
    (set! /op2 /op2-par)
    (set! /op1 /op1-par)
    (set! /op /op-par)
    (set! //s/t //s/t-par)
    (let ((/i 0) (/n 0))
      (cond ((or (= (@st (car /comps)) //t_/name)
                 (= (@st (car /comps)) //t_/name_/pat_/one)
                 (= (@st (car /comps)) //t_/name_/int_/one)
                 (= (@st (car /comps)) //t_/name_/var_/one))
             (set! /comps (cdr /comps))
             (set! /size (- /size 1))))
      (let ((var-save /i)
            (for-step 1)
            (for-end
              (if (vector? /comps)
                (vector-length /comps)
                (length /comps))))
        (set! /i 2)
        (let for-loop ()
          (cond ((or (and (> 1 0) (<= /i for-end))
                     (and (< 1 0) (>= /i for-end)))
                 (cond ((and (= (@st (let ((name /comps))
                                       (if (vector? name)
                                         (vector-ref name (- /i 1))
                                         (list-ref name (- /i 1)))))
                                //t_/lvalues)
                             (= (@size (let ((name /comps))
                                         (if (vector? name)
                                           (vector-ref name (- /i 1))
                                           (list-ref name (- /i 1)))))
                                0))
                        (set! /n /i)))
                 (set! /i (+ /i for-step))
                 (for-loop))
                (#t #t)))
        (set! /i var-save))
      (cond ((> /n 0)
             (set! /op
               (concat
                 (@sub_seg /op 1 (- /n 1))
                 (@final_seg /op (+ /n 1))))
             (set! /op1
               (concat
                 (@sub_seg /op1 1 (- /n 1))
                 (@final_seg /op1 (+ /n 1))))
             (set! /op2
               (concat
                 (@sub_seg /op2 1 (- /n 1))
                 (@final_seg /op2 (+ /n 1))))
             (set! /comps
               (concat
                 (@sub_seg /comps 1 (- /n 1))
                 (@final_seg /comps (+ /n 1))))
             (set! /size (- /size 1))
             (cond ((<= /n /split) (set! /split (- /split 1))))))
      (cond ((and (member //s/t //p/p_/no_/parentheses)
                  (= /size 1)
                  (= (@size (car /comps)) 0))
             (if (vector? /op)
               (vector-set! /op (- 1 1) "")
               (set! /op (replace-nth /op 1 "")))
             (if (vector? /op1)
               (vector-set! /op1 (- 1 1) "")
               (set! /op1 (replace-nth /op1 1 "")))
             (if (vector? /op2)
               (vector-set! /op2 (- 1 1) "")
               (set! /op2 (replace-nth /op2 1 "")))
             (set! /close ""))))
    (set! funct-result
      (list /op /op1 /op2 /split /comps /size /close))
    (set! /close /close-save)
    (set! /size /size-save)
    (set! /comps /comps-save)
    (set! /split /split-save)
    (set! /op2 /op2-save)
    (set! /op1 /op1-save)
    (set! /op /op-save)
    (set! //s/t //s/t-save)
    funct-result))

(let ((/type-save /type))
  (set! /type 0)
  (set! //spaces
    "                                                             ")
  (set! //spaces
    (concat
      (concat (concat //spaces //spaces) //spaces)
      //spaces))
  (set! //type_/special 0)
  (set! //type_/simple 1)
  (set! //type_/prefix 2)
  (set! //type_/infix 3)
  (set! //type_/split 4)
  (set! //type_/ifmatch 5)
  (set! //p/p_/type (make-vector 1999 0))
  (set! //p/p_/opening (make-vector 1999 ""))
  (set! //p/p_/indent (make-vector 1999 2))
  (set! //p/p_/sub_/indent (make-vector 1999 2))
  (set! //p/p_/split (make-vector 1999 0))
  (set! //p/p_/operator (make-vector 1999 ""))
  (set! //p/p_/operator1 (make-vector 1999 ""))
  (set! //p/p_/operator2 (make-vector 1999 ""))
  (set! //p/p_/closing (make-vector 1999 ""))
  (set! //p/p_/prec (make-vector 1999 0))
  (vector-set!
    //p/p_/type
    (- //t_/statements 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/statements 1)
    "; ")
  (vector-set!
    //p/p_/operator1
    (- //t_/statements 1)
    ";")
  (vector-set!
    //p/p_/indent
    (- //t_/statements 1)
    0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/statements 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/expressions 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/expressions 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/expressions 1)
    ",")
  (vector-set!
    //p/p_/indent
    (- //t_/expressions 1)
    0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/expressions 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/lvalues 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/lvalues 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/lvalues 1)
    ",")
  (vector-set!
    //p/p_/type
    (- //t_/assigns 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/assigns 1)
    "< ")
  (vector-set!
    //p/p_/operator
    (- //t_/assigns 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/assigns 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/assigns 1)
    " >")
  (vector-set!
    //p/p_/type
    (- //t_/definitions 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/definitions 1)
    " ")
  (vector-set!
    //p/p_/operator1
    (- //t_/definitions 1)
    "")
  (vector-set!
    //p/p_/indent
    (- //t_/definitions 1)
    0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/definitions 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/assign 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/assign 1)
    " := ")
  (vector-set!
    //p/p_/operator1
    (- //t_/assign 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/assign 1)
    ":= ")
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/assign 1)
    5)
  (vector-set!
    //p/p_/type
    (- //t_/guarded 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/guarded 1)
    "  ->  ")
  (vector-set!
    //p/p_/operator2
    (- //t_/guarded 1)
    "  -> ")
  (@pp_simple //t_/abort "ABORT" "")
  (@pp_simple //t_/skip "SKIP" "")
  (@pp_simple //t_/true "TRUE" "")
  (@pp_simple //t_/false "FALSE" "")
  (@pp_simple //t_/hash_/table "HASH_TABLE" "")
  (@pp_simple //t_/expn_/place "$Expn$" "")
  (@pp_simple //t_/var_/place "$Var$" "")
  (@pp_simple //t_/cond_/place "$Condition$" "")
  (@pp_simple //t_/stat_/place "$Statement$" "")
  (@pp_simple //t_/expn_/pseudo "" "")
  (@pp_simple //t_/lvalue_/pseudo "" "")
  (@pp_simple //t_/stat_/pseudo "" "")
  (@pp_simple //t_/cond_/pseudo "" "")
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/pat_/one
                //t_/expn_/pat_/one
                //t_/cond_/pat_/one
                //t_/defn_/pat_/one
                //t_/lvalue_/pat_/one
                //t_/assign_/pat_/one
                //t_/guarded_/pat_/one
                //t_/action_/pat_/one
                //t_/name_/pat_/one)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/simple)
               (vector-set! //p/p_/opening (- /type 1) "~?"))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/pat_/many
                //t_/expn_/pat_/many
                //t_/cond_/pat_/many
                //t_/defn_/pat_/many
                //t_/lvalue_/pat_/many
                //t_/assign_/pat_/many
                //t_/guarded_/pat_/many
                //t_/action_/pat_/many)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/simple)
               (vector-set! //p/p_/opening (- /type 1) "~+"))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/pat_/any
                //t_/expn_/pat_/any
                //t_/cond_/pat_/any
                //t_/defn_/pat_/any
                //t_/lvalue_/pat_/any
                //t_/assign_/pat_/any
                //t_/guarded_/pat_/any
                //t_/action_/pat_/any)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/simple)
               (vector-set! //p/p_/opening (- /type 1) "~*"))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/var_/one
                //t_/expn_/var_/one
                //t_/cond_/var_/one
                //t_/defn_/var_/one
                //t_/lvalue_/var_/one
                //t_/assign_/var_/one
                //t_/guarded_/var_/one
                //t_/action_/var_/one
                //t_/name_/var_/one)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/simple)
               (vector-set! //p/p_/opening (- /type 1) "~?="))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/var_/any
                //t_/expn_/var_/any
                //t_/cond_/var_/any
                //t_/defn_/var_/any
                //t_/lvalue_/var_/any
                //t_/assign_/var_/any
                //t_/guarded_/var_/any
                //t_/action_/var_/any)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/simple)
               (vector-set! //p/p_/opening (- /type 1) "~*="))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/int_/one
                //t_/expn_/int_/one
                //t_/cond_/int_/one
                //t_/defn_/int_/one
                //t_/lvalue_/int_/one
                //t_/assign_/int_/one
                //t_/guarded_/int_/one
                //t_/action_/int_/one
                //t_/name_/int_/one)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (@pp_funct /type "~?")
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (let ((var-save /type)
        (seq-save
          (list //t_/stat_/int_/any
                //t_/expn_/int_/any
                //t_/cond_/int_/any
                //t_/defn_/int_/any
                //t_/lvalue_/int_/any
                //t_/assign_/int_/any
                //t_/guarded_/int_/any
                //t_/action_/int_/any)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (@pp_funct /type "~*")
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (@pp_call //t_/print "PRINT" "" 0)
  (@pp_call //t_/prinflush "PRINFLUSH" "" 0)
  (@pp_call //t_/error "ERROR" "" 0)
  (@pp_call //t_/a_/proc_/call "!P " "" 1)
  (@pp_call //t_/proc_/call "" "" 1)
  (@pp_call //t_/m/w_/proc_/call "" "" 1)
  (@pp_call //t_/x_/proc_/call "!XP " "" 0)
  (@pp_call //t_/x_/funct_/call "!XF " "" 0)
  (@pp_call //t_/m/w_/funct_/call "" "" 0)
  (@pp_call //t_/funct_/call "" "" 0)
  (@pp_call //t_/x_/b/funct_/call "!XC " "" 0)
  (@pp_call //t_/m/w_/b/funct_/call "" "" 0)
  (@pp_call //t_/b/funct_/call "" "" 0)
  (vector-set!
    //p/p_/type
    (- //t_/assert 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/assert 1)
    "{")
  (vector-set!
    //p/p_/closing
    (- //t_/assert 1)
    "}")
  (vector-set! //p/p_/indent (- //t_/assert 1) 1)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/assert 1)
    1)
  (vector-set!
    //p/p_/type
    (- //t_/assignment 1)
    //type_/special)
  (vector-set!
    //p/p_/type
    (- //t_/a_/s 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/a_/s 1) 0)
  (vector-set!
    //p/p_/opening
    (- //t_/a_/s 1)
    "ACTIONS ")
  (vector-set!
    //p/p_/operator
    (- //t_/a_/s 1)
    (list ": "))
  (vector-set!
    //p/p_/operator1
    (- //t_/a_/s 1)
    (list ":"))
  (vector-set!
    //p/p_/operator2
    (- //t_/a_/s 1)
    (list ""))
  (vector-set!
    //p/p_/closing
    (- //t_/a_/s 1)
    " ENDACTIONS")
  (vector-set!
    //p/p_/type
    (- //t_/actions 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/actions 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/actions 1)
    " ")
  (vector-set! //p/p_/indent (- //t_/actions 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/actions 1)
    0)
  (vector-set!
    //p/p_/closing
    (- //t_/actions 1)
    "")
  (vector-set!
    //p/p_/type
    (- //t_/action 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/action 1) 0)
  (vector-set!
    //p/p_/operator
    (- //t_/action 1)
    (list " == "))
  (vector-set!
    //p/p_/operator1
    (- //t_/action 1)
    (list " =="))
  (vector-set!
    //p/p_/operator2
    (- //t_/action 1)
    (list ""))
  (vector-set!
    //p/p_/closing
    (- //t_/action 1)
    " END")
  (vector-set!
    //p/p_/type
    (- //t_/map 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/map 1) 0)
  (vector-set!
    //p/p_/opening
    (- //t_/map 1)
    (string-append "MAP(" //quote))
  (vector-set!
    //p/p_/operator
    (- //t_/map 1)
    (list (string-append //quote ", ")))
  (vector-set!
    //p/p_/operator1
    (- //t_/map 1)
    (list (string-append //quote ",")))
  (vector-set!
    //p/p_/operator2
    (- //t_/map 1)
    (list ""))
  (vector-set! //p/p_/closing (- //t_/map 1) ")")
  (vector-set!
    //p/p_/type
    (- //t_/reduce 1)
    //type_/split)
  (vector-set!
    //p/p_/opening
    (- //t_/reduce 1)
    (string-append "REDUCE(" //quote))
  (vector-set! //p/p_/split (- //t_/reduce 1) 0)
  (vector-set!
    //p/p_/operator
    (- //t_/reduce 1)
    (list (string-append //quote ", ")))
  (vector-set!
    //p/p_/operator1
    (- //t_/reduce 1)
    (list (string-append //quote ",")))
  (vector-set!
    //p/p_/operator2
    (- //t_/reduce 1)
    (list ""))
  (vector-set!
    //p/p_/closing
    (- //t_/reduce 1)
    ")")
  (vector-set!
    //p/p_/type
    (- //t_/maphash 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/maphash 1) 0)
  (vector-set!
    //p/p_/opening
    (- //t_/maphash 1)
    (string-append "MAPHASH(" //quote))
  (vector-set!
    //p/p_/operator
    (- //t_/maphash 1)
    (list (string-append //quote ", ")))
  (vector-set!
    //p/p_/operator1
    (- //t_/maphash 1)
    (list (string-append //quote ",")))
  (vector-set!
    //p/p_/operator2
    (- //t_/maphash 1)
    (list ""))
  (vector-set!
    //p/p_/closing
    (- //t_/maphash 1)
    ")")
  (vector-set!
    //p/p_/type
    (- //t_/puthash 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/puthash 1) 2)
  (vector-set!
    //p/p_/opening
    (- //t_/puthash 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/puthash 1)
    (list "" ".(" ") := "))
  (vector-set!
    //p/p_/operator1
    (- //t_/puthash 1)
    (list "" ".(" ")"))
  (vector-set!
    //p/p_/operator2
    (- //t_/puthash 1)
    (list "" "" ":= "))
  (vector-set!
    //p/p_/closing
    (- //t_/puthash 1)
    "")
  (@pp_simple //t_/call "CALL " "")
  (@pp_simple
    //t_/comment
    (string-append "C:" //quote)
    //quote)
  (vector-set!
    //p/p_/type
    (- //t_/cond 1)
    //type_/special)
  (vector-set!
    //p/p_/opening
    (- //t_/cond 1)
    "IF ")
  (vector-set!
    //p/p_/operator
    (- //t_/cond 1)
    (list " THEN " " ELSIF " " ELSE "))
  (vector-set!
    //p/p_/operator1
    (- //t_/cond 1)
    (list "" "" ""))
  (vector-set!
    //p/p_/operator2
    (- //t_/cond 1)
    (list "THEN " "ELSIF " "ELSE "))
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/cond 1)
    7)
  (vector-set!
    //p/p_/closing
    (- //t_/cond 1)
    " FI")
  (vector-set!
    //p/p_/type
    (- //t_/d_/if 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/d_/if 1)
    "D_IF ")
  (vector-set!
    //p/p_/operator
    (- //t_/d_/if 1)
    " [] ")
  (vector-set!
    //p/p_/operator2
    (- //t_/d_/if 1)
    "[] ")
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/d_/if 1)
    5)
  (vector-set!
    //p/p_/closing
    (- //t_/d_/if 1)
    " FI")
  (vector-set!
    //p/p_/type
    (- //t_/d_/do 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/d_/do 1)
    "D_DO ")
  (vector-set!
    //p/p_/operator
    (- //t_/d_/do 1)
    " [] ")
  (vector-set!
    //p/p_/operator2
    (- //t_/d_/do 1)
    "[] ")
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/d_/do 1)
    5)
  (vector-set!
    //p/p_/closing
    (- //t_/d_/do 1)
    " OD")
  (@pp_simple //t_/exit "EXIT(" ")")
  (vector-set!
    //p/p_/type
    (- //t_/for 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/for 1) 4)
  (vector-set!
    //p/p_/opening
    (- //t_/for 1)
    "FOR ")
  (vector-set!
    //p/p_/operator
    (- //t_/for 1)
    (list "" " := " " TO " " STEP " " DO "))
  (vector-set!
    //p/p_/operator1
    (- //t_/for 1)
    (list "" " := " "" "" " DO"))
  (vector-set!
    //p/p_/operator2
    (- //t_/for 1)
    (list "" "" "TO " "STEP " ""))
  (vector-set! //p/p_/closing (- //t_/for 1) " OD")
  (vector-set!
    //p/p_/type
    (- //t_/for_/in 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/for_/in 1) 2)
  (vector-set!
    //p/p_/opening
    (- //t_/for_/in 1)
    "FOR ")
  (vector-set!
    //p/p_/operator
    (- //t_/for_/in 1)
    (list "" " IN " " DO "))
  (vector-set!
    //p/p_/operator1
    (- //t_/for_/in 1)
    (list "" " IN " " DO"))
  (vector-set!
    //p/p_/operator2
    (- //t_/for_/in 1)
    (list "" "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/for_/in 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/stat 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/stat 1)
    "FOREACH Statement DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/stat 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/n/a/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/n/a/s 1)
    "FOREACH NAS DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/n/a/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/stats 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/stats 1)
    "FOREACH Statements DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/stats 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/t/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/t/s 1)
    "FOREACH Terminal Statement DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/t/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/t/ss 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/t/ss 1)
    "FOREACH Terminal Statements DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/t/ss 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/s/t/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/s/t/s 1)
    "FOREACH STS DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/s/t/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/cond 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/cond 1)
    "FOREACH Condition DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/cond 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/expn 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/expn 1)
    "FOREACH Expression DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/expn 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/lvalue 1)
    "FOREACH Lvalue DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/lvalue 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/variable 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/variable 1)
    "FOREACH Variable DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/variable 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/foreach_/global_/var 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/foreach_/global_/var 1)
    "FOREACH Global Variable DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/foreach_/global_/var 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/stat 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/stat 1)
    "ATEACH Statement DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/stat 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/n/a/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/n/a/s 1)
    "ATEACH NAS DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/n/a/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/stats 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/stats 1)
    "ATEACH Statements DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/stats 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/t/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/t/s 1)
    "ATEACH Terminal Statement DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/t/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/t/ss 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/t/ss 1)
    "ATEACH Terminal Statements DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/t/ss 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/s/t/s 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/s/t/s 1)
    "ATEACH STS DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/s/t/s 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/cond 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/cond 1)
    "ATEACH Condition DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/cond 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/expn 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/expn 1)
    "ATEACH Expression DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/expn 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/lvalue 1)
    "ATEACH Lvalue DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/lvalue 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/variable 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/variable 1)
    "ATEACH Variable DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/variable 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/ateach_/global_/var 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/ateach_/global_/var 1)
    "ATEACH Global Variable DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/ateach_/global_/var 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/floop 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/floop 1)
    "DO ")
  (vector-set!
    //p/p_/closing
    (- //t_/floop 1)
    " OD")
  (vector-set! //p/p_/indent (- //t_/floop 1) 3)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/floop 1)
    3)
  (vector-set!
    //p/p_/type
    (- //t_/join 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/join 1)
    "JOIN ")
  (vector-set!
    //p/p_/operator
    (- //t_/join 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/join 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/join 1)
    " ENDJOIN")
  (@pp_funct //t_/pop "POP")
  (@pp_funct //t_/push "PUSH")
  (vector-set!
    //p/p_/type
    (- //t_/where 1)
    //type_/special)
  (vector-set!
    //p/p_/opening
    (- //t_/where 1)
    "BEGIN")
  (vector-set!
    //p/p_/operator
    (- //t_/where 1)
    "WHERE")
  (vector-set!
    //p/p_/operator1
    (- //t_/where 1)
    "WHERE")
  (vector-set!
    //p/p_/closing
    (- //t_/where 1)
    "END")
  (vector-set! //p/p_/indent (- //t_/where 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/where 1)
    2)
  (vector-set!
    //p/p_/type
    (- //t_/var 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/var 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/var 1)
    "VAR ")
  (vector-set!
    //p/p_/operator
    (- //t_/var 1)
    (list "" ": "))
  (vector-set!
    //p/p_/operator1
    (- //t_/var 1)
    (list "" ":"))
  (vector-set!
    //p/p_/operator2
    (- //t_/var 1)
    (list "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/var 1)
    " ENDVAR")
  (vector-set! //p/p_/indent (- //t_/var 1) 0)
  (vector-set! //p/p_/sub_/indent (- //t_/var 1) 0)
  (vector-set!
    //p/p_/type
    (- //t_/while 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/while 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/while 1)
    "WHILE ")
  (vector-set!
    //p/p_/operator
    (- //t_/while 1)
    (list "" " DO "))
  (vector-set!
    //p/p_/operator1
    (- //t_/while 1)
    (list "" " DO"))
  (vector-set!
    //p/p_/operator2
    (- //t_/while 1)
    (list "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/while 1)
    " OD")
  (vector-set!
    //p/p_/type
    (- //t_/spec 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/spec 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/spec 1)
    "SPEC <")
  (vector-set!
    //p/p_/operator
    (- //t_/spec 1)
    (list "" ">: "))
  (vector-set!
    //p/p_/operator1
    (- //t_/spec 1)
    (list "" ">:"))
  (vector-set!
    //p/p_/operator2
    (- //t_/spec 1)
    (list "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/spec 1)
    " ENDSPEC")
  (vector-set! //p/p_/indent (- //t_/spec 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/spec 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/forall 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/forall 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/forall 1)
    "FORALL <")
  (vector-set!
    //p/p_/operator
    (- //t_/forall 1)
    (list "" ">: "))
  (vector-set!
    //p/p_/operator1
    (- //t_/forall 1)
    (list "" ">:"))
  (vector-set!
    //p/p_/operator2
    (- //t_/forall 1)
    (list "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/forall 1)
    " END")
  (vector-set! //p/p_/indent (- //t_/forall 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/forall 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/exists 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/exists 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/exists 1)
    "EXISTS <")
  (vector-set!
    //p/p_/operator
    (- //t_/exists 1)
    (list "" ">: "))
  (vector-set!
    //p/p_/operator1
    (- //t_/exists 1)
    (list "" ">:"))
  (vector-set!
    //p/p_/operator2
    (- //t_/exists 1)
    (list "" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/exists 1)
    " END")
  (vector-set! //p/p_/indent (- //t_/exists 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/exists 1)
    0)
  (vector-set!
    //p/p_/type
    (- //t_/m/w_/proc 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/m/w_/proc 1) 2)
  (vector-set!
    //p/p_/opening
    (- //t_/m/w_/proc 1)
    "MW_PROC ")
  (vector-set!
    //p/p_/operator
    (- //t_/m/w_/proc 1)
    (list "(" " VAR " ") == "))
  (vector-set!
    //p/p_/operator1
    (- //t_/m/w_/proc 1)
    (list "(" "" ") =="))
  (vector-set!
    //p/p_/operator2
    (- //t_/m/w_/proc 1)
    (list "" "VAR " ""))
  (vector-set!
    //p/p_/closing
    (- //t_/m/w_/proc 1)
    " END")
  (vector-set!
    //p/p_/type
    (- //t_/m/w_/funct 1)
    //type_/split)
  (vector-set!
    //p/p_/split
    (- //t_/m/w_/funct 1)
    1)
  (vector-set!
    //p/p_/opening
    (- //t_/m/w_/funct 1)
    "MW_FUNCT ")
  (vector-set!
    //p/p_/operator
    (- //t_/m/w_/funct 1)
    (list "(" ") == VAR " ": " "; ("))
  (vector-set!
    //p/p_/operator1
    (- //t_/m/w_/funct 1)
    (list "(" ") ==" ":" ";"))
  (vector-set!
    //p/p_/operator2
    (- //t_/m/w_/funct 1)
    (list "" "VAR " "" "("))
  (vector-set!
    //p/p_/closing
    (- //t_/m/w_/funct 1)
    ") END")
  (vector-set!
    //p/p_/type
    (- //t_/m/w_/b/funct 1)
    //type_/split)
  (vector-set!
    //p/p_/split
    (- //t_/m/w_/b/funct 1)
    1)
  (vector-set!
    //p/p_/opening
    (- //t_/m/w_/b/funct 1)
    "MW_BFUNCT ")
  (vector-set!
    //p/p_/operator
    (- //t_/m/w_/b/funct 1)
    (list "(" ") == VAR " ": " "; ("))
  (vector-set!
    //p/p_/operator1
    (- //t_/m/w_/b/funct 1)
    (list "(" ") ==" ":" ";"))
  (vector-set!
    //p/p_/operator2
    (- //t_/m/w_/b/funct 1)
    (list "" "VAR " "" "("))
  (vector-set!
    //p/p_/closing
    (- //t_/m/w_/b/funct 1)
    ") END")
  (vector-set!
    //p/p_/type
    (- //t_/proc 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/proc 1) 2)
  (vector-set!
    //p/p_/opening
    (- //t_/proc 1)
    "PROC ")
  (vector-set!
    //p/p_/operator
    (- //t_/proc 1)
    (list "(" " VAR " ") == "))
  (vector-set!
    //p/p_/operator1
    (- //t_/proc 1)
    (list "(" "" ") =="))
  (vector-set!
    //p/p_/operator2
    (- //t_/proc 1)
    (list "" "VAR " ""))
  (vector-set!
    //p/p_/closing
    (- //t_/proc 1)
    " END")
  (vector-set!
    //p/p_/type
    (- //t_/funct 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/funct 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/funct 1)
    "FUNCT ")
  (vector-set!
    //p/p_/operator
    (- //t_/funct 1)
    (list "(" ") == VAR " ": " "; ("))
  (vector-set!
    //p/p_/operator1
    (- //t_/funct 1)
    (list "(" ") ==" ":" ";"))
  (vector-set!
    //p/p_/operator2
    (- //t_/funct 1)
    (list "" "VAR " "" "("))
  (vector-set!
    //p/p_/closing
    (- //t_/funct 1)
    ") END")
  (vector-set!
    //p/p_/type
    (- //t_/b/funct 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/b/funct 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/b/funct 1)
    "BFUNCT ")
  (vector-set!
    //p/p_/operator
    (- //t_/b/funct 1)
    (list "(" ") == VAR " ": " "; ("))
  (vector-set!
    //p/p_/operator1
    (- //t_/b/funct 1)
    (list "(" ") ==" ":" ";"))
  (vector-set!
    //p/p_/operator2
    (- //t_/b/funct 1)
    (list "" "VAR " "" "("))
  (vector-set!
    //p/p_/closing
    (- //t_/b/funct 1)
    ") END")
  (let ((var-save /type)
        (seq-save
          (list //t_/ifmatch_/stat
                //t_/ifmatch_/expn
                //t_/ifmatch_/cond
                //t_/ifmatch_/defn
                //t_/ifmatch_/lvalue
                //t_/ifmatch_/assign
                //t_/ifmatch_/guarded
                //t_/ifmatch_/action
                //t_/ifmatch_/stats
                //t_/ifmatch_/expns
                //t_/ifmatch_/lvalues
                //t_/ifmatch_/assigns
                //t_/ifmatch_/defns)))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! /type (car for-tmp))
             (begin
               (vector-set!
                 //p/p_/type
                 (- /type 1)
                 //type_/ifmatch)
               (vector-set!
                 //p/p_/operator
                 (- /type 1)
                 (list " THEN " " ELSE "))
               (vector-set!
                 //p/p_/operator1
                 (- /type 1)
                 (list "" ""))
               (vector-set!
                 //p/p_/operator2
                 (- /type 1)
                 (list "THEN " "ELSE "))
               (vector-set!
                 //p/p_/closing
                 (- /type 1)
                 " ENDMATCH"))
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! /type var-save))
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/stat 1)
    "IFMATCH Statement ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/expn 1)
    "IFMATCH Expression ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/cond 1)
    "IFMATCH Condition ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/defn 1)
    "IFMATCH Definition ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/lvalue 1)
    "IFMATCH Lvalue ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/assign 1)
    "IFMATCH Assign ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/guarded 1)
    "IFMATCH Guarded ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/action 1)
    "IFMATCH Action ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/stats 1)
    "IFMATCH Statements ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/expns 1)
    "IFMATCH Expressions ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/lvalues 1)
    "IFMATCH Lvalues ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/assigns 1)
    "IFMATCH Assigns ")
  (vector-set!
    //p/p_/opening
    (- //t_/ifmatch_/defns 1)
    "IFMATCH Definitions ")
  (@pp_simple //t_/number "" "")
  (@pp_simple //t_/name "" "")
  (@pp_simple //t_/string //quote //quote)
  (@pp_simple //t_/variable "" "")
  (@pp_simple //t_/var_/lvalue "" "")
  (@pp_simple //t_/primed_/var "" "'")
  (vector-set!
    //p/p_/type
    (- //t_/gethash 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/gethash 1)
    ".(")
  (vector-set!
    //p/p_/operator2
    (- //t_/gethash 1)
    ".(")
  (vector-set!
    //p/p_/closing
    (- //t_/gethash 1)
    ")")
  (vector-set!
    //p/p_/type
    (- //t_/sequence 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/sequence 1)
    "<")
  (vector-set!
    //p/p_/operator
    (- //t_/sequence 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/sequence 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/sequence 1)
    ">")
  (vector-set! //p/p_/indent (- //t_/sequence 1) 1)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/sequence 1)
    1)
  (vector-set!
    //p/p_/type
    (- //t_/aref 1)
    //type_/special)
  (vector-set! //p/p_/opening (- //t_/aref 1) "[")
  (vector-set!
    //p/p_/operator
    (- //t_/aref 1)
    "][")
  (vector-set!
    //p/p_/operator1
    (- //t_/aref 1)
    "]")
  (vector-set!
    //p/p_/operator2
    (- //t_/aref 1)
    "[")
  (vector-set! //p/p_/closing (- //t_/aref 1) "]")
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/aref 1)
    3)
  (vector-set!
    //p/p_/type
    (- //t_/aref_/lvalue 1)
    //type_/special)
  (vector-set!
    //p/p_/opening
    (- //t_/aref_/lvalue 1)
    "[")
  (vector-set!
    //p/p_/operator
    (- //t_/aref_/lvalue 1)
    "][")
  (vector-set!
    //p/p_/operator1
    (- //t_/aref_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/operator2
    (- //t_/aref_/lvalue 1)
    "[")
  (vector-set!
    //p/p_/closing
    (- //t_/aref_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/aref_/lvalue 1)
    3)
  (vector-set!
    //p/p_/type
    (- //t_/sub_/seg 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/sub_/seg 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/sub_/seg 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/sub_/seg 1)
    (list "" "[" ".."))
  (vector-set!
    //p/p_/operator1
    (- //t_/sub_/seg 1)
    (list "" "" ""))
  (vector-set!
    //p/p_/operator2
    (- //t_/sub_/seg 1)
    (list "" "[" ".."))
  (vector-set!
    //p/p_/closing
    (- //t_/sub_/seg 1)
    "]")
  (vector-set!
    //p/p_/type
    (- //t_/sub_/seg_/lvalue 1)
    //type_/split)
  (vector-set!
    //p/p_/split
    (- //t_/sub_/seg_/lvalue 1)
    1)
  (vector-set!
    //p/p_/opening
    (- //t_/sub_/seg_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/sub_/seg_/lvalue 1)
    (list "" "[" ".."))
  (vector-set!
    //p/p_/operator1
    (- //t_/sub_/seg_/lvalue 1)
    (list "" "" ""))
  (vector-set!
    //p/p_/operator2
    (- //t_/sub_/seg_/lvalue 1)
    (list "" "[" ".."))
  (vector-set!
    //p/p_/closing
    (- //t_/sub_/seg_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/type
    (- //t_/rel_/seg 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/rel_/seg 1) 1)
  (vector-set!
    //p/p_/opening
    (- //t_/rel_/seg 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/rel_/seg 1)
    (list "" "[" ", "))
  (vector-set!
    //p/p_/operator1
    (- //t_/rel_/seg 1)
    (list "" "" ","))
  (vector-set!
    //p/p_/operator2
    (- //t_/rel_/seg 1)
    (list "" "[" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/rel_/seg 1)
    "]")
  (vector-set!
    //p/p_/type
    (- //t_/rel_/seg_/lvalue 1)
    //type_/split)
  (vector-set!
    //p/p_/split
    (- //t_/rel_/seg_/lvalue 1)
    1)
  (vector-set!
    //p/p_/opening
    (- //t_/rel_/seg_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/rel_/seg_/lvalue 1)
    (list "" "[" ", "))
  (vector-set!
    //p/p_/operator1
    (- //t_/rel_/seg_/lvalue 1)
    (list "" "" ","))
  (vector-set!
    //p/p_/operator2
    (- //t_/rel_/seg_/lvalue 1)
    (list "" "[" ""))
  (vector-set!
    //p/p_/closing
    (- //t_/rel_/seg_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/type
    (- //t_/final_/seg 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/final_/seg 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/final_/seg 1)
    "[")
  (vector-set!
    //p/p_/operator1
    (- //t_/final_/seg 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/final_/seg 1)
    "[")
  (vector-set!
    //p/p_/closing
    (- //t_/final_/seg 1)
    "..]")
  (vector-set!
    //p/p_/type
    (- //t_/final_/seg_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/final_/seg_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/final_/seg_/lvalue 1)
    "[")
  (vector-set!
    //p/p_/operator1
    (- //t_/final_/seg_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/final_/seg_/lvalue 1)
    "[")
  (vector-set!
    //p/p_/closing
    (- //t_/final_/seg_/lvalue 1)
    "..]")
  (vector-set!
    //p/p_/type
    (- //t_/mem 1)
    //type_/infix)
  (vector-set! //p/p_/opening (- //t_/mem 1) "@[")
  (vector-set! //p/p_/operator (- //t_/mem 1) ", ")
  (vector-set! //p/p_/operator1 (- //t_/mem 1) ",")
  (vector-set! //p/p_/closing (- //t_/mem 1) "]")
  (vector-set! //p/p_/indent (- //t_/mem 1) 2)
  (vector-set! //p/p_/sub_/indent (- //t_/mem 1) 2)
  (vector-set!
    //p/p_/type
    (- //t_/mem_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/mem_/lvalue 1)
    "@[")
  (vector-set!
    //p/p_/operator
    (- //t_/mem_/lvalue 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/mem_/lvalue 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/mem_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/indent
    (- //t_/mem_/lvalue 1)
    2)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/mem_/lvalue 1)
    2)
  (vector-set!
    //p/p_/type
    (- //t_/mem_/seg 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/mem_/seg 1)
    "@[")
  (vector-set!
    //p/p_/operator
    (- //t_/mem_/seg 1)
    "..")
  (vector-set!
    //p/p_/operator1
    (- //t_/mem_/seg 1)
    "..")
  (vector-set!
    //p/p_/closing
    (- //t_/mem_/seg 1)
    "]")
  (vector-set! //p/p_/indent (- //t_/mem_/seg 1) 2)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/mem_/seg 1)
    2)
  (vector-set!
    //p/p_/type
    (- //t_/mem_/seg_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/mem_/seg_/lvalue 1)
    "@[")
  (vector-set!
    //p/p_/operator
    (- //t_/mem_/seg_/lvalue 1)
    "..")
  (vector-set!
    //p/p_/operator1
    (- //t_/mem_/seg_/lvalue 1)
    "..")
  (vector-set!
    //p/p_/closing
    (- //t_/mem_/seg_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/indent
    (- //t_/mem_/seg_/lvalue 1)
    2)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/mem_/seg_/lvalue 1)
    2)
  (vector-set!
    //p/p_/type
    (- //t_/mem_/rel 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/mem_/rel 1)
    "@[")
  (vector-set!
    //p/p_/operator
    (- //t_/mem_/rel 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/mem_/rel 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/mem_/rel 1)
    "]")
  (vector-set! //p/p_/indent (- //t_/mem_/rel 1) 2)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/mem_/rel 1)
    2)
  (vector-set!
    //p/p_/type
    (- //t_/mem_/rel_/lvalue 1)
    //type_/infix)
  (vector-set!
    //p/p_/opening
    (- //t_/mem_/rel_/lvalue 1)
    "@[")
  (vector-set!
    //p/p_/operator
    (- //t_/mem_/rel_/lvalue 1)
    ", ")
  (vector-set!
    //p/p_/operator1
    (- //t_/mem_/rel_/lvalue 1)
    ",")
  (vector-set!
    //p/p_/closing
    (- //t_/mem_/rel_/lvalue 1)
    "]")
  (vector-set!
    //p/p_/indent
    (- //t_/mem_/rel_/lvalue 1)
    2)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/mem_/rel_/lvalue 1)
    2)
  (set! //prec_/struct 130)
  (set! //prec_/get 120)
  (set! //prec_/exponent 110)
  (set! //prec_/times 100)
  (set! //prec_/mod 95)
  (set! //prec_/plus 90)
  (set! //prec_/intersection 70)
  (set! //prec_/union 60)
  (set! //prec_/diff 50)
  (set! //prec_/rel 40)
  (set! //prec_/not 30)
  (set! //prec_/and 20)
  (set! //prec_/or 10)
  (set! //p/p_/non_/assoc_/ops
    (list //t_/minus //t_/divide //t_/set_/diff))
  (set! //p/p_/prec_/increment 3)
  (set! //p/p_/no_/parentheses
    (list //t_/m/w_/proc_/call
          //t_/m/w_/funct_/call
          //t_/m/w_/b/funct_/call))
  (vector-set!
    //p/p_/type
    (- //t_/struct 1)
    //type_/special)
  (vector-set! //p/p_/opening (- //t_/struct 1) "")
  (vector-set!
    //p/p_/operator
    (- //t_/struct 1)
    ".")
  (vector-set!
    //p/p_/operator1
    (- //t_/struct 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/struct 1)
    ".")
  (vector-set! //p/p_/closing (- //t_/struct 1) "")
  (vector-set! //p/p_/indent (- //t_/struct 1) 0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/struct 1)
    0)
  (vector-set!
    //p/p_/prec
    (- //t_/struct 1)
    //prec_/struct)
  (vector-set!
    //p/p_/type
    (- //t_/struct_/lvalue 1)
    //type_/special)
  (vector-set!
    //p/p_/opening
    (- //t_/struct_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator
    (- //t_/struct_/lvalue 1)
    ".")
  (vector-set!
    //p/p_/operator1
    (- //t_/struct_/lvalue 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/struct_/lvalue 1)
    ".")
  (vector-set!
    //p/p_/closing
    (- //t_/struct_/lvalue 1)
    "")
  (vector-set!
    //p/p_/indent
    (- //t_/struct_/lvalue 1)
    0)
  (vector-set!
    //p/p_/sub_/indent
    (- //t_/struct_/lvalue 1)
    0)
  (vector-set!
    //p/p_/prec
    (- //t_/struct_/lvalue 1)
    //prec_/struct)
  (vector-set!
    //p/p_/type
    (- //t_/not 1)
    //type_/prefix)
  (vector-set! //p/p_/opening (- //t_/not 1) "(")
  (vector-set!
    //p/p_/operator
    (- //t_/not 1)
    "NOT ")
  (vector-set! //p/p_/operator1 (- //t_/not 1) "")
  (vector-set!
    //p/p_/operator2
    (- //t_/not 1)
    "NOT ")
  (vector-set! //p/p_/closing (- //t_/not 1) ")")
  (vector-set!
    //p/p_/prec
    (- //t_/not 1)
    //prec_/not)
  (@pp_infix //t_/plus "+" //prec_/plus)
  (@pp_infix //t_/minus "-" //prec_/plus)
  (@pp_infix //t_/times "*" //prec_/times)
  (@pp_infix //t_/divide "/" //prec_/times)
  (@pp_infix //t_/exponent "**" //prec_/exponent)
  (@pp_infix //t_/mod "MOD" //prec_/mod)
  (@pp_infix //t_/div "DIV" //prec_/mod)
  (@pp_infix
    //t_/intersection
    (string-append "/" //backslash)
    //prec_/intersection)
  (@pp_infix
    //t_/union
    (string-append //backslash "/")
    //prec_/union)
  (@pp_infix
    //t_/set_/diff
    //backslash
    //prec_/diff)
  (@pp_infix //t_/concat "++" //prec_/union)
  (@pp_infix //t_/and "AND" //prec_/and)
  (@pp_infix //t_/or "OR" //prec_/or)
  (@pp_infix //t_/equal "=" //prec_/rel)
  (@pp_infix //t_/not_/equal "<>" //prec_/rel)
  (@pp_infix //t_/less "<" //prec_/rel)
  (@pp_infix //t_/greater ">" //prec_/rel)
  (@pp_infix //t_/less_/eq "<=" //prec_/rel)
  (@pp_infix //t_/greater_/eq ">=" //prec_/rel)
  (@pp_infix //t_/in "IN" //prec_/rel)
  (@pp_infix //t_/not_/in "NOTIN" //prec_/rel)
  (vector-set!
    //p/p_/type
    (- //t_/get_n 1)
    //type_/infix)
  (vector-set!
    //p/p_/operator
    (- //t_/get_n 1)
    "^")
  (vector-set!
    //p/p_/operator2
    (- //t_/get_n 1)
    "^")
  (vector-set!
    //p/p_/prec
    (- //t_/get_n 1)
    //prec_/get)
  (vector-set!
    //p/p_/type
    (- //t_/get 1)
    //type_/infix)
  (vector-set! //p/p_/operator (- //t_/get 1) "^^")
  (vector-set!
    //p/p_/operator2
    (- //t_/get 1)
    "^^")
  (vector-set!
    //p/p_/prec
    (- //t_/get 1)
    //prec_/get)
  (vector-set!
    //p/p_/type
    (- //t_/if 1)
    //type_/split)
  (vector-set! //p/p_/split (- //t_/if 1) 1)
  (vector-set! //p/p_/opening (- //t_/if 1) "IF ")
  (vector-set!
    //p/p_/operator
    (- //t_/if 1)
    (list "" " THEN " " ELSE "))
  (vector-set!
    //p/p_/operator1
    (- //t_/if 1)
    (list "" "" "" ""))
  (vector-set!
    //p/p_/operator2
    (- //t_/if 1)
    (list "" "THEN " "ELSE "))
  (vector-set! //p/p_/closing (- //t_/if 1) " FI")
  (@pp_funct //t_/abs "ABS")
  (@pp_funct //t_/frac "FRAC")
  (@pp_funct //t_/int "INT")
  (@pp_funct //t_/sgn "SGN")
  (@pp_funct //t_/max "MAX")
  (@pp_funct //t_/min "MIN")
  (@pp_funct //t_/powerset "POWERSET")
  (@pp_funct //t_/array "ARRAY")
  (@pp_funct //t_/head "HEAD")
  (@pp_funct //t_/tail "TAIL")
  (@pp_funct //t_/last "LAST")
  (@pp_funct //t_/butlast "BUTLAST")
  (@pp_funct //t_/length "LENGTH")
  (@pp_funct //t_/slength "SLENGTH")
  (@pp_funct //t_/index "INDEX")
  (@pp_funct //t_/substr "SUBSTR")
  (@pp_funct //t_/reverse "REVERSE")
  (@pp_funct //t_/even "EVEN?")
  (@pp_funct //t_/odd "ODD?")
  (@pp_funct //t_/empty "EMPTY?")
  (@pp_funct //t_/subset "SUBSET?")
  (@pp_funct //t_/member "MEMBER?")
  (@pp_funct //t_/implies "IMPLIES?")
  (@pp_funct //t_/sequenceq "SEQUENCE?")
  (@pp_funct //t_/numberq "NUMBER?")
  (@pp_funct //t_/stringq "STRING?")
  (@pp_funct //t_/address_/of "ADDRESS_OF")
  (vector-set!
    //p/p_/type
    (- //t_/set 1)
    //type_/infix)
  (vector-set! //p/p_/opening (- //t_/set 1) "{")
  (vector-set! //p/p_/operator (- //t_/set 1) "|")
  (vector-set! //p/p_/operator1 (- //t_/set 1) "")
  (vector-set! //p/p_/operator2 (- //t_/set 1) "|")
  (vector-set! //p/p_/closing (- //t_/set 1) "}")
  (vector-set!
    //p/p_/type
    (- //t_/negate 1)
    //type_/prefix)
  (vector-set!
    //p/p_/opening
    (- //t_/negate 1)
    "(")
  (vector-set!
    //p/p_/operator
    (- //t_/negate 1)
    "-")
  (vector-set!
    //p/p_/operator1
    (- //t_/negate 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/negate 1)
    "-")
  (vector-set!
    //p/p_/closing
    (- //t_/negate 1)
    ")")
  (vector-set!
    //p/p_/prec
    (- //t_/negate 1)
    //prec_/plus)
  (vector-set!
    //p/p_/type
    (- //t_/invert 1)
    //type_/prefix)
  (vector-set!
    //p/p_/opening
    (- //t_/invert 1)
    "(")
  (vector-set!
    //p/p_/operator
    (- //t_/invert 1)
    "1/")
  (vector-set!
    //p/p_/operator1
    (- //t_/invert 1)
    "")
  (vector-set!
    //p/p_/operator2
    (- //t_/invert 1)
    "1/")
  (vector-set!
    //p/p_/closing
    (- //t_/invert 1)
    ")")
  (vector-set!
    //p/p_/prec
    (- //t_/invert 1)
    //prec_/times)
  (@pp_fill //t_/fill_/stat "Statement")
  (@pp_fill //t_/fill_/expn "Expression")
  (@pp_fill //t_/fill_/cond "Condition")
  (@pp_fill //t_/fill_/defn "Definition")
  (@pp_fill //t_/fill_/lvalue "Lvalue")
  (@pp_fill //t_/fill_/assign "Assign")
  (@pp_fill //t_/fill_/guarded "Guarded")
  (@pp_fill //t_/fill_/action "Action")
  (@pp_fill //t_/fill_/stats "Statements")
  (@pp_fill //t_/fill_/expns "Expressions")
  (@pp_fill //t_/fill_/lvalues "Lvalues")
  (@pp_fill //t_/fill_/assigns "Assigns")
  (@pp_fill //t_/fill_/defns "Definitions")
  #t
  (set! /type /type-save))

(define (@pp_dummy)
  (begin
    (display //data_/names)
    (begin
      (display //data_/lengths)
      (begin
        (display //data_/origlen)
        (begin
          (display //data_/repeats)
          (begin
            (display //data_/fields)
            (begin
              (display //data_/types)
              (begin
                (display //data_/values)
                (begin
                  (display //init_/types)
                  (begin
                    (display //init_/values)
                    (begin
                      (display //init_/string)
                      (begin
                        (display //equ_/symbol)
                        (begin
                          (display //d/s/e/c/t_/tag)
                          (begin
                            (display //comment)
                            (begin
                              (display //orig_/name)
                              (begin
                                (display //c/i/c/s_/maps)
                                (newline)
                                (force-output))))))))))))))))
  (begin
    (display //symbol_/equ)
    (begin
      (display //max_/split_/line)
      (newline)
      (force-output)))
  (begin
    (display //f/c_/business)
    (begin
      (display //f/c_/business_/end)
      (begin
        (display //f/c_/tech)
        (begin
          (display //f/c_/tech_/end)
          (begin
            (display //f/c_/newline)
            (begin
              (display //f/c_/turn_/on)
              (begin
                (display //f/c_/turn_/off)
                (newline)
                (force-output)))))))))

