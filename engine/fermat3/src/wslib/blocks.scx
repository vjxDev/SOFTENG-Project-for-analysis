(define (/foreach-blocks-1 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/where)
         (@down_last)
         (@down)
         (cond ((= (@st (@i)) //t_/proc)
                (puthash
                  //proc_/data
                  (@v (list-ref (@i) (+ 1 1)))
                  (list (@i) (@posn)))))
         (let while-loop ()
           (cond ((@right?)
                  (begin
                    (@right)
                    (cond ((= (@st (@i)) //t_/proc)
                           (puthash
                             //proc_/data
                             (@v (list-ref (@i) (+ 1 1)))
                             (list (@i) (@posn))))))
                  (while-loop))
                 (#t #t))))))

(define (@basic_blocks //i-par //filename)
  (let ((//i-save //i))
    (set! //i //i-par)
    (let ((//action_/call_/to_/node-save
            //action_/call_/to_/node)
          (//loop_/exits-save //loop_/exits)
          (//proc_/data-save //proc_/data)
          (//next_/node-save //next_/node)
          (/node 0)
          (/exit_flag-save /exit_flag))
      (set! //action_/call_/to_/node '())
      (set! //loop_/exits '())
      (set! //proc_/data (my-make-hash-table 16))
      (set! //next_/node 2)
      (set! /exit_flag (@make_name "exit_flag"))
      (@write_to //filename)
      (@edit)
      (@new_program //i)
      (cond ((member //t_/where (@stat_types (@i)))
             (let ((//defn_/count (@count_proc_defns (@i)))
                   (//orig_/name (my-make-hash-table 16))
                   (/doit 0))
               (let ((var-save /name)
                     (seq-save (@hash_keys //defn_/count)))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /name (car for-tmp))
                          (cond ((> (gethash //defn_/count /name) 1)
                                 (set! /doit 1)))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /name var-save))
               (cond ((= /doit 1)
                      (set! //orig_/name
                        (@rename_procs //defn_/count //orig_/name)))))
             (@foreach_statement
               /foreach-blocks-1
               0
               (@as_type)
               0)
             (cond ((null? (@program)) (@new_program (@skips))))
             (let ((/heads '()) (/defn '()) (/posn '()))
               (set! /heads
                 (list (@bb_statements (@program) '() 0)))
               (let ((var-save /name)
                     (seq-save (@hash_keys //proc_/data)))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /name (car for-tmp))
                          (begin
                            (set! /defn
                              (let ((name (gethash //proc_/data /name)))
                                (if (vector? name)
                                  (vector-ref name (- 1 1))
                                  (list-ref name (- 1 1)))))
                            (set! /posn
                              (let ((name (gethash //proc_/data /name)))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1)))))
                            (set! /heads
                              (cons (@bb_block (list /defn) /posn 1 0) /heads)))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /name var-save))
               (set! /node //next_/node)
               (set! //next_/node (+ //next_/node 1))
               (@bb_write_node_line /node '() 1 /heads)
               (@wl "WHERE Header")
               (@wl "")))
            (#t
             (set! /node (@bb_statements (@program) '() 0))))
      (@wl (string-append "Entry node is: " (@string /node)))
      (@undo_edit)
      (@end_write)
      (set! //action_/call_/to_/node
        //action_/call_/to_/node-save)
      (set! //loop_/exits //loop_/exits-save)
      (set! //proc_/data //proc_/data-save)
      (set! //next_/node //next_/node-save)
      (set! /exit_flag /exit_flag-save))
    (set! //i //i-save)))

(set! //b/b_/end_/block_/types
  (list //t_/cond
        //t_/d_/if
        //t_/exit
        //t_/call
        //t_/abort
        //t_/proc_/call))

(set! //b/b_/new_/block_/types
  (list //t_/floop
        //t_/while
        //t_/for
        //t_/d_/do
        //t_/a_/s
        //t_/var
        //t_/where
        //t_/proc_/call))

(define (@bb_statements //i /posn /dest)
  (@bb_list
    (reverse (@cs //i))
    (@size //i)
    /posn
    /dest))

(define (@bb_list //l /posn_n /posn /dest)
  (let ((/block '()) (/len 1) (/vars '()) (/addr 0))
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (begin
               (set! /block (cons (car //l) /block))
               (set! //l (cdr //l))
               (cond ((or (null? //l)
                          (member
                            (@st (car /block))
                            //b/b_/new_/block_/types))
                      (set! /fl_flag1 1))
                     ((or (member (@st (car //l)) //b/b_/end_/block_/types)
                          (member (@st (car //l)) //b/b_/new_/block_/types))
                      (set! /fl_flag1 1))
                     (#t
                      (set! /vars
                        (@set_union /vars (@variables (car /block))))
                      (cond ((not (null? (@set_intersect
                                           /vars
                                           (@variables (car //l)))))
                             (set! /fl_flag1 1))
                            ((and (= (@st (car /block)) //t_/assignment)
                                  (= (@st (list-ref
                                            (list-ref (car /block) (+ 1 1))
                                            (+ 1 2)))
                                     //t_/variable)
                                  (@starts_with?
                                    (@n_string
                                      (@v (list-ref
                                            (list-ref (car /block) (+ 1 1))
                                            (+ 1 2))))
                                    "NOTUSED_"))
                             (set! /fl_flag1 1))
                            (#t
                             (set! /posn_n (- /posn_n 1))
                             (set! /len (+ /len 1))
                             (set! /fl_flag1 0))))))
             (while-loop))
            (#t #t)))
    (set! /dest
      (@bb_block
        /block
        (concat /posn (list /posn_n))
        /len
        /dest))
    (cond ((not (null? //l))
           (set! /dest
             (@bb_list //l (- /posn_n 1) /posn /dest))))
    /dest))

(define (@bb_fermat_comment //l)
  (let ((//r '()))
    (let while-loop ()
      (cond ((not (null? //l))
             (cond ((and (= (@st (car //l)) //t_/comment)
                         (@starts_with? (@v (car //l)) "<FermaT>"))
                    (set! //r (list (car //l)))
                    (set! //l '()))
                   (#t (set! //l (cdr //l))))
             (while-loop))
            (#t #t)))
    //r))

(define (@bb_block /block /posn /len /dest)
  (let ((//s/t (@st (last-1 /block))) (/node /dest))
    (cond ((or (= //s/t //t_/cond) (= //s/t //t_/d_/if))
           (set! /node (@bb_cond /block /posn /len /dest)))
          ((= //s/t //t_/floop)
           (set! /node (@bb_floop /block /posn /len /dest)))
          ((= //s/t //t_/exit)
           (set! /node (@bb_exit /block /posn /len /dest)))
          ((= //s/t //t_/while)
           (set! /node (@bb_while /block /posn /len /dest)))
          ((= //s/t //t_/d_/do)
           (set! /node (@bb_d_do /block /posn /len /dest)))
          ((= //s/t //t_/a_/s)
           (set! /node (@bb_a_s /block /posn /len /dest)))
          ((= //s/t //t_/call)
           (set! /node (@bb_call /block /posn /len /dest)))
          ((= //s/t //t_/var)
           (set! /node (@bb_var /block /posn /len /dest)))
          ((= //s/t //t_/for)
           (set! /node (@bb_for /block /posn /len /dest)))
          ((= //s/t //t_/where)
           (set! /node (@bb_where /block /posn /len /dest)))
          ((= //s/t //t_/abort)
           (set! /node (@bb_abort /block /posn /len /dest)))
          ((and (= //s/t //t_/skip) (= /len 1)))
          ((= //s/t //t_/proc_/call)
           (set! /node
             (@bb_proc_call /block /posn /len /dest)))
          ((= //s/t //t_/proc)
           (set! /node (@bb_proc /block /posn /len /dest)))
          ((= //s/t //t_/funct)
           (error "@BB_Funct not yet implemented"))
          ((= //s/t //t_/b/funct)
           (error "@BB_BFunct not yet implemented"))
          (#t
           (set! /node
             (@bb_node (- 1) /block /posn /len (list /dest)))))
    /node))

(define (@bb_cond /block /posn /len /dest)
  (let ((/targets '())
        (/last (last-1 /block))
        (/last_posn /posn)
        (/guarded '())
        (/n 1))
    (cond ((> /len 1)
           (set! /last_posn
             (concat
               (butlast-1 /posn)
               (list (- (+ (last-1 /posn) /len) 1))))))
    (let ((var-save /guarded) (seq-save (@cs /last)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /guarded (car for-tmp))
               (begin
                 (set! /targets
                   (cons (@bb_statements
                           (list-ref /guarded (+ 1 2))
                           (concat /last_posn (list /n 2))
                           /dest)
                         /targets))
                 (set! /n (+ /n 1)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /guarded var-save))
    (@bb_node
      (- 1)
      /block
      /posn
      /len
      (reverse /targets))))

(define (@bb_node /node /block /posn /len /targets)
  (cond ((< /node 0)
         (set! /node //next_/node)
         (set! //next_/node (+ //next_/node 1))))
  (cond ((and (not (null? /block))
              (member /exit_flag (@assigned (last-1 /block))))
         (let ((/last (last-1 /block)))
           (cond ((and (= (@st /last) //t_/assignment)
                       (= (@st (list-ref (list-ref /last (+ 1 1)) (+ 1 1)))
                          //t_/var_/lvalue)
                       (equal?
                         (@v (list-ref (list-ref /last (+ 1 1)) (+ 1 1)))
                         /exit_flag)
                       (= (@st (list-ref (list-ref /last (+ 1 1)) (+ 1 2)))
                          //t_/number)
                       (= (@v (list-ref (list-ref /last (+ 1 1)) (+ 1 2)))
                          1))
                  (set! /targets (list 0)))))))
  (@bb_write_node_line /node /posn /len /targets)
  (@bb_write_block /node /block))

(define (@bb_exit /block /posn /len /dest)
  (let ((/node (if (> (@v (last-1 /block))
                      (if (vector? //loop_/exits)
                        (vector-length //loop_/exits)
                        (length //loop_/exits)))
                 0
                 (let ((name //loop_/exits))
                   (if (vector? name)
                     (vector-ref name (- (@v (last-1 /block)) 1))
                     (list-ref name (- (@v (last-1 /block)) 1)))))))
    (cond ((> (if (vector? /block)
                (vector-length /block)
                (length /block))
              1)
           (set! /node
             (@bb_node (- 1) /block /posn /len (list /node)))))
    /node))

(define (@bb_call /block /posn /len /dest)
  (let ((/node 0) (/name-save /name) (funct-result '()))
    (set! /name (@v (last-1 /block)))
    (set! /node
      (@bb_get_node /name //action_/call_/to_/node))
    (cond ((null? /node) (set! /node 0))
          ((> (if (vector? /block)
                (vector-length /block)
                (length /block))
              1)
           (set! /node
             (@bb_node (- 1) /block /posn /len (list /node)))))
    (set! funct-result /node)
    (set! /name /name-save)
    funct-result))

(define (@bb_get_node /name //l)
  (let ((/node '()))
    (let while-loop ()
      (cond ((and (null? /node) (not (null? //l)))
             (begin
               (set! /node (gethash (car //l) /name))
               (set! //l (cdr //l)))
             (while-loop))
            (#t #t)))
    /node))

(define (@bb_abort /block /posn /len /dest)
  /dest)

(define (@bb_floop /block /posn /len /dest)
  (let ((/head //next_/node) (/body 0))
    (set! //next_/node (+ //next_/node 1))
    (set! //loop_/exits (cons /dest //loop_/exits))
    (set! /body
      (@bb_statements
        (list-ref (car /block) (+ 1 1))
        (concat /posn (list 1))
        /head))
    (set! //loop_/exits (cdr //loop_/exits))
    (@bb_node /head /block /posn /len (list /body))))

(define (@bb_while /block /posn /len /dest)
  (let ((/head //next_/node) (/body 0))
    (set! //next_/node (+ //next_/node 1))
    (set! /body
      (@bb_statements
        (list-ref (car /block) (+ 1 2))
        (concat /posn (list 2))
        /head))
    (@bb_node
      /head
      (list (car /block))
      /posn
      /len
      (list /body /dest))))

(define (@bb_d_do /block /posn /len /dest)
  (let ((/head //next_/node)
        (/body 0)
        (/targets '())
        (/last (last-1 /block))
        (/last_posn /posn)
        (/guarded '())
        (/n 1))
    (set! //next_/node (+ //next_/node 1))
    (let ((var-save /guarded) (seq-save (@cs /last)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /guarded (car for-tmp))
               (begin
                 (set! /targets
                   (cons (@bb_statements
                           (list-ref /guarded (+ 1 2))
                           (concat /last_posn (list /n 2))
                           /head)
                         /targets))
                 (set! /n (+ /n 1)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /guarded var-save))
    (@bb_node
      /head
      /block
      /posn
      /len
      (reverse (cons /dest /targets)))))

(define (@bb_a_s /block /posn /len /dest)
  (let ((/node 0)
        (/start (@v (list-ref (car /block) (+ 1 1))))
        (/tab (my-make-hash-table 16))
        (/n 1)
        (/head 0))
    (let ((var-save /action)
          (seq-save (@cs (list-ref (car /block) (+ 1 2)))))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /action (car for-tmp))
               (begin
                 (set! /node //next_/node)
                 (set! //next_/node (+ //next_/node 1))
                 (puthash
                   /tab
                   (@v (list-ref /action (+ 1 1)))
                   /node))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /action var-save))
    (puthash /tab (@make_name "Z") /dest)
    (set! //action_/call_/to_/node
      (cons /tab //action_/call_/to_/node))
    (let ((var-save /action)
          (seq-save (@cs (list-ref (car /block) (+ 1 2)))))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /action (car for-tmp))
               (begin
                 (set! /node
                   (@bb_statements
                     (list-ref /action (+ 1 2))
                     (concat /posn (list 2 /n 2))
                     /dest))
                 (set! /head
                   (gethash /tab (@v (list-ref /action (+ 1 1)))))
                 (set! /head
                   (@bb_node
                     /head
                     (@bb_name "ACTION" (list-ref /action (+ 1 1)))
                     (concat /posn (list 2 /n))
                     1
                     (list /node)))
                 (set! /n (+ /n 1)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /action var-save))
    (set! //action_/call_/to_/node
      (cdr //action_/call_/to_/node))
    (gethash /tab /start)))

(define (@bb_where /block /posn /len /dest)
  (@bb_statements
    (list-ref (car /block) (+ 1 1))
    (concat /posn (list 1))
    /dest))

(define (@bb_var /block /posn /len /dest)
  (let ((/node //next_/node)
        (/assigns (@cs (list-ref (car /block) (+ 1 1))))
        (/stack '())
        (/saves '())
        (/restores '())
        (/body 0))
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /node
      /posn
      /len
      (list /dest))
    (@wl "Restore")
    (let ((var-save /assign) (seq-save /assigns))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /assign (car for-tmp))
               (begin
                 (set! /stack
                   (@make //t_/variable
                          (@make_name
                            (string-append
                              (@n_string (@v (list-ref /assign (+ 1 1))))
                              "__save__"))
                          '()))
                 (set! /restores
                   (cons (@make //t_/assign
                                '()
                                (list (list-ref /assign (+ 1 1)) /stack))
                         /restores)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /assign var-save))
    (set! /node
      (@bb_write_item
        /node
        (@make //t_/assignment '() (reverse /restores))))
    (set! /body
      (@bb_statements
        (list-ref (car /block) (+ 1 2))
        (concat /posn (list 2))
        /node))
    (set! /node //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /node
      (concat /posn (list 1))
      /len
      (list /body))
    (@wl "VAR Init")
    (set! /body
      (@bb_write_item
        /node
        (@make //t_/assignment '() /assigns)))
    (set! /node //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /node
      (concat /posn (list 1))
      /len
      (list /body))
    (@wl "Save")
    (let ((var-save /assign) (seq-save /assigns))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /assign (car for-tmp))
               (begin
                 (set! /stack
                   (@make //t_/var_/lvalue
                          (@make_name
                            (string-append
                              (@n_string (@v (list-ref /assign (+ 1 1))))
                              "__save__"))
                          '()))
                 (set! /saves
                   (cons (@make //t_/assign
                                '()
                                (list /stack
                                      (@lvalue_to_expn
                                        (list-ref /assign (+ 1 1)))))
                         /saves)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /assign var-save))
    (@bb_write_item
      /node
      (@make //t_/assignment '() (reverse /saves)))))

(define (@bb_for /block /posn /len /dest)
  (let ((/exit //next_/node)
        (/var-save /var)
        (/start (list-ref (car /block) (+ 1 2)))
        (/end (list-ref (car /block) (+ 1 3)))
        (/inc (list-ref (car /block) (+ 1 4)))
        (/stack '())
        (/init 0)
        (/head 0)
        (/body 0)
        (/footer 0)
        (/node 0)
        (funct-result '()))
    (set! /var
      (@make //t_/var_/lvalue
             (@v (list-ref (car /block) (+ 1 1)))
             '()))
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /exit
      /posn
      /len
      (list /dest))
    (@wl "Restore")
    (set! /stack
      (@make //t_/variable
             (@make_name
               (string-append (@n_string (@v /var)) "__save__"))
             '()))
    (set! /exit
      (@bb_write_item
        /exit
        (@make 110
               '()
               (list (@make 6
                            '()
                            (list (@expn_to_var /var)
                                  (@var_to_expn /stack)))))))
    (set! /head //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (set! /footer //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /footer
      /posn
      /len
      (list /head))
    (@wl "FOR Footer")
    (set! /footer
      (@bb_write_item
        /footer
        (@make 110
               '()
               (list (@make 6
                            '()
                            (list (@expn_to_var /var)
                                  (@make 220
                                         '()
                                         (list (@var_to_expn /var)
                                               (@var_to_expn /inc)))))))))
    (set! /body
      (@bb_statements
        (list-ref (car /block) (+ 1 5))
        (concat /posn (list 5))
        /footer))
    (@bb_write_node_line
      /head
      /posn
      /len
      (list /body /exit))
    (@wl "FOR Header")
    (set! /head
      (@bb_write_item
        /head
        (@make 316
               '()
               (list (@var_to_expn /var) (@var_to_expn /end)))))
    (set! /init //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /init
      /posn
      /len
      (list /head))
    (@wl "FOR Init")
    (set! /init
      (@bb_write_item
        /init
        (@make 110
               '()
               (list (@make 6
                            '()
                            (list (@expn_to_var /var)
                                  (@var_to_expn /start)))))))
    (set! /node //next_/node)
    (set! //next_/node (+ //next_/node 1))
    (@bb_write_node_line
      /node
      /posn
      /len
      (list /init))
    (@wl "Save")
    (set! funct-result
      (@bb_write_item
        /node
        (@make 110
               '()
               (list (@make 6
                            '()
                            (list (@expn_to_var /stack)
                                  (@var_to_expn /var)))))))
    (set! /var /var-save)
    funct-result))

(define (@bb_proc /block /posn /len /dest)
  (let ((/body 0)
        (/return
          (@bb_node
            (- 1)
            (list (list-ref (car /block) (+ 1 3))
                  (car /block))
            (concat /posn (list 3))
            1
            (list /dest))))
    (set! /body
      (@bb_statements
        (list-ref (car /block) (+ 1 4))
        (concat /posn (list 4))
        /return))
    (@bb_node (- 1) /block /posn /len (list /body))))

(define (@bb_name /prefix //i)
  (list (@make //t_/name
               (@make_name
                 (concat
                   (string-append /prefix " ")
                   (@n_string (@v //i))))
               '())))

(define (@bb_write_block /node /block)
  (let ((//s/t1 (@st (car /block)))
        (//s/t2 (@st (last-1 /block))))
    (cond ((= //s/t1 //t_/floop)
           (@wl "FLOOP Header")
           (@wl ""))
          ((= //s/t1 //t_/while)
           (@wl "WHILE Header")
           (set! /node
             (@bb_write_item
               /node
               (list-ref (car /block) (+ 1 1)))))
          ((= //s/t1 //t_/where)
           (@wl "WHERE Header")
           (@wl ""))
          ((= //s/t1 //t_/name)
           (@wl (@n_string (@v (car /block))))
           (@wl ""))
          ((= //s/t1 //t_/lvalues)
           (@wl (string-append
                  "PROC Return "
                  (@n_string
                    (@v (list-ref
                          (let ((name /block))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1))))
                          (+ 1 1))))))
           (set! /node (@bb_write_item /node (car /block))))
          ((= //s/t1 //t_/proc_/call)
           (@wl (string-append
                  "PROC CALL "
                  (@n_string (@v (list-ref (car /block) (+ 1 1))))))
           (set! /node (@bb_write_item /node (car /block))))
          ((= //s/t1 //t_/proc)
           (@wl (string-append
                  "PROC Header "
                  (@n_string (@v (list-ref (car /block) (+ 1 1))))))
           (set! /node
             (@bb_write_item
               /node
               (@bb_make_assign
                 (concat
                   (@cs (list-ref (car /block) (+ 1 2)))
                   (@cs (list-ref (car /block) (+ 1 3))))))))
          ((or (= //s/t2 //t_/cond)
               (= //s/t2 //t_/d_/if)
               (= //s/t1 //t_/d_/do))
           (@wl "IF")
           (let ((//l '()))
             (let ((var-save /guard)
                   (seq-save (@cs (last-1 /block))))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /guard (car for-tmp))
                        (set! //l (cons (list-ref /guard (+ 1 1)) //l))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /guard var-save))
             (set! /node
               (@bb_write_list
                 /node
                 (concat (butlast-1 /block) (reverse //l))))))
          ((and (= (@gt (car /block)) //t_/statement)
                (= (@gt (last-1 /block)) //t_/statement))
           (set! /node (@bb_write_list /node /block)))
          (#t
           (begin
             (display "Type1 = ")
             (begin
               (display (@type_name //s/t1))
               (begin
                 (display " Type2 = ")
                 (begin
                   (display (@type_name //s/t2))
                   (newline)
                   (force-output)))))
           (error "Unknown types in this block!")))
    /node))

(define (@bb_write_list /node //l)
  (let ((var-save //i) (seq-save //l))
    (if (vector? seq-save)
      (set! seq-save (vector-elts seq-save)))
    (let for-in-loop ((for-tmp seq-save))
      (cond ((not (null? for-tmp))
             (set! //i (car for-tmp))
             (@bb_write_comments //i)
             (for-in-loop (cdr for-tmp)))
            (#t #t)))
    (set! //i var-save))
  (@write_summ2 (@summ2_list //l))
  (@wl "")
  /node)

(define (@bb_write_item /node //i-par)
  (let ((//i-save //i) (funct-result '()))
    (set! //i //i-par)
    (@bb_write_comments //i)
    (@write_summ2 (@summ2 //i))
    (@wl "")
    (set! funct-result /node)
    (set! //i //i-save)
    funct-result))

(define (@bb_write_comments //i-par)
  (let ((//i-save //i))
    (set! //i //i-par)
    (cond ((and (= (@st //i) //t_/comment)
                (@starts_with? (@v //i) "<FermaT>"))
           (@wl (let ((s (@v //i)))
                  (substring s 9 (string-length s))))))
    (set! //i //i-save)))

(define (@bb_make_assign //l)
  (let ((/assigns '())
        (/val (@make //t_/number 0 '()))
        (/done (my-make-hash-table 16)))
    (let ((var-save /var) (seq-save //l))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /var (car for-tmp))
               (cond ((null? (gethash /done /var))
                      (puthash /done /var 1)
                      (set! /assigns
                        (cons (@make //t_/assign '() (list /var /val))
                              /assigns))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /var var-save))
    (@make //t_/assignment '() (reverse /assigns))))

(define (@bb_write_node_line /node /posn /len /targets)
  (@wl (concat
         (string-append
           (concat
             (string-append
               (concat
                 (string-append
                   (string-append "Node: " (@string /node))
                   " posn:")
                 (@struct_to_string /posn))
               " len: ")
             (@string /len))
           " --> ")
         (@struct_to_string /targets))))

(define (@bb_proc_call /block /posn /len /dest)
  (let ((/name-save /name)
        (/vals (@cs (list-ref (car /block) (+ 1 2))))
        (/vars (@cs (list-ref (car /block) (+ 1 3))))
        (/node //next_/node)
        (/data '())
        (/formal_vals '())
        (/formal_vars '())
        (/result_vars '())
        (/prefix
          (string-append
            (@n_string (@v (list-ref (car /block) (+ 1 1))))
            "__"))
        (/formal_pars '())
        (/actual_pars '())
        (funct-result '()))
    (set! /name (@v (list-ref (car /block) (+ 1 1))))
    (set! /data (gethash //proc_/data /name))
    (cond ((null? /data)
           (set! /node
             (@bb_node (- 1) /block /posn /len (list /dest))))
          (#t
           (set! /formal_vals
             (let ((l (@cs (list-ref
                             (let ((name /data))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))
                             (+ 1 2))))
                   (map-result '()))
               (let while-loop ()
                 (cond ((not (null? l))
                        (set! map-result
                          (cons (@struct_elts (car l)) map-result))
                        (set! l (cdr l))
                        (while-loop))
                       (#t #t)))
               (reverse map-result)))
           (set! /formal_vars
             (let ((l (@cs (list-ref
                             (let ((name /data))
                               (if (vector? name)
                                 (vector-ref name (- 1 1))
                                 (list-ref name (- 1 1))))
                             (+ 1 3))))
                   (map-result '()))
               (let while-loop ()
                 (cond ((not (null? l))
                        (set! map-result
                          (cons (@struct_elts (car l)) map-result))
                        (set! l (cdr l))
                        (while-loop))
                       (#t #t)))
               (reverse map-result)))
           (set! //next_/node (+ //next_/node 1))
           (@bb_write_node_line
             /node
             /posn
             /len
             (list /dest))
           (@wl (string-append "PROC CALL 3 " (@n_string /name)))
           (set! /result_vars
             (let ((l (@s2_prefix_list /formal_vars /prefix))
                   (map-result '()))
               (let while-loop ()
                 (cond ((not (null? l))
                        (set! map-result
                          (cons (@elt_to_expn (car l)) map-result))
                        (set! l (cdr l))
                        (while-loop))
                       (#t #t)))
               (reverse map-result)))
           (set! /dest
             (@bb_write_assign /node /vars /result_vars))
           (set! /node //next_/node)
           (set! //next_/node (+ //next_/node 1))
           (@bb_write_node_line
             /node
             /posn
             /len
             (list /dest))
           (@wl (string-append "PROC CALL 2 " (@n_string /name)))
           (set! /dest (@bb_write_item /node (@skip)))
           (set! /node //next_/node)
           (set! //next_/node (+ //next_/node 1))
           (@bb_write_node_line
             /node
             /posn
             /len
             (list /dest))
           (@wl (string-append "PROC CALL 1 " (@n_string /name)))
           (set! /formal_pars
             (let ((l (@s2_prefix_list
                        (concat /formal_vals /formal_vars)
                        /prefix))
                   (map-result '()))
               (let while-loop ()
                 (cond ((not (null? l))
                        (set! map-result
                          (cons (@elt_to_lvalue (car l)) map-result))
                        (set! l (cdr l))
                        (while-loop))
                       (#t #t)))
               (reverse map-result)))
           (set! /actual_pars
             (concat
               /vals
               (let ((l /vars) (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result
                            (cons (@lvalue_to_expn (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result))))
           (set! /node
             (@bb_write_assign
               /node
               /formal_pars
               /actual_pars))))
    (set! funct-result /node)
    (set! /name /name-save)
    funct-result))

(define (@bb_write_assign /node /vars /vals)
  (let ((/assigns '())
        (/pair '())
        (/done (my-make-hash-table 16)))
    (let while-loop ()
      (cond ((and (not (null? /vars)) (not (null? /vals)))
             (begin
               (set! /pair (list (car /vars) (car /vals)))
               (cond ((null? (gethash /done /pair))
                      (set! /assigns
                        (cons (@make //t_/assign '() /pair) /assigns))
                      (puthash /done /pair 1)))
               (set! /vars (cdr /vars))
               (set! /vals (cdr /vals)))
             (while-loop))
            (#t #t)))
    (@bb_write_item
      /node
      (@make //t_/assignment '() /assigns))))

