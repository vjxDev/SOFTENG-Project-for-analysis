(set! //n_/symbol_/table (make-vector 1000 ""))

(set! //n_/symbol_/table_/length
  (make-vector 1000 0))

(set! //n_/symbol_/table_/next 1)

(set! //n_/symbol_/table_/size 1000)

(set! //n_/string_/to_/symbol
  (make-vector 1000 '()))

(define (@make_name /str)
  (let ((//r (gethash //n_/string_/to_/symbol /str)))
    (cond ((null? //r)
           (set! //r //n_/symbol_/table_/next)
           (vector-set!
             //n_/symbol_/table
             (- //n_/symbol_/table_/next 1)
             /str)
           (vector-set!
             //n_/symbol_/table_/length
             (- //n_/symbol_/table_/next 1)
             (string-length /str))
           (puthash //n_/string_/to_/symbol /str //r)
           (set! //n_/symbol_/table_/next
             (+ //n_/symbol_/table_/next 1))
           (cond ((> //n_/symbol_/table_/next
                     //n_/symbol_/table_/size)
                  (@grow_symbol_table)))))
    //r))

(define (@n_string /name)
  (if (null? /name)
    ""
    (vector-ref //n_/symbol_/table (- /name 1))))

(define (@n_length /name)
  (if (null? /name)
    0
    (vector-ref
      //n_/symbol_/table_/length
      (- /name 1))))

(define (@grow_symbol_table)
  (let ((/new1 (make-vector (* //n_/symbol_/table_/size 2) ""))
        (/new2 (make-vector (* //n_/symbol_/table_/size 2) "")))
    (let ((var-save /i)
          (for-step 1)
          (for-end //n_/symbol_/table_/size))
      (set! /i 1)
      (let for-loop ()
        (cond ((or (and (> 1 0) (<= /i for-end))
                   (and (< 1 0) (>= /i for-end)))
               (begin
                 (if (vector? /new1)
                   (vector-set!
                     /new1
                     (- /i 1)
                     (vector-ref //n_/symbol_/table (- /i 1)))
                   (set! /new1
                     (replace-nth
                       /new1
                       /i
                       (vector-ref //n_/symbol_/table (- /i 1)))))
                 (if (vector? /new2)
                   (vector-set!
                     /new2
                     (- /i 1)
                     (vector-ref //n_/symbol_/table_/length (- /i 1)))
                   (set! /new2
                     (replace-nth
                       /new2
                       /i
                       (vector-ref //n_/symbol_/table_/length (- /i 1))))))
               (set! /i (+ /i for-step))
               (for-loop))
              (#t #t)))
      (set! /i var-save))
    (set! //n_/symbol_/table /new1)
    (set! //n_/symbol_/table_/length /new2)
    (set! //n_/symbol_/table_/size
      (* //n_/symbol_/table_/size 2))))

(define (@name_value //i)
  (let ((//s/t '()) (//r ""))
    (cond ((@cs? //i)
           (set! //s/t (@st (list-ref //i (+ 1 1))))
           (cond ((= //s/t //t_/name)
                  (set! //r
                    (@n_string (@v (list-ref //i (+ 1 1))))))
                 ((= //s/t //t_/name_/pat_/one)
                  (set! //r
                    (string-append
                      "~?"
                      (@n_string (@v (list-ref //i (+ 1 1)))))))
                 ((= //s/t //t_/name_/var_/one)
                  (set! //r
                    (string-append
                      "~?="
                      (@n_string (@v (list-ref //i (+ 1 1)))))))
                 ((= //s/t //t_/name_/int_/one)
                  (set! //r
                    (string-append
                      (string-append
                        "~?("
                        (@value_string
                          (list-ref (list-ref //i (+ 1 1)) (+ 1 1))))
                      ")"))))))
    //r))

(define (@name_length //i)
  (let ((//s/t '()) (//r 0))
    (cond ((@cs? //i)
           (set! //s/t (@st (list-ref //i (+ 1 1))))
           (cond ((= //s/t //t_/name)
                  (set! //r
                    (@n_length (@v (list-ref //i (+ 1 1))))))
                 ((= //s/t //t_/name_/pat_/one)
                  (set! //r
                    (+ (@n_length (@v (list-ref //i (+ 1 1)))) 2)))
                 ((= //s/t //t_/name_/var_/one)
                  (set! //r
                    (+ (@n_length (@v (list-ref //i (+ 1 1)))) 3)))
                 ((= //s/t //t_/name_/int_/one)
                  (set! //r
                    (+ (@value_length
                         (list-ref (list-ref //i (+ 1 1)) (+ 1 1)))
                       4))))))
    //r))

(define (@value_string //i)
  (let ((//r ""))
    (cond ((@has_value_type? (@st //i))
           (cond ((or (= (@st //i) //t_/number)
                      (= (@st //i) //t_/exit))
                  (set! //r (@string (@v //i))))
                 ((or (= (@st //i) //t_/string)
                      (= (@st //i) //t_/comment))
                  (set! //r (@v //i)))
                 ((string? (@v //i)) (set! //r (@v //i)))
                 ((and (number? (@v //i)) (< (@v //i) 0))
                  (set! //r (@string (- (@v //i)))))
                 (#t (set! //r (@n_string (@v //i)))))))
    //r))

(define (@value_length //i)
  (let ((//r 0))
    (cond ((@has_value_type? (@st //i))
           (cond ((or (= (@st //i) //t_/number)
                      (= (@st //i) //t_/exit))
                  (set! //r (string-length (@string (@v //i)))))
                 ((or (= (@st //i) //t_/string)
                      (= (@st //i) //t_/comment))
                  (set! //r (string-length (@v //i))))
                 ((string? (@v //i))
                  (set! //r (string-length (@v //i))))
                 ((and (number? (@v //i)) (< (@v //i) 0))
                  (set! //r (string-length (@string (@v //i)))))
                 (#t (set! //r (@n_length (@v //i)))))))
    //r))

