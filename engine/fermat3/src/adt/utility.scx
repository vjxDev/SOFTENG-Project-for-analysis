(define (@prefix? //a //b)
  (or (null? //a)
      (and (not (null? //b))
           (eq? (car //a) (car //b))
           (@prefix? (cdr //a) (cdr //b)))))

(define (@any_prefix_in? /elt //l)
  (and (not (null? //l))
       (or (@prefix? (car //l) /elt)
           (@any_prefix_in? /elt (cdr //l)))))

(define (@test_trans
         //text
         //before
         //position
         //t/r_/num
         //data
         //after)
  (@new_program //before)
  (@clear_state)
  (@goto //position)
  (cond ((@trans? //t/r_/num)
         (@trans //t/r_/num //data)
         (cond ((equal? //after "Fail")
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin
                  (display //text)
                  (begin
                    (display " was NOT supposed to be valid !!!")
                    (newline)
                    (force-output)))
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Initial program...")
                  (newline)
                  (force-output))
                (@pp_item //before 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Final program...")
                  (newline)
                  (force-output))
                (@pp_item (@program) 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display
                    "Point of transformation application...")
                  (begin
                    (display //position)
                    (newline)
                    (force-output)))
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin (display " ") (newline) (force-output)))
               ((@equal? (@program) //after)
                (begin
                  (display //text)
                  (begin
                    (display " was OK.")
                    (newline)
                    (force-output))))
               (#t
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin
                  (display //text)
                  (begin
                    (display " FAILED !!!")
                    (newline)
                    (force-output)))
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Initial program...")
                  (newline)
                  (force-output))
                (@pp_item //before 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display
                    "Point of transformation application... ")
                  (begin
                    (display //position)
                    (newline)
                    (force-output)))
                (begin
                  (display
                    "Transformation number...               ")
                  (begin
                    (display //t/r_/num)
                    (newline)
                    (force-output)))
                (begin
                  (display
                    "User-supplied data...                  ")
                  (begin (display //data) (newline) (force-output)))
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Final program should have been...")
                  (newline)
                  (force-output))
                (@pp_item //after 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Final program actually was...")
                  (newline)
                  (force-output))
                (@pp_item (@program) 80 "")
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin (display " ") (newline) (force-output)))))
        (#t
         (cond ((equal? //after "Fail")
                (begin
                  (display //text)
                  (begin
                    (display " was OK.")
                    (newline)
                    (force-output))))
               (#t
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin
                  (display //text)
                  (begin
                    (display
                      " WAS supposed to be valid, but the test failed !!!")
                    (newline)
                    (force-output)))
                (begin
                  (display "Message: ")
                  (begin
                    (display (@fail_message))
                    (newline)
                    (force-output)))
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Initial program...")
                  (newline)
                  (force-output))
                (@pp_item (@program) 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display "Final program should have been...")
                  (newline)
                  (force-output))
                (@pp_item //after 80 "")
                (begin (display " ") (newline) (force-output))
                (begin
                  (display
                    "Point of transformation application...")
                  (begin
                    (display //position)
                    (newline)
                    (force-output)))
                (begin
                  (display
                    "----------------------------------------------")
                  (newline)
                  (force-output))
                (begin (display " ") (newline) (force-output)))))))

(define (@rp_trans)
  (let ((//d (@random 6)) (//temp 0))
    (@new_program (@rp_item //t_/statements 5 0))
    (@clear_state)
    (let ((var-save //i) (for-step 1) (for-end 5))
      (set! //i 1)
      (let for-loop ()
        (cond ((or (and (> 1 0) (<= //i for-end))
                   (and (< 1 0) (>= //i for-end)))
               (begin
                 (@goto '())
                 (let while-loop ()
                   (cond ((and (> //d 1) (@down?))
                          (begin
                            (set! //temp (@random (@size (@item))))
                            (@down_to //temp)
                            (set! //d (- //d 1)))
                          (while-loop))
                         (#t #t)))
                 (set! //temp (@what_trans '()))
                 (set! //temp
                   (let ((name //temp))
                     (if (vector? name)
                       (vector-ref
                         name
                         (- (@random
                              (if (vector? //temp)
                                (vector-length //temp)
                                (length //temp)))
                            1))
                       (list-ref
                         name
                         (- (@random
                              (if (vector? //temp)
                                (vector-length //temp)
                                (length //temp)))
                            1)))))
                 (begin (display //i) (newline) (force-output))
                 (begin
                   (display "      Position :  ")
                   (begin
                     (display (@posn))
                     (newline)
                     (force-output)))
                 (begin
                   (display "Transformation :  ")
                   (begin
                     (display (vector-ref //t/rs_/name (- //temp 1)))
                     (newline)
                     (force-output)))
                 (begin
                   (display "   Size Before :  ")
                   (begin
                     (display (@total_size (@program)))
                     (newline)
                     (force-output)))
                 (@trans //temp "")
                 (begin
                   (display "    Size After :  ")
                   (begin
                     (display (@total_size (@program)))
                     (newline)
                     (force-output)))
                 (cond ((not (@syntax_ok? (@program)))
                        (begin (display "") (newline) (force-output))
                        (begin
                          (display "Syntax Failed !!")
                          (newline)
                          (force-output))
                        (begin (display "") (newline) (force-output))
                        (@undo)
                        (begin
                          (display (@program))
                          (newline)
                          (force-output)))))
               (set! //i (+ //i for-step))
               (for-loop))
              (#t #t)))
      (set! //i var-save))
    (begin (display "") (newline) (force-output))))

(define (@test_maths)
  (cond ((= (@random 2) 1)
         (let ((//exp (@rp_expn 4)))
           (@print_wsl //exp "")
           (set! //exp (@simplify_expn //exp))
           (@print_wsl //exp "")))
        (#t
         (let ((//exp (@rp_cond 4)))
           (@print_wsl //exp "")
           (@pp_item //exp 80 "")
           (set! //exp (@simplify_cond //exp))
           (@print_wsl //exp "")))))

(define (@rp_item //type //dep //in_/a_/s)
  (let ((//result '())
        (//s 0)
        (//seq '())
        (//syn '())
        (//val '()))
    (cond ((= //type //t_/statement)
           (set! //result (@rp_stat //dep //in_/a_/s)))
          ((= //type //t_/lvalue)
           (set! //result (@rp_lval //dep)))
          ((= //type //t_/expression)
           (set! //result (@rp_expn 3)))
          ((= //type //t_/condition)
           (set! //result (@rp_cond 3)))
          (#t
           (set! //syn (@syntax //type))
           (cond ((@list_type? //type)
                  (set! //s (+ (@random 5) 1))
                  (let ((var-save //i) (for-step 1) (for-end //s))
                    (set! //i 1)
                    (let for-loop ()
                      (cond ((or (and (> 1 0) (<= //i for-end))
                                 (and (< 1 0) (>= //i for-end)))
                             (set! //seq
                               (cons (@rp_item
                                       (car //syn)
                                       (- //dep 1)
                                       //in_/a_/s)
                                     //seq))
                             (set! //i (+ //i for-step))
                             (for-loop))
                            (#t #t)))
                    (set! //i var-save)))
                 (#t
                  (let while-loop ()
                    (cond ((not (null? //syn))
                           (begin
                             (set! //seq
                               (concat
                                 //seq
                                 (list (@rp_item
                                         (car //syn)
                                         (- //dep 1)
                                         //in_/a_/s))))
                             (set! //syn (cdr //syn)))
                           (while-loop))
                          (#t #t)))))
           (set! //result (@make //type '() //seq))))
    //result))

(define (@rp_stat //dep //in_/a_/s)
  (let ((//result '())
        (//r (@random (if (> //dep 0) 16 8)))
        (//s 0)
        (//seq '())
        (//temp '()))
    (cond ((= //r 1)
           (set! //result (@make //t_/skip '() '())))
          ((= //r 2)
           (set! //result (@make //t_/exit (@random 4) '())))
          ((= //r 3)
           (cond ((= //in_/a_/s 1)
                  (set! //result
                    (@make //t_/call
                           '()
                           (list (@make //t_/name (@rp_name //dep) '())))))
                 (#t (set! //result (@make //t_/skip '() '())))))
          ((<= //r 8)
           (set! //temp
             (list //t_/abort
                   //t_/assert
                   //t_/assignment
                   //t_/pop
                   //t_/push))
           (set! //result
             (@rp_item
               (let ((name //temp))
                 (if (vector? name)
                   (vector-ref name (- (- //r 3) 1))
                   (list-ref name (- (- //r 3) 1))))
               (- //dep 1)
               //in_/a_/s)))
          ((<= //r 15)
           (set! //temp
             (list //t_/cond
                   //t_/d_/if
                   //t_/d_/do
                   //t_/floop
                   //t_/var
                   //t_/while
                   //t_/cond))
           (set! //result
             (@rp_item
               (let ((name //temp))
                 (if (vector? name)
                   (vector-ref name (- (- //r 8) 1))
                   (list-ref name (- (- //r 8) 1))))
               (- //dep 1)
               //in_/a_/s)))
          ((= //r 16)
           (set! //temp
             (list "A1" "B2" "C3" "D4" "E5" "F6"))
           (set! //s (@random 6))
           (let ((var-save //i) (for-step 1) (for-end //s))
             (set! //i 1)
             (let for-loop ()
               (cond ((or (and (> 1 0) (<= //i for-end))
                          (and (< 1 0) (>= //i for-end)))
                      (begin
                        (set! //seq
                          (concat
                            //seq
                            (list (@make //t_/action
                                         '()
                                         (list (@make //t_/name
                                                      (@make_name (car //temp))
                                                      '())
                                               (@rp_item
                                                 //t_/statements
                                                 (- //dep 1)
                                                 1))))))
                        (set! //temp (cdr //temp)))
                      (set! //i (+ //i for-step))
                      (for-loop))
                     (#t #t)))
             (set! //i var-save))
           (set! //result
             (@make //t_/a_/s
                    '()
                    (list (@make //t_/name (@make_name "A1") '())
                          (@make //t_/actions '() //seq))))))
    //result))

(define (@rp_name //dep)
  (let ((//result '())
        (//r (@random 5))
        (//temp (list "A1" "B2" "C3" "D4" "E5" "F6")))
    (set! //result
      (@make_name
        (let ((name //temp))
          (if (vector? name)
            (vector-ref name (- //r 1))
            (list-ref name (- //r 1))))))
    //result))

(define (@rp_lval //dep)
  (let ((//result '())
        (//r (@random 5))
        (//temp (list "A" "B" "C" "X" "Y")))
    (set! //result
      (@make //t_/var_/lvalue
             (@make_name
               (let ((name //temp))
                 (if (vector? name)
                   (vector-ref name (- //r 1))
                   (list-ref name (- //r 1)))))
             '()))
    //result))

(define (@rp_expn //dep)
  (let ((//result '())
        (//r (@random (if (> //dep 0) 27 17)))
        (//s 0)
        (//seq '())
        (//temp '()))
    (cond ((<= //r 7)
           (set! //temp (list "A" "B" "C" "I" "J" "X" "Y"))
           (set! //result
             (@make //t_/variable
                    (@make_name
                      (let ((name //temp))
                        (if (vector? name)
                          (vector-ref name (- //r 1))
                          (list-ref name (- //r 1)))))
                    '())))
          ((<= //r 17)
           (set! //temp (list 0 1 2 3 4 5 10 20 50 100))
           (set! //result
             (@make //t_/number
                    (let ((name //temp))
                      (if (vector? name)
                        (vector-ref name (- (- //r 7) 1))
                        (list-ref name (- (- //r 7) 1))))
                    '())))
          ((<= //r 23)
           (set! //s (+ (@random 3) 2))
           (let ((var-save //i) (for-step 1) (for-end //s))
             (set! //i 1)
             (let for-loop ()
               (cond ((or (and (> 1 0) (<= //i for-end))
                          (and (< 1 0) (>= //i for-end)))
                      (set! //seq (cons (@rp_expn (- //dep 1)) //seq))
                      (set! //i (+ //i for-step))
                      (for-loop))
                     (#t #t)))
             (set! //i var-save))
           (set! //temp
             (list //t_/plus
                   //t_/minus
                   //t_/times
                   //t_/divide
                   //t_/max
                   //t_/min))
           (set! //result
             (@make (let ((name //temp))
                      (if (vector? name)
                        (vector-ref name (- (- //r 17) 1))
                        (list-ref name (- (- //r 17) 1))))
                    '()
                    //seq)))
          ((<= //r 27)
           (set! //temp
             (list //t_/abs //t_/sgn //t_/int //t_/frac))
           (set! //result
             (@make (let ((name //temp))
                      (if (vector? name)
                        (vector-ref name (- (- //r 23) 1))
                        (list-ref name (- (- //r 23) 1))))
                    '()
                    (list (@rp_expn (- //dep 1)))))))
    //result))

(define (@rp_cond //dep)
  (let ((//result '())
        (//r (@random (if (> //dep 0) 11 6)))
        (//s 0)
        (//seq '())
        (//temp '()))
    (cond ((<= //r 6)
           (set! //temp
             (list //t_/equal
                   //t_/not_/equal
                   //t_/less
                   //t_/greater
                   //t_/less_/eq
                   //t_/greater_/eq))
           (set! //result
             (@make (let ((name //temp))
                      (if (vector? name)
                        (vector-ref name (- //r 1))
                        (list-ref name (- //r 1))))
                    '()
                    (list (@rp_expn (- //dep 1))
                          (@rp_expn (- //dep 1))))))
          ((= //r 7)
           (set! //result
             (@make //t_/not
                    '()
                    (list (@rp_cond (- //dep 1))))))
          ((<= //r 9)
           (set! //s (+ (@random 3) 2))
           (let ((var-save //i) (for-step 1) (for-end //s))
             (set! //i 1)
             (let for-loop ()
               (cond ((or (and (> 1 0) (<= //i for-end))
                          (and (< 1 0) (>= //i for-end)))
                      (set! //seq (cons (@rp_cond (- //dep 1)) //seq))
                      (set! //i (+ //i for-step))
                      (for-loop))
                     (#t #t)))
             (set! //i var-save))
           (set! //temp (list //t_/and //t_/or))
           (set! //result
             (@make (let ((name //temp))
                      (if (vector? name)
                        (vector-ref name (- (- //r 7) 1))
                        (list-ref name (- (- //r 7) 1))))
                    '()
                    //seq)))
          ((= //r 10)
           (set! //result (@make //t_/true '() '())))
          ((= //r 11)
           (set! //result (@make //t_/false '() '()))))
    //result))

(define (@find_type /type-par)
  (let ((/type-save /type))
    (set! /type /type-par)
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (cond ((equal? (@spec_type (@item)) /type)
                    (set! /fl_flag1 1))
                   ((@down?) (@down) (set! /fl_flag1 0))
                   ((@right?) (@right) (set! /fl_flag1 0))
                   ((@up?)
                    (@up)
                    (let while-loop ()
                      (cond ((and (@up?) (not (@right?))) (@up) (while-loop))
                            (#t #t)))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                   (#t (set! /fl_flag1 1)))
             (while-loop))
            (#t #t)))
    (set! /type /type-save)))

(define (@string_to_num /s)
  (let ((/r 0) (/l 0) (/d 0))
    (cond ((string? /s)
           (set! /l (string-length /s))
           (cond ((> /l 0)
                  (cond ((equal?
                           (let ((f 0)) (substring /s f (+ f 1)))
                           "-")
                         (set! /r
                           (- (@string_to_num
                                (let ((s /s))
                                  (substring s 1 (string-length s)))))))
                        (#t
                         (set! /r
                           (@string_to_num
                             (let ((f 0)) (substring /s f (+ f (- /l 1))))))
                         (set! /r (* /r 10))
                         (set! /d
                           (let ((f (- /l 1))) (substring /s f (+ f 1))))
                         (cond ((equal? /d "1") (set! /r (+ /r 1)))
                               ((equal? /d "2") (set! /r (+ /r 2)))
                               ((equal? /d "3") (set! /r (+ /r 3)))
                               ((equal? /d "4") (set! /r (+ /r 4)))
                               ((equal? /d "5") (set! /r (+ /r 5)))
                               ((equal? /d "6") (set! /r (+ /r 6)))
                               ((equal? /d "7") (set! /r (+ /r 7)))
                               ((equal? /d "8") (set! /r (+ /r 8)))
                               ((equal? /d "9") (set! /r (+ /r 9))))))))))
    /r))

(define (@hex_to_num /s)
  (let ((/r 0) (/l (string-length /s)))
    (cond ((> /l 0)
           (cond ((equal?
                    (let ((f 0)) (substring /s f (+ f 1)))
                    "-")
                  (set! /r
                    (- (@hex_to_num
                         (let ((s /s)) (substring s 1 (string-length s)))))))
                 (#t
                  (set! /r
                    (@hex_to_num
                      (let ((f 0)) (substring /s f (+ f (- /l 1))))))
                  (set! /r (* /r 16))
                  (let ((/d (let ((f (- /l 1))) (substring /s f (+ f 1)))))
                    (cond ((equal? /d "1") (set! /r (+ /r 1)))
                          ((equal? /d "2") (set! /r (+ /r 2)))
                          ((equal? /d "3") (set! /r (+ /r 3)))
                          ((equal? /d "4") (set! /r (+ /r 4)))
                          ((equal? /d "5") (set! /r (+ /r 5)))
                          ((equal? /d "6") (set! /r (+ /r 6)))
                          ((equal? /d "7") (set! /r (+ /r 7)))
                          ((equal? /d "8") (set! /r (+ /r 8)))
                          ((equal? /d "9") (set! /r (+ /r 9)))
                          ((equal? /d "A") (set! /r (+ /r 10)))
                          ((equal? /d "B") (set! /r (+ /r 11)))
                          ((equal? /d "C") (set! /r (+ /r 12)))
                          ((equal? /d "D") (set! /r (+ /r 13)))
                          ((equal? /d "E") (set! /r (+ /r 14)))
                          ((equal? /d "F") (set! /r (+ /r 15)))))))))
    /r))

(define (@hex_to_num_string /s)
  (let ((/r "") (/l (string-length /s)))
    (cond ((= /l 0) (set! /r "0"))
          ((equal?
             (let ((f 0)) (substring /s f (+ f 1)))
             "-")
           (set! /r
             (string-append
               "-"
               (@hex_to_num_string
                 (let ((s /s)) (substring s 1 (string-length s)))))))
          ((< /l 14) (set! /r (@string (@hex_to_num /s))))
          (#t (set! /r (@string (@hex_to_num /s)))))
    /r))

(define (@num_to_hex /n-par)
  (let ((/n-save /n)
        (/r "")
        (/d 0)
        (/digits "0123456789ABCDEF")
        (funct-result '()))
    (set! /n /n-par)
    (set! /d (modulo /n 16))
    (set! /r
      (concat
        (let ((f /d)) (substring /digits f (+ f 1)))
        /r))
    (set! /n (quotient /n 16))
    (let while-loop ()
      (cond ((not (= /n 0))
             (begin
               (set! /d (modulo /n 16))
               (set! /r
                 (concat
                   (let ((f /d)) (substring /digits f (+ f 1)))
                   /r))
               (set! /n (quotient /n 16)))
             (while-loop))
            (#t #t)))
    (cond ((= (modulo (string-length /r) 2) 1)
           (set! /r (string-append "0" /r))))
    (set! funct-result /r)
    (set! /n /n-save)
    funct-result))

(define (@bin_to_hex /bin)
  (let ((/hex "")
        (/n-save /n)
        (/i-save /i)
        (/digit 0)
        (/d "")
        (funct-result '()))
    (set! /n 0)
    (set! /i 0)
    (let while-loop ()
      (cond ((> (modulo (string-length /bin) 4) 0)
             (set! /bin (string-append "0" /bin))
             (while-loop))
            (#t #t)))
    (let while-loop ()
      (cond ((< /n (string-length /bin))
             (begin
               (set! /digit 0)
               (let ((var-save /i) (for-step 1) (for-end 3))
                 (set! /i 0)
                 (let for-loop ()
                   (cond ((or (and (> 1 0) (<= /i for-end))
                              (and (< 1 0) (>= /i for-end)))
                          (begin
                            (set! /digit (* /digit 2))
                            (cond ((equal?
                                     (let ((f (+ /n /i)))
                                       (substring /bin f (+ f 1)))
                                     "1")
                                   (set! /digit (+ /digit 1)))))
                          (set! /i (+ /i for-step))
                          (for-loop))
                         (#t #t)))
                 (set! /i var-save))
               (set! /d (@num_to_hex /digit))
               (set! /hex
                 (concat
                   /hex
                   (let ((f (- (string-length /d) 1)))
                     (substring /d f (+ f 1)))))
               (set! /n (+ /n 4)))
             (while-loop))
            (#t #t)))
    (set! funct-result /hex)
    (set! /n /n-save)
    (set! /i /i-save)
    funct-result))

(define (@lvalue_to_expn //i)
  (let ((//s/t (@st //i)) (/comps (@components //i)))
    (cond ((= (@gt //i) //t_/lvalue)
           (cond ((= //s/t //t_/var_/lvalue)
                  (set! //s/t //t_/variable))
                 ((= //s/t //t_/aref_/lvalue)
                  (set! //s/t //t_/aref))
                 ((= //s/t //t_/sub_/seg_/lvalue)
                  (set! //s/t //t_/sub_/seg))
                 ((= //s/t //t_/rel_/seg_/lvalue)
                  (set! //s/t //t_/rel_/seg))
                 ((= //s/t //t_/final_/seg_/lvalue)
                  (set! //s/t //t_/final_/seg))
                 ((= //s/t //t_/struct_/lvalue)
                  (set! //s/t //t_/struct))
                 ((= //s/t //t_/mem_/lvalue)
                  (set! //s/t //t_/mem))
                 ((= //s/t //t_/mem_/seg_/lvalue)
                  (set! //s/t //t_/mem_/seg))
                 ((= //s/t //t_/mem_/rel_/lvalue)
                  (set! //s/t //t_/mem_/rel))
                 (#t (@print_wsl //i "")))
           (cond ((= //s/t //t_/struct)
                  (if (vector? /comps)
                    (vector-set!
                      /comps
                      (- 2 1)
                      (@lvalue_to_expn
                        (let ((name /comps))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))))
                    (set! /comps
                      (replace-nth
                        /comps
                        2
                        (@lvalue_to_expn
                          (let ((name /comps))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1)))))))))
                 ((or (= //s/t //t_/mem)
                      (= //s/t //t_/mem_/seg)
                      (= //s/t //t_/mem_/rel))
                  #t)
                 ((not (null? /comps))
                  (if (vector? /comps)
                    (vector-set!
                      /comps
                      (- 1 1)
                      (@lvalue_to_expn
                        (let ((name /comps))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))))
                    (set! /comps
                      (replace-nth
                        /comps
                        1
                        (@lvalue_to_expn
                          (let ((name /comps))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))))))
           (set! //i (@make //s/t (@value //i) /comps))))
    //i))

(define (@expn_to_lvalue //i)
  (let ((//s/t (@st //i)) (/comps (@components //i)))
    (cond ((= (@gt //i) //t_/expression)
           (cond ((= //s/t //t_/variable)
                  (set! //s/t //t_/var_/lvalue))
                 ((= //s/t //t_/aref)
                  (set! //s/t //t_/aref_/lvalue))
                 ((= //s/t //t_/sub_/seg)
                  (set! //s/t //t_/sub_/seg_/lvalue))
                 ((= //s/t //t_/rel_/seg)
                  (set! //s/t //t_/rel_/seg_/lvalue))
                 ((= //s/t //t_/final_/seg)
                  (set! //s/t //t_/final_/seg_/lvalue))
                 ((= //s/t //t_/struct)
                  (set! //s/t //t_/struct_/lvalue))
                 ((= //s/t //t_/mem)
                  (set! //s/t //t_/mem_/lvalue))
                 ((= //s/t //t_/mem_/seg)
                  (set! //s/t //t_/mem_/seg_/lvalue))
                 ((= //s/t //t_/mem_/rel)
                  (set! //s/t //t_/mem_/rel_/lvalue)))
           (cond ((= //s/t //t_/struct_/lvalue)
                  (if (vector? /comps)
                    (vector-set!
                      /comps
                      (- 2 1)
                      (@expn_to_lvalue
                        (let ((name /comps))
                          (if (vector? name)
                            (vector-ref name (- 2 1))
                            (list-ref name (- 2 1))))))
                    (set! /comps
                      (replace-nth
                        /comps
                        2
                        (@expn_to_lvalue
                          (let ((name /comps))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1)))))))))
                 ((or (= //s/t //t_/mem_/lvalue)
                      (= //s/t //t_/mem_/seg_/lvalue)
                      (= //s/t //t_/mem_/rel_/lvalue))
                  #t)
                 ((not (null? /comps))
                  (if (vector? /comps)
                    (vector-set!
                      /comps
                      (- 1 1)
                      (@expn_to_lvalue
                        (let ((name /comps))
                          (if (vector? name)
                            (vector-ref name (- 1 1))
                            (list-ref name (- 1 1))))))
                    (set! /comps
                      (replace-nth
                        /comps
                        1
                        (@expn_to_lvalue
                          (let ((name /comps))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1))))))))))
           (set! //i (@make //s/t (@value //i) /comps))))
    //i))

(define (@word_in_string? /word /str)
  (>= (let* ((s (string-append (string-append " " /str) " "))
             (start 0)
             (index-result
               (substring?
                 (string-append (string-append " " /word) " ")
                 (substring s start (string-length s)))))
        (if index-result (+ start index-result) -1))
      0))

(define (@join_removing_dups /glue /l)
  (if (null? /l)
    ""
    (if (= (if (vector? /l) (vector-length /l) (length /l))
           1)
      (let ((name /l))
        (if (vector? name)
          (vector-ref name (- 1 1))
          (list-ref name (- 1 1))))
      (if (member (car /l) (cdr /l))
        (@join_removing_dups /glue (cdr /l))
        (concat
          (concat
            (let ((name /l))
              (if (vector? name)
                (vector-ref name (- 1 1))
                (list-ref name (- 1 1))))
            /glue)
          (@join_removing_dups /glue (cdr /l)))))))

(define (@join /glue /l)
  (if (null? /l)
    ""
    (if (= (if (vector? /l) (vector-length /l) (length /l))
           1)
      (let ((name /l))
        (if (vector? name)
          (vector-ref name (- 1 1))
          (list-ref name (- 1 1))))
      (concat
        (concat
          (let ((name /l))
            (if (vector? name)
              (vector-ref name (- 1 1))
              (list-ref name (- 1 1))))
          /glue)
        (@join /glue (cdr /l))))))

(define (@struct_to_string //l)
  (if (sequence? //l)
    (string-append
      (string-append
        "("
        (@join " "
               (let ((l //l) (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result
                            (cons (@struct_to_string (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result))))
      ")")
    (@string //l)))

(define (@split /str-par)
  (let ((/str-save /str)
        (//r '())
        (/p 0)
        (/q (let* ((s /str-par)
                   (start 0)
                   (index-result
                     (substring?
                       " "
                       (substring s start (string-length s)))))
              (if index-result (+ start index-result) -1)))
        (funct-result '()))
    (set! /str /str-par)
    (let while-loop ()
      (cond ((>= /q 0)
             (begin
               (cond ((> /q /p)
                      (set! //r
                        (cons (let ((f /p)) (substring /str f (+ f (- /q /p))))
                              //r))))
               (set! /p (+ /q 1))
               (set! /q
                 (let* ((s /str)
                        (start (+ /q 1))
                        (index-result
                          (substring?
                            " "
                            (substring s start (string-length s)))))
                   (if index-result (+ start index-result) -1))))
             (while-loop))
            (#t #t)))
    (cond ((< /p (string-length /str))
           (set! //r
             (cons (let ((s /str))
                     (substring s /p (string-length s)))
                   //r))))
    (set! funct-result (reverse //r))
    (set! /str /str-save)
    funct-result))

(define (@ends_with? /str-par /extn)
  (let ((/str-save /str)
        (//r 0)
        (/len (string-length /extn))
        (funct-result '()))
    (set! /str /str-par)
    (cond ((number? /str) (set! /str (@n_string /str))))
    (cond ((and (>= (string-length /str) /len)
                (equal?
                  (let ((f (- (string-length /str) /len)))
                    (substring /str f (+ f /len)))
                  /extn))
           (set! //r 1)))
    (set! funct-result (= //r 1))
    (set! /str /str-save)
    funct-result))

(define (@starts_with? /str-par /extn)
  (let ((/str-save /str)
        (//r 0)
        (/len (string-length /extn))
        (funct-result '()))
    (set! /str /str-par)
    (cond ((number? /str) (set! /str (@n_string /str))))
    (cond ((and (>= (string-length /str) /len)
                (equal?
                  (let ((f 0)) (substring /str f (+ f /len)))
                  /extn))
           (set! //r 1)))
    (set! funct-result (= //r 1))
    (set! /str /str-save)
    funct-result))

(define (@starts_with_plus_num? /name-par /extn)
  (let ((/name-save /name)
        (//r 0)
        (/len (string-length /extn))
        (funct-result '()))
    (set! /name /name-par)
    (cond ((and (number? /name) (> /name 0))
           (set! /name (@n_string /name))
           (cond ((and (>= (string-length /name) (+ /len 3))
                       (equal?
                         (let ((f 0)) (substring /name f (+ f /len)))
                         /extn)
                       (@digits?
                         (let ((f (- (string-length /name) 3)))
                           (substring /name f (+ f 3)))))
                  (set! //r 1)))))
    (set! funct-result (= //r 1))
    (set! /name /name-save)
    funct-result))

(define (@ends_with_underscore_digits? /name-par)
  (let ((/name-save /name)
        (//r 0)
        (/p 0)
        (funct-result '()))
    (set! /name /name-par)
    (cond ((and (number? /name) (> /name 0))
           (set! /name (@n_string /name))
           (set! /p (- (string-length /name) 1))
           (let while-loop ()
             (cond ((and (> /p 0)
                         (@digit?
                           (let ((f /p)) (substring /name f (+ f 1)))))
                    (set! /p (- /p 1))
                    (while-loop))
                   (#t #t)))
           (cond ((and (> /p 1) (< /p (- (string-length /name) 1)))
                  (cond ((equal?
                           (let ((f (- /p 1))) (substring /name f (+ f 2)))
                           "__")
                         (set! //r 1)))))))
    (set! funct-result (= //r 1))
    (set! /name /name-save)
    funct-result))

(define (@trim_underscore_number /str-par /n-par)
  (let ((/n-save /n)
        (/str-save /str)
        (funct-result '()))
    (set! /n /n-par)
    (set! /str /str-par)
    (let ((/p (- (string-length /str) 1)))
      (let while-loop ()
        (cond ((and (>= /p 0)
                    (@digit?
                      (let ((f /p)) (substring /str f (+ f 1)))))
               (set! /p (- /p 1))
               (while-loop))
              (#t #t)))
      (set! /n
        (@string_to_num
          (let ((s /str))
            (substring s (+ /p 1) (string-length s)))))
      (set! /str
        (let ((f 0)) (substring /str f (+ f (+ /p 1)))))
      (cond ((> /p 1)
             (cond ((equal?
                      (let ((f (- /p 1))) (substring /str f (+ f 2)))
                      "__")
                    (set! /str
                      (let ((f 0)) (substring /str f (+ f (- /p 1))))))))))
    (set! funct-result (list /str /n))
    (set! /n /n-save)
    (set! /str /str-save)
    funct-result))

(define (@repeat /str /n)
  (if (<= /n 0)
    ""
    (concat /str (@repeat /str (- /n 1)))))

(define (@sort_list //l)
  (let ((//r '())
        (/len (if (vector? //l)
                (vector-length //l)
                (length //l))))
    (cond ((<= /len 1) (set! //r //l))
          ((= /len 2)
           (cond ((@sort_less?
                    (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 1 1))
                        (list-ref name (- 1 1))))
                    (let ((name //l))
                      (if (vector? name)
                        (vector-ref name (- 2 1))
                        (list-ref name (- 2 1)))))
                  (set! //r //l))
                 (#t
                  (set! //r
                    (list (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1))))
                          (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1)))))))))
          (#t
           (let ((/mid (quotient /len 2)))
             (set! //r
               (@sort_merge
                 (@sort_list (@sub_seg //l 1 /mid))
                 (@sort_list (@final_seg //l (+ /mid 1))))))))
    //r))

(define (@sort_merge //l1 //l2)
  (let ((//r '()))
    (cond ((null? //l1) (set! //r //l2))
          ((null? //l2) (set! //r //l1))
          ((@sort_less? (car //l1) (car //l2))
           (set! //r
             (cons (car //l1) (@sort_merge (cdr //l1) //l2))))
          (#t
           (set! //r
             (cons (car //l2) (@sort_merge //l1 (cdr //l2))))))
    //r))

(define (@sort_less? /a /b)
  (let ((//r 0))
    (cond ((sequence? /a)
           (cond ((not (sequence? /b)) (set! //r 0))
                 ((null? /a) (set! //r 1))
                 ((null? /b) (set! //r 0))
                 ((equal? (car /a) (car /b))
                  (cond ((@sort_less? (cdr /a) (cdr /b)) (set! //r 1))
                        (#t (set! //r 0))))
                 ((@sort_less? (car /a) (car /b)) (set! //r 1))
                 (#t (set! //r 0))))
          ((sequence? /b) (set! //r 1))
          ((string<?
             (@name_or_num_string /a)
             (@name_or_num_string /b))
           (set! //r 1))
          (#t (set! //r 0)))
    (= //r 1)))

(define (@sort_num //l)
  (let ((//r '())
        (/len (if (vector? //l)
                (vector-length //l)
                (length //l))))
    (cond ((<= /len 1) (set! //r //l))
          ((= /len 2)
           (cond ((< (let ((name //l))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1))))
                     (let ((name //l))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1)))))
                  (set! //r //l))
                 (#t
                  (set! //r
                    (list (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 2 1))
                              (list-ref name (- 2 1))))
                          (let ((name //l))
                            (if (vector? name)
                              (vector-ref name (- 1 1))
                              (list-ref name (- 1 1)))))))))
          (#t
           (let ((/mid (quotient /len 2)))
             (set! //r
               (@sort_merge_num
                 (@sort_num (@sub_seg //l 1 /mid))
                 (@sort_num (@final_seg //l (+ /mid 1))))))))
    //r))

(define (@sort_merge_num //l1 //l2)
  (let ((//r '()))
    (cond ((null? //l1) (set! //r //l2))
          ((null? //l2) (set! //r //l1))
          ((< (car //l1) (car //l2))
           (set! //r
             (cons (car //l1)
                   (@sort_merge_num (cdr //l1) //l2))))
          (#t
           (set! //r
             (cons (car //l2)
                   (@sort_merge_num //l1 (cdr //l2))))))
    //r))

(set! //swap_/case 1)

(define (@swap_case /obj)
  (if (= //swap_/case 1)
    (string-swapcase (@n_string /obj))
    (@n_string /obj)))

(define (@upper_case /obj)
  (if (string? /obj)
    (my-string-upcase /obj)
    (my-string-upcase (@n_string /obj))))

(define (@lower_case /obj)
  (if (string? /obj)
    (my-string-downcase /obj)
    (my-string-downcase (@n_string /obj))))

(set! //output_/stack '())

(set! //output_/port //standard_/output_/port)

(define (@write_to /file)
  (set! //output_/stack
    (cons (list //output_/port
                //output_/line
                //output_/column
                /file)
          //output_/stack))
  (set! //output_/line 0)
  (set! //output_/column 0)
  (set! //output_/port
    (if (equal? /file "")
      //standard_/output_/port
      (@open_output_file /file))))

(define (@end_write)
  (cond ((null? //output_/stack)
         (error "@End_Write called with no corresponding @Write_To"))
        (#t
         (cond ((not (equal?
                       (let ((name (let ((name //output_/stack))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1))))
                       ""))
                (@close_output_port //output_/port)))
         (set! //output_/port
           (let ((name (let ((name //output_/stack))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))))
             (if (vector? name)
               (vector-ref name (- 1 1))
               (list-ref name (- 1 1)))))
         (set! //output_/line
           (let ((name (let ((name //output_/stack))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))))
             (if (vector? name)
               (vector-ref name (- 2 1))
               (list-ref name (- 2 1)))))
         (set! //output_/column
           (let ((name (let ((name //output_/stack))
                         (if (vector? name)
                           (vector-ref name (- 1 1))
                           (list-ref name (- 1 1))))))
             (if (vector? name)
               (vector-ref name (- 3 1))
               (list-ref name (- 3 1)))))
         (set! //output_/stack (cdr //output_/stack)))))

(set! //output_/line 0)

(set! //output_/column 0)

(define (@ws /string)
  (set! //output_/column
    (+ //output_/column (string-length /string)))
  (@write /string //output_/port))

(define (@wl /string)
  (set! //output_/line (+ //output_/line 1))
  (set! //output_/column 0)
  (@write_line /string //output_/port))

(define (@wn /n-par)
  (let ((/n-save /n))
    (set! /n /n-par)
    (cond ((< /n 0) (@ws "-") (@wn (- /n)))
          ((> /n 10000)
           (@wn (quotient /n 10000))
           (set! /n (modulo /n 10000))
           (let ((/m 1000))
             (@ws (@string (quotient /n /m)))
             (let while-loop ()
               (cond ((not (= /m 1))
                      (begin
                        (set! /n (modulo /n /m))
                        (set! /m (quotient /m 10))
                        (@ws (@string (quotient /n /m))))
                      (while-loop))
                     (#t #t)))))
          (#t (@ws (@string /n))))
    (set! /n /n-save)))

(define (@char_in_str? /str /n /valid)
  (and (> (string-length /str) /n)
       (>= (let* ((s /valid)
                  (start 0)
                  (index-result
                    (substring?
                      (let ((f /n)) (substring /str f (+ f 1)))
                      (substring s start (string-length s)))))
             (if index-result (+ start index-result) -1))
           0)))

(define (@digit? /c)
  (>= (let* ((s "0123456789")
             (start 0)
             (index-result
               (substring?
                 /c
                 (substring s start (string-length s)))))
        (if index-result (+ start index-result) -1))
      0))

(define (@digits? /s)
  (or (= (string-length /s) 0)
      (and (@digit? (let ((f 0)) (substring /s f (+ f 1))))
           (@digits?
             (let ((s /s)) (substring s 1 (string-length s)))))))

(define (@hex? /c)
  (>= (let* ((s "0123456789ABCDEFabcdef")
             (start 0)
             (index-result
               (substring?
                 /c
                 (substring s start (string-length s)))))
        (if index-result (+ start index-result) -1))
      0))

(define (@all_hex? /s)
  (or (= (string-length /s) 0)
      (and (@hex? (let ((f 0)) (substring /s f (+ f 1))))
           (@all_hex?
             (let ((s /s)) (substring s 1 (string-length s)))))))

(define (@strip_char /c /str)
  (let ((//r "") (/p 0))
    (set! /p
      (let* ((s /str)
             (start 0)
             (index-result
               (substring?
                 /c
                 (substring s start (string-length s)))))
        (if index-result (+ start index-result) -1)))
    (let while-loop ()
      (cond ((>= /p 0)
             (begin
               (set! //r
                 (concat
                   //r
                   (let ((f 0)) (substring /str f (+ f /p)))))
               (set! /str
                 (let ((s /str))
                   (substring s (+ /p 1) (string-length s))))
               (set! /p
                 (let* ((s /str)
                        (start 0)
                        (index-result
                          (substring?
                            /c
                            (substring s start (string-length s)))))
                   (if index-result (+ start index-result) -1))))
             (while-loop))
            (#t #t)))
    (concat //r /str)))

(define (@goto_body)
  (let ((/posn (@posn)) (/name-save /name))
    (set! /name (@v (@i)))
    (let while-loop ()
      (cond ((and (@up?) (not (= (@st (@i)) //t_/actions)))
             (@up)
             (while-loop))
            (#t #t)))
    (cond ((= (@st (@i)) //t_/actions)
           (@down)
           (let while-loop ()
             (cond ((and (@right?)
                         (not (equal? /name (@v (list-ref (@i) (+ 1 1))))))
                    (@right)
                    (while-loop))
                   (#t #t)))))
    (cond ((or (not (= (@st (@i)) //t_/action))
               (not (equal? (@v (list-ref (@i) (+ 1 1))) /name)))
           (@goto /posn)))
    (set! /name /name-save)))

(define (@transitive_closure /succs-par)
  (let ((/succs-save /succs)
        (//r (my-make-hash-table 16))
        (/elts (@hash_keys /succs-par))
        (/graph (my-make-hash-table 16))
        (funct-result '()))
    (set! /succs /succs-par)
    (cond (#f
           (begin
             (display "Transitive_Closure input: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash /succs /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (let ((var-save /i) (seq-save /elts))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /i (car for-tmp))
               (let ((var-save /j) (seq-save (gethash /succs /i)))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /j (car for-tmp))
                          (puthash /graph (list /i /j) 1)
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /j var-save))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /i var-save))
    (let ((var-save /k) (seq-save /elts))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /k (car for-tmp))
               (let ((var-save /i) (seq-save /elts))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /i (car for-tmp))
                          (let ((var-save /j) (seq-save /elts))
                            (if (vector? seq-save)
                              (set! seq-save (vector-elts seq-save)))
                            (let for-in-loop ((for-tmp seq-save))
                              (cond ((not (null? for-tmp))
                                     (set! /j (car for-tmp))
                                     (cond ((and (not (null? (gethash
                                                               /graph
                                                               (list /k /j))))
                                                 (not (null? (gethash
                                                               /graph
                                                               (list /i /k)))))
                                            (puthash /graph (list /i /j) 1)))
                                     (for-in-loop (cdr for-tmp)))
                                    (#t #t)))
                            (set! /j var-save))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /i var-save))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /k var-save))
    (let ((var-save /i) (seq-save /elts))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /i (car for-tmp))
               (let ((var-save /j) (seq-save /elts))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /j (car for-tmp))
                          (cond ((not (null? (gethash /graph (list /i /j))))
                                 (puthash //r /i (cons /j (gethash //r /i)))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /j var-save))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /i var-save))
    (cond (#f
           (begin
             (display "Transitive_Closure output: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash //r /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (set! funct-result //r)
    (set! /succs /succs-save)
    funct-result))

(define (@transitive_closure_simple /succs-par)
  (let ((/succs-save /succs)
        (//r (my-make-hash-table 16))
        (/elts (@hash_keys /succs-par))
        (/change 0)
        (funct-result '()))
    (set! /succs /succs-par)
    (cond (#t
           (begin
             (display "Transitive_Closure input: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash /succs /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (let ((var-save /elt) (seq-save /elts))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /elt (car for-tmp))
               (puthash
                 //r
                 /elt
                 (@make_set (cons /elt (gethash /succs /elt))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /elt var-save))
    (set! /change 0)
    (let ((var-save /i) (seq-save /elts))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /i (car for-tmp))
               (let ((var-save /j) (seq-save (gethash //r /i)))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /j (car for-tmp))
                          (cond ((not (@set_subset?
                                        (gethash //r /j)
                                        (gethash //r /i)))
                                 (set! /change 1)
                                 (puthash
                                   //r
                                   /i
                                   (@set_union
                                     (gethash //r /i)
                                     (gethash //r /j)))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /j var-save))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /i var-save))
    (let while-loop ()
      (cond ((not (= /change 0))
             (begin
               (set! /change 0)
               (let ((var-save /i) (seq-save /elts))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /i (car for-tmp))
                          (let ((var-save /j) (seq-save (gethash //r /i)))
                            (if (vector? seq-save)
                              (set! seq-save (vector-elts seq-save)))
                            (let for-in-loop ((for-tmp seq-save))
                              (cond ((not (null? for-tmp))
                                     (set! /j (car for-tmp))
                                     (cond ((not (@set_subset?
                                                   (gethash //r /j)
                                                   (gethash //r /i)))
                                            (set! /change 1)
                                            (puthash
                                              //r
                                              /i
                                              (@set_union
                                                (gethash //r /i)
                                                (gethash //r /j)))))
                                     (for-in-loop (cdr for-tmp)))
                                    (#t #t)))
                            (set! /j var-save))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /i var-save)))
             (while-loop))
            (#t #t)))
    (cond (#t
           (begin
             (display "Transitive_Closure output: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash //r /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (set! funct-result //r)
    (set! /succs /succs-save)
    funct-result))

(define (@transitive_closure_new /succs-par)
  (let ((/succs-save /succs)
        (//r (my-make-hash-table 16))
        (//c-save //c)
        (//s/c-save //s/c)
        (/root-save /root)
        (/dfs-save /dfs)
        (/dfs_num-save /dfs_num)
        (/nstack-save /nstack)
        (/cstack-save /cstack)
        (/hsaved-save /hsaved)
        (//succ-save //succ)
        (//elts-save //elts)
        (funct-result '()))
    (set! /succs /succs-par)
    (set! //c '())
    (set! //s/c (my-make-hash-table 16))
    (set! /root (my-make-hash-table 16))
    (set! /dfs (my-make-hash-table 16))
    (set! /dfs_num 1)
    (set! /nstack '())
    (set! /cstack '())
    (set! /hsaved (my-make-hash-table 16))
    (set! //succ (my-make-hash-table 16))
    (set! //elts (my-make-hash-table 16))
    (cond (#f
           (begin
             (display "Transitive_Closure input: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display (@n_string /v))
                        (begin
                          (display " --> ")
                          (begin
                            (display
                              (let ((l (gethash /succs /v)) (map-result '()))
                                (let while-loop ()
                                  (cond ((not (null? l))
                                         (set! map-result
                                           (cons (@n_string (car l))
                                                 map-result))
                                         (set! l (cdr l))
                                         (while-loop))
                                        (#t #t)))
                                (reverse map-result)))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (cond (#t
           (begin
             (display "Transitive_Closure input: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash /succs /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (let ((var-save /v) (seq-save (@hash_keys /succs)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /v (car for-tmp))
               (cond ((null? (gethash /dfs /v)) (@comp_tc /v)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /v var-save))
    (cond (#f
           (begin
             (display "Strong Components:")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys //elts)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display (@n_string /v))
                        (begin
                          (display " --> ")
                          (begin
                            (display
                              (let ((l (gethash //elts /v)) (map-result '()))
                                (let while-loop ()
                                  (cond ((not (null? l))
                                         (set! map-result
                                           (cons (@n_string (car l))
                                                 map-result))
                                         (set! l (cdr l))
                                         (while-loop))
                                        (#t #t)))
                                (reverse map-result)))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (cond (#t
           (begin
             (display "Strong Components:")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys //elts)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash //elts /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (let ((var-save /v) (seq-save (@hash_keys //elts)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /v (car for-tmp))
               (begin
                 (let ((var-save /w) (seq-save (gethash //succ /v)))
                   (if (vector? seq-save)
                     (set! seq-save (vector-elts seq-save)))
                   (let for-in-loop ((for-tmp seq-save))
                     (cond ((not (null? for-tmp))
                            (set! /w (car for-tmp))
                            (begin
                              (begin
                                (display "R.(")
                                (begin
                                  (display /v)
                                  (begin
                                    (display ") := ")
                                    (begin
                                      (display (gethash //elts /w))
                                      (begin
                                        (display " ++ ")
                                        (begin
                                          (display (gethash //r /v))
                                          (newline)
                                          (force-output)))))))
                              (puthash
                                //r
                                /v
                                (concat (gethash //elts /w) (gethash //r /v))))
                            (for-in-loop (cdr for-tmp)))
                           (#t #t)))
                   (set! /w var-save))
                 (puthash //r /v (@make_set (gethash //r /v))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /v var-save))
    (let ((var-save /v) (seq-save (@hash_keys /succs)))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /v (car for-tmp))
               (puthash //r /v (gethash //r (gethash //s/c /v)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /v var-save))
    (cond (#f
           (begin
             (display "Transitive_Closure output: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display (@n_string /v))
                        (begin
                          (display " --> ")
                          (begin
                            (display
                              (let ((l (gethash //r /v)) (map-result '()))
                                (let while-loop ()
                                  (cond ((not (null? l))
                                         (set! map-result
                                           (cons (@n_string (car l))
                                                 map-result))
                                         (set! l (cdr l))
                                         (while-loop))
                                        (#t #t)))
                                (reverse map-result)))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (cond (#t
           (begin
             (display "Transitive_Closure output: ")
             (newline)
             (force-output))
           (let ((var-save /v) (seq-save (@hash_keys /succs)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /v (car for-tmp))
                      (begin
                        (display /v)
                        (begin
                          (display " --> ")
                          (begin
                            (display (gethash //r /v))
                            (newline)
                            (force-output))))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /v var-save))))
    (set! funct-result //r)
    (set! /succs /succs-save)
    (set! //c //c-save)
    (set! //s/c //s/c-save)
    (set! /root /root-save)
    (set! /dfs /dfs-save)
    (set! /dfs_num /dfs_num-save)
    (set! /nstack /nstack-save)
    (set! /cstack /cstack-save)
    (set! /hsaved /hsaved-save)
    (set! //succ //succ-save)
    (set! //elts //elts-save)
    funct-result))

(define (@comp_tc /v-par)
  (let ((/v-save /v))
    (set! /v /v-par)
    (let ((/forward_edge 0) (//x '()))
      (puthash /dfs /v /dfs_num)
      (set! /dfs_num (+ /dfs_num 1))
      (puthash /root /v /v)
      (puthash //s/c /v '())
      (set! /nstack (cons /v /nstack))
      (puthash
        /hsaved
        /v
        (if (vector? /cstack)
          (vector-length /cstack)
          (length /cstack)))
      (let ((var-save /w) (seq-save (gethash /succs /v)))
        (if (vector? seq-save)
          (set! seq-save (vector-elts seq-save)))
        (let for-in-loop ((for-tmp seq-save))
          (cond ((not (null? for-tmp))
                 (set! /w (car for-tmp))
                 (begin
                   (cond ((and (not (null? (gethash /dfs /w)))
                               (> (gethash /dfs /w) (gethash /dfs /v)))
                          (set! /forward_edge 1)))
                   (begin
                     (display "forward_edge ")
                     (begin
                       (display /v)
                       (begin
                         (display " -> ")
                         (begin
                           (display /w)
                           (begin
                             (display " = ")
                             (begin
                               (display /forward_edge)
                               (newline)
                               (force-output)))))))
                   (cond ((null? (gethash /dfs /w)) (@comp_tc /w)))
                   (cond ((null? (gethash //s/c /w))
                          (cond ((< (gethash /dfs (gethash /root /w))
                                    (gethash /dfs (gethash /root /v)))
                                 (puthash /root /v (gethash /root /w)))))
                         ((= /forward_edge 0)
                          (set! /cstack (cons (gethash //s/c /w) /cstack)))))
                 (for-in-loop (cdr for-tmp)))
                (#t #t)))
        (set! /w var-save))
      (cond ((equal? (gethash /root /v) /v)
             (set! //c /v)
             (cond ((and (equal? (car /nstack) /v)
                         (not (member /v (gethash /succs /v))))
                    (puthash //succ //c '()))
                   (#t (puthash //succ //c (list //c))))
             (let while-loop ()
               (cond ((not (= (if (vector? /cstack)
                                (vector-length /cstack)
                                (length /cstack))
                              (gethash /hsaved /v)))
                      (begin
                        (set! //x (car /cstack))
                        (set! /cstack (cdr /cstack))
                        (cond ((not (member //x (gethash //succ //c)))
                               (puthash
                                 //succ
                                 //c
                                 (@set_union
                                   (gethash //succ //c)
                                   (@set_union
                                     (list //x)
                                     (gethash //succ //x)))))))
                      (while-loop))
                     (#t #t)))
             (set! /w (car /nstack))
             (set! /nstack (cdr /nstack))
             (begin
               (display "Inserting ")
               (begin
                 (display /w)
                 (begin
                   (display " into component ")
                   (begin (display //c) (newline) (force-output)))))
             (puthash
               //elts
               //c
               (cons /w (gethash //elts //c)))
             (puthash //s/c /w //c)
             (let while-loop ()
               (cond ((not (equal? /v /w))
                      (begin
                        (set! /w (car /nstack))
                        (set! /nstack (cdr /nstack))
                        (begin
                          (display "Inserting ")
                          (begin
                            (display /w)
                            (begin
                              (display " into component ")
                              (begin (display //c) (newline) (force-output)))))
                        (puthash
                          //elts
                          //c
                          (cons /w (gethash //elts //c)))
                        (puthash //s/c /w //c))
                      (while-loop))
                     (#t #t))))))
    (set! /v /v-save)))

(define (@breadth_first_search /start /succs-par)
  (let ((/succs-save /succs)
        (//r '())
        (/fringe (list /start))
        (/done (my-make-hash-table 16))
        (/node '())
        (funct-result '()))
    (set! /succs /succs-par)
    (let while-loop ()
      (cond ((not (null? /fringe))
             (begin
               (set! /node (car /fringe))
               (set! /fringe (cdr /fringe))
               (set! //r (cons /node //r))
               (let ((var-save /succ)
                     (seq-save
                       (@sort_num
                         (let ((name /succs))
                           (if (vector? name)
                             (vector-ref name (- /node 1))
                             (list-ref name (- /node 1)))))))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /succ (car for-tmp))
                          (cond ((null? (gethash /done /succ))
                                 (puthash /done /succ 1)
                                 (set! /fringe (concat /fringe (list /succ)))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /succ var-save)))
             (while-loop))
            (#t #t)))
    (set! funct-result (reverse //r))
    (set! /succs /succs-save)
    funct-result))

(define (@spaces? /str)
  (or (equal? /str "")
      (and (equal?
             (let ((f 0)) (substring /str f (+ f 1)))
             " ")
           (@spaces?
             (let ((s /str))
               (substring s 1 (string-length s)))))))

(define (@replace //i /new /old)
  (let ((//r //i))
    (cond ((@equal? //i /old) (set! //r /new))
          ((@cs? //i)
           (let ((//l '()))
             (let ((var-save /comp) (seq-save (@cs //i)))
               (if (vector? seq-save)
                 (set! seq-save (vector-elts seq-save)))
               (let for-in-loop ((for-tmp seq-save))
                 (cond ((not (null? for-tmp))
                        (set! /comp (car for-tmp))
                        (set! //l (cons (@replace /comp /new /old) //l))
                        (for-in-loop (cdr for-tmp)))
                       (#t #t)))
               (set! /comp var-save))
             (set! //r (@make (@st //i) '() (reverse //l))))))
    //r))

(define (@inc_hash /key /tab)
  (cond ((null? (gethash /tab /key))
         (puthash /tab /key 1))
        (#t
         (puthash /tab /key (+ (gethash /tab /key) 1))))
  /tab)

(define (@topological_sort
         /nodes
         /succs-par
         /preds
         /order)
  (let ((/succs-save /succs)
        (/todo (@make_set /nodes))
        (/mins '())
        (/numpreds (my-make-hash-table 16))
        (/min '())
        (//r '())
        (funct-result '()))
    (set! /succs /succs-par)
    (let ((var-save /name) (seq-save /nodes))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /name (car for-tmp))
               (cond ((null? (gethash /order /name))
                      (puthash /order /name 0)))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /name var-save))
    (let ((var-save /name) (seq-save /todo))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /name (car for-tmp))
               (begin
                 (puthash
                   /numpreds
                   /name
                   (if (vector? (gethash /preds /name))
                     (vector-length (gethash /preds /name))
                     (length (gethash /preds /name))))
                 (cond ((= (gethash /numpreds /name) 0)
                        (set! /mins (@set_union (list /name) /mins)))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /name var-save))
    (let while-loop ()
      (cond ((not (null? /todo))
             (begin
               (cond ((not (null? /mins))
                      (set! /min (car /mins))
                      (let ((var-save /elt) (seq-save (cdr /mins)))
                        (if (vector? seq-save)
                          (set! seq-save (vector-elts seq-save)))
                        (let for-in-loop ((for-tmp seq-save))
                          (cond ((not (null? for-tmp))
                                 (set! /elt (car for-tmp))
                                 (cond ((< (gethash /order /elt)
                                           (gethash /order /min))
                                        (set! /min /elt)))
                                 (for-in-loop (cdr for-tmp)))
                                (#t #t)))
                        (set! /elt var-save))
                      (set! /mins (@set_difference /mins (list /min))))
                     (#t
                      (begin
                        (display "Recursive call found!!!")
                        (newline)
                        (force-output))
                      (set! /min (car /todo))
                      (let ((var-save /elt) (seq-save (cdr /todo)))
                        (if (vector? seq-save)
                          (set! seq-save (vector-elts seq-save)))
                        (let for-in-loop ((for-tmp seq-save))
                          (cond ((not (null? for-tmp))
                                 (set! /elt (car for-tmp))
                                 (cond ((or (< (gethash /numpreds /elt)
                                               (gethash /numpreds /min))
                                            (and (equal?
                                                   (gethash /numpreds /elt)
                                                   (gethash /numpreds /min))
                                                 (< (gethash /order /elt)
                                                    (gethash /order /min))))
                                        (set! /min /elt)))
                                 (for-in-loop (cdr for-tmp)))
                                (#t #t)))
                        (set! /elt var-save))
                      (puthash /numpreds /min 0)))
               (set! //r (cons /min //r))
               (set! /todo (@set_difference /todo (list /min)))
               (let ((var-save /elt)
                     (seq-save (gethash /succs /min)))
                 (if (vector? seq-save)
                   (set! seq-save (vector-elts seq-save)))
                 (let for-in-loop ((for-tmp seq-save))
                   (cond ((not (null? for-tmp))
                          (set! /elt (car for-tmp))
                          (cond ((not (null? (gethash /numpreds /elt)))
                                 (puthash
                                   /numpreds
                                   /elt
                                   (- (gethash /numpreds /elt) 1))
                                 (cond ((= (gethash /numpreds /elt) 0)
                                        (set! /mins
                                          (@set_union (list /elt) /mins))))))
                          (for-in-loop (cdr for-tmp)))
                         (#t #t)))
                 (set! /elt var-save)))
             (while-loop))
            (#t #t)))
    (set! funct-result (reverse //r))
    (set! /succs /succs-save)
    funct-result))

(define (@sort_test /type-par //n-par /k-par)
  (let ((/k-save /k) (//n-save //n) (/type-save /type))
    (set! /k /k-par)
    (set! //n //n-par)
    (set! /type /type-par)
    (let ((//a-save //a)
          (/t 0)
          (/mod (integer-expt 2 27)))
      (set! //a (make-vector //n 0))
      (begin
        (display "Initialising... ")
        (begin
          (display (@runtime))
          (newline)
          (force-output)))
      (let ((/x (@random 100000))
            (/m 1664525)
            (/c -59837601))
        (let ((var-save /i) (for-step 1) (for-end //n))
          (set! /i 1)
          (let for-loop ()
            (cond ((or (and (> 1 0) (<= /i for-end))
                       (and (< 1 0) (>= /i for-end)))
                   (begin
                     (if (vector? //a)
                       (vector-set! //a (- /i 1) /x)
                       (set! //a (replace-nth //a /i /x)))
                     (set! /x (modulo (+ (* /m /x) /c) /mod)))
                   (set! /i (+ /i for-step))
                   (for-loop))
                  (#t #t)))
          (set! /i var-save)))
      (let ((var-save /i) (for-step 1) (for-end //n))
        (set! /i 1)
        (let for-loop ()
          (cond ((or (and (> 1 0) (<= /i for-end))
                     (and (< 1 0) (>= /i for-end)))
                 (if (vector? //a)
                   (vector-set!
                     //a
                     (- /i 1)
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /i 1))
                         (list-ref name (- /i 1)))))
                   (set! //a
                     (replace-nth
                       //a
                       /i
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /i 1))
                           (list-ref name (- /i 1)))))))
                 (set! /i (+ /i for-step))
                 (for-loop))
                (#t #t)))
        (set! /i var-save))
      (begin
        (display "Starting... ")
        (begin
          (display (@runtime))
          (newline)
          (force-output)))
      (set! /t (@runtime))
      (cond ((equal? /type "Quick")
             (set! //a (@quick_sort //n /k //a)))
            ((equal? /type "DPQ")
             (set! //a (@dpq_sort //n /k //a)))
            ((equal? /type "Shell")
             (set! //a (@shell_sort //n /k //a)))
            ((equal? /type "Insertion")
             (set! //a (@insertion_sort //n /k //a)))
            ((equal? /type "Bubble")
             (set! //a (@bubble_sort //n /k //a)))
            (#t
             (begin
               (display "Unknown sort type: ")
               (begin (display /type) (newline) (force-output)))))
      (begin
        (display "Checking... ")
        (begin
          (display (@runtime))
          (newline)
          (force-output)))
      (let ((var-save /i) (for-step 1) (for-end //n))
        (set! /i 2)
        (let for-loop ()
          (cond ((or (and (> 1 0) (<= /i for-end))
                     (and (< 1 0) (>= /i for-end)))
                 (cond ((> (let ((name //a))
                             (if (vector? name)
                               (vector-ref name (- (- /i 1) 1))
                               (list-ref name (- (- /i 1) 1))))
                           (let ((name //a))
                             (if (vector? name)
                               (vector-ref name (- /i 1))
                               (list-ref name (- /i 1)))))
                        (error "Shouldn't happen!")))
                 (set! /i (+ /i for-step))
                 (for-loop))
                (#t #t)))
        (set! /i var-save))
      (cond ((<= //n 1000)
             (begin
               (display "Result = ")
               (begin (display //a) (newline) (force-output)))))
      (begin
        (display "Finished! ")
        (begin
          (display (@runtime))
          (newline)
          (force-output)))
      (begin
        (display "sort time = ")
        (begin
          (display (- (@runtime) /t))
          (newline)
          (force-output)))
      #t
      (set! //a //a-save))
    (set! /k /k-save)
    (set! //n //n-save)
    (set! /type /type-save)))

(define (@dpq_pivots /i /j)
  (let ((/sixth 0)
        (/e1 0)
        (/e2 0)
        (/e3 0)
        (/e4 0)
        (/e5 0))
    (set! /sixth (quotient (+ (- /j /i) 1) 6))
    (set! /e1 (+ /i /sixth))
    (set! /e3 (quotient (+ /i /j) 2))
    (set! /e2 (- /e3 /sixth))
    (set! /e4 (+ /e3 /sixth))
    (set! /e5 (- /j /sixth))
    (list /e1 /e2 /e3 /e4 /e5)))

(define (@sort_test_list /type_list /data //n-par /k-par)
  (let ((/k-save /k) (//n-save //n))
    (set! /k /k-par)
    (set! //n //n-par)
    (let ((//a-save //a)
          (//b (make-vector //n 0))
          (/start 0)
          (/end 0)
          (/mod (integer-expt 2 27)))
      (set! //a (make-vector //n 0))
      (let ((/pivots (@dpq_pivots 1 //n))
            (/min 0)
            (/e1 0)
            (/e2 0)
            (/e3 0))
        (begin
          (display "pivots = ")
          (begin
            (display /pivots)
            (newline)
            (force-output)))
        (begin
          (display "Initialising... ")
          (begin
            (display (@runtime))
            (newline)
            (force-output)))
        (let ((/x (@random 100000))
              (/m 1664525)
              (/c -59837601))
          (let ((var-save /i) (for-step 1) (for-end //n))
            (set! /i 1)
            (let for-loop ()
              (cond ((or (and (> 1 0) (<= /i for-end))
                         (and (< 1 0) (>= /i for-end)))
                     (begin
                       (if (vector? //a)
                         (vector-set! //a (- /i 1) /x)
                         (set! //a (replace-nth //a /i /x)))
                       (set! /x (modulo (+ (* /m /x) /c) /mod)))
                     (set! /i (+ /i for-step))
                     (for-loop))
                    (#t #t)))
            (set! /i var-save)))
        (let ((var-save /i) (for-step 1) (for-end //n))
          (set! /i 1)
          (let for-loop ()
            (cond ((or (and (> 1 0) (<= /i for-end))
                       (and (< 1 0) (>= /i for-end)))
                   (begin
                     (cond ((equal? /data "Random") #t)
                           ((equal? /data "Ordered")
                            (if (vector? //a)
                              (vector-set! //a (- /i 1) /i)
                              (set! //a (replace-nth //a /i /i))))
                           ((equal? /data "Random01")
                            (if (vector? //a)
                              (vector-set!
                                //a
                                (- /i 1)
                                (modulo
                                  (quotient
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /i 1))
                                        (list-ref name (- /i 1))))
                                    10)
                                  2))
                              (set! //a
                                (replace-nth
                                  //a
                                  /i
                                  (modulo
                                    (quotient
                                      (let ((name //a))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1))))
                                      10)
                                    2)))))
                           ((equal? /data "Random16")
                            (if (vector? //a)
                              (vector-set!
                                //a
                                (- /i 1)
                                (modulo
                                  (quotient
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /i 1))
                                        (list-ref name (- /i 1))))
                                    10)
                                  16))
                              (set! //a
                                (replace-nth
                                  //a
                                  /i
                                  (modulo
                                    (quotient
                                      (let ((name //a))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1))))
                                      10)
                                    16)))))
                           ((equal? /data "Same")
                            (if (vector? //a)
                              (vector-set! //a (- /i 1) 1)
                              (set! //a (replace-nth //a /i 1))))
                           ((equal? /data "VVVVV")
                            (set! /min //n)
                            (set! /e1 0)
                            (let ((var-save /pivot) (seq-save /pivots))
                              (if (vector? seq-save)
                                (set! seq-save (vector-elts seq-save)))
                              (let for-in-loop ((for-tmp seq-save))
                                (cond ((not (null? for-tmp))
                                       (set! /pivot (car for-tmp))
                                       (begin
                                         (set! /e1 (+ /e1 1))
                                         (cond ((< (abs (- /i /pivot)) /min)
                                                (set! /min (abs (- /i /pivot)))
                                                (set! /e2 /e1))))
                                       (for-in-loop (cdr for-tmp)))
                                      (#t #t)))
                              (set! /pivot var-save))
                            (if (vector? //a)
                              (vector-set!
                                //a
                                (- /i 1)
                                (+ (* 10 /min) (* 0 /e2)))
                              (set! //a
                                (replace-nth //a /i (+ (* 10 /min) (* 0 /e2)))))
                            (if (vector? //a)
                              (vector-set! //a (- /i 1) //n)
                              (set! //a (replace-nth //a /i //n))))
                           (#t
                            (error (string-append
                                     "Unknown data value: "
                                     /data))))
                     (if (vector? //b)
                       (vector-set!
                         //b
                         (- /i 1)
                         (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /i 1))
                             (list-ref name (- /i 1)))))
                       (set! //b
                         (replace-nth
                           //b
                           /i
                           (let ((name //a))
                             (if (vector? name)
                               (vector-ref name (- /i 1))
                               (list-ref name (- /i 1))))))))
                   (set! /i (+ /i for-step))
                   (for-loop))
                  (#t #t)))
          (set! /i var-save))
        (set! /e1 0)
        (set! /e2 0)
        (set! /e3 0)
        (set! /i 1)
        (let while-loop ()
          (cond ((< /i (quotient //n 6))
                 (begin
                   (let ((var-save /j) (seq-save (@dpq_pivots /i //n)))
                     (if (vector? seq-save)
                       (set! seq-save (vector-elts seq-save)))
                     (let for-in-loop ((for-tmp seq-save))
                       (cond ((not (null? for-tmp))
                              (set! /j (car for-tmp))
                              (begin
                                (let while-loop ()
                                  (cond ((and (< (+ /j /e2 /e3) //n)
                                              (<= (let ((name //a))
                                                    (if (vector? name)
                                                      (vector-ref
                                                        name
                                                        (- (+ /j /e2 /e3) 1))
                                                      (list-ref
                                                        name
                                                        (- (+ /j /e2 /e3) 1))))
                                                  /e1))
                                         (set! /e2 (+ /e2 1))
                                         (while-loop))
                                        (#t #t)))
                                (set! /j (+ /j /e2 /e3))
                                (cond ((<= //n 10000)
                                       (begin
                                         (display "inserting A[")
                                         (begin
                                           (display /j)
                                           (begin
                                             (display "] = ")
                                             (begin
                                               (display
                                                 (let ((name //a))
                                                   (if (vector? name)
                                                     (vector-ref name (- /j 1))
                                                     (list-ref name (- /j 1)))))
                                               (begin
                                                 (display " --> ")
                                                 (begin
                                                   (display /e1)
                                                   (newline)
                                                   (force-output)))))))))
                                (if (vector? //a)
                                  (vector-set! //a (- /j 1) /e1)
                                  (set! //a (replace-nth //a /j /e1)))
                                (if (vector? //b)
                                  (vector-set! //b (- /j 1) /e1)
                                  (set! //b (replace-nth //b /j /e1))))
                              (for-in-loop (cdr for-tmp)))
                             (#t #t)))
                     (set! /j var-save))
                   (set! /i (+ /i 5))
                   (set! /e1 (+ /e1 1))
                   (set! /e3 (+ /e3 1)))
                 (while-loop))
                (#t #t)))
        (begin
          (display
            "--------------------------------------------------------")
          (newline)
          (force-output))
        (let ((var-save /type) (seq-save /type_list))
          (if (vector? seq-save)
            (set! seq-save (vector-elts seq-save)))
          (let for-in-loop ((for-tmp seq-save))
            (cond ((not (null? for-tmp))
                   (set! /type (car for-tmp))
                   (begin
                     (let ((var-save /i) (for-step 1) (for-end //n))
                       (set! /i 1)
                       (let for-loop ()
                         (cond ((or (and (> 1 0) (<= /i for-end))
                                    (and (< 1 0) (>= /i for-end)))
                                (if (vector? //a)
                                  (vector-set!
                                    //a
                                    (- /i 1)
                                    (let ((name //b))
                                      (if (vector? name)
                                        (vector-ref name (- /i 1))
                                        (list-ref name (- /i 1)))))
                                  (set! //a
                                    (replace-nth
                                      //a
                                      /i
                                      (let ((name //b))
                                        (if (vector? name)
                                          (vector-ref name (- /i 1))
                                          (list-ref name (- /i 1)))))))
                                (set! /i (+ /i for-step))
                                (for-loop))
                               (#t #t)))
                       (set! /i var-save))
                     (begin
                       (display "================ ")
                       (begin
                         (display /type)
                         (begin
                           (display " sort N = ")
                           (begin
                             (display //n)
                             (begin
                               (display " k = ")
                               (begin
                                 (display /k)
                                 (begin
                                   (display " data = ")
                                   (begin
                                     (display /data)
                                     (newline)
                                     (force-output)))))))))
                     (begin
                       (display "Starting... ")
                       (begin
                         (display (@runtime))
                         (newline)
                         (force-output)))
                     (set! /start (@runtime))
                     (cond ((equal? /type "Quick")
                            (set! //a (@quick_sort //n /k //a)))
                           ((equal? /type "Quick2")
                            (set! //a (@quick_sort2 //n /k //a)))
                           ((equal? /type "Quick3")
                            (set! //a (@quick_sort3 //n /k //a)))
                           ((equal? /type "Quick4")
                            (set! //a (@quick_sort4 //n /k //a)))
                           ((equal? /type "Quick5")
                            (set! //a (@quick_sort5 //n /k //a)))
                           ((equal? /type "DPQ")
                            (cond ((< /k 6) (set! /k 6)))
                            (set! //a (@dpq_sort //n /k //a)))
                           ((equal? /type "DPQ2")
                            (cond ((< /k 6) (set! /k 6)))
                            (set! //a (@dpq2_sort //n /k //a)))
                           ((equal? /type "Shell")
                            (set! //a (@shell_sort //n /k //a)))
                           ((equal? /type "Insertion")
                            (set! //a (@insertion_sort //n /k //a)))
                           ((equal? /type "Bubble")
                            (set! //a (@bubble_sort //n /k //a)))
                           (#t
                            (begin
                              (display "Unknown sort type: ")
                              (begin
                                (display /type)
                                (newline)
                                (force-output)))))
                     (set! /end (@runtime))
                     (begin
                       (display "Checking... ")
                       (begin
                         (display (@runtime))
                         (newline)
                         (force-output)))
                     (let ((var-save /i) (for-step 1) (for-end //n))
                       (set! /i 2)
                       (let for-loop ()
                         (cond ((or (and (> 1 0) (<= /i for-end))
                                    (and (< 1 0) (>= /i for-end)))
                                (cond ((> (let ((name //a))
                                            (if (vector? name)
                                              (vector-ref name (- (- /i 1) 1))
                                              (list-ref name (- (- /i 1) 1))))
                                          (let ((name //a))
                                            (if (vector? name)
                                              (vector-ref name (- /i 1))
                                              (list-ref name (- /i 1)))))
                                       (begin
                                         (display //a)
                                         (newline)
                                         (force-output))
                                       (error "Shouldn't happen!")))
                                (set! /i (+ /i for-step))
                                (for-loop))
                               (#t #t)))
                       (set! /i var-save))
                     (cond ((<= //n 1000)
                            (begin
                              (display "Result = ")
                              (begin (display //a) (newline) (force-output)))))
                     (begin
                       (display "Finished! ")
                       (begin
                         (display (@runtime))
                         (newline)
                         (force-output)))
                     (begin
                       (display "sort time = ")
                       (begin
                         (display (- /end /start))
                         (newline)
                         (force-output))))
                   (for-in-loop (cdr for-tmp)))
                  (#t #t)))
          (set! /type var-save))
        (begin
          (display
            "--------------------------------------------------------")
          (newline)
          (force-output)))
      (set! //a //a-save))
    (set! /k /k-save)
    (set! //n //n-save)))

(define (@quick_sort //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (let ((//a/s '())
          (/a 1)
          (/b //n)
          (/i-save /i)
          (/j-save /j)
          (/v-save /v))
      (set! /i 0)
      (set! /j 0)
      (set! /v 0)
      (set! /fl_flag1 0)
      (let while-loop ()
        (cond ((= /fl_flag1 0)
               (begin
                 (cond ((<= //n 1000)
                        (begin
                          (display "a = ")
                          (begin
                            (display /a)
                            (begin
                              (display " b = ")
                              (begin
                                (display /b)
                                (begin
                                  (display " AS = ")
                                  (begin
                                    (display //a/s)
                                    (newline)
                                    (force-output)))))))))
                 (cond ((> (+ (- /b /a) 1) /k)
                        (set! /j (quotient (+ /a /b) 2))
                        (cond ((or (and (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /a 1))
                                               (list-ref name (- /a 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1)))))
                                        (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1))))))
                                   (and (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1)))))
                                        (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /a 1))
                                               (list-ref name (- /a 1)))))))
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /a 1))
                                           (list-ref name (- /a 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /j 1))
                                           (list-ref name (- /j 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- /j 1) /tmp-var2)
                                   (set! //a (replace-nth //a /j /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- /a 1) /tmp-var1)
                                   (set! //a (replace-nth //a /a /tmp-var1)))))
                              ((or (and (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /a 1))
                                               (list-ref name (- /a 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1)))))
                                        (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1))))))
                                   (and (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1)))))
                                        (< (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /b 1))
                                               (list-ref name (- /b 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /a 1))
                                               (list-ref name (- /a 1)))))))
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /a 1))
                                           (list-ref name (- /a 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /b 1))
                                           (list-ref name (- /b 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- /b 1) /tmp-var2)
                                   (set! //a (replace-nth //a /b /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- /a 1) /tmp-var1)
                                   (set! //a (replace-nth //a /a /tmp-var1))))))
                        (set! /i (- /a 1))
                        (set! /j (+ /b 1))
                        (set! /v
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (set! /i (+ /i 1))
                        (let while-loop ()
                          (cond ((< (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /i 1))
                                        (list-ref name (- /i 1))))
                                    /v)
                                 (set! /i (+ /i 1))
                                 (while-loop))
                                (#t #t)))
                        (set! /j (- /j 1))
                        (let while-loop ()
                          (cond ((< /v
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /j 1))
                                        (list-ref name (- /j 1)))))
                                 (set! /j (- /j 1))
                                 (while-loop))
                                (#t #t)))
                        (let while-loop ()
                          (cond ((< /i /j)
                                 (begin
                                   (let ((/tmp-var2
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1)))))
                                         (/tmp-var1
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))))
                                     (if (vector? //a)
                                       (vector-set! //a (- /i 1) /tmp-var2)
                                       (set! //a
                                         (replace-nth //a /i /tmp-var2)))
                                     (if (vector? //a)
                                       (vector-set! //a (- /j 1) /tmp-var1)
                                       (set! //a
                                         (replace-nth //a /j /tmp-var1))))
                                   (set! /i (+ /i 1))
                                   (let while-loop ()
                                     (cond ((< (let ((name //a))
                                                 (if (vector? name)
                                                   (vector-ref name (- /i 1))
                                                   (list-ref name (- /i 1))))
                                               /v)
                                            (set! /i (+ /i 1))
                                            (while-loop))
                                           (#t #t)))
                                   (set! /j (- /j 1))
                                   (let while-loop ()
                                     (cond ((< /v
                                               (let ((name //a))
                                                 (if (vector? name)
                                                   (vector-ref name (- /j 1))
                                                   (list-ref name (- /j 1)))))
                                            (set! /j (- /j 1))
                                            (while-loop))
                                           (#t #t))))
                                 (while-loop))
                                (#t #t)))
                        (cond ((> (- /j /a) (- /b (+ /j 1)))
                               (set! //a/s (cons /a //a/s))
                               (set! //a/s (cons /j //a/s))
                               (set! /a (+ /j 1))
                               (set! /fl_flag1 0))
                              (#t
                               (set! //a/s (cons (+ /j 1) //a/s))
                               (set! //a/s (cons /b //a/s))
                               (set! /b /j)
                               (set! /fl_flag1 0))))
                       ((equal? //a/s '()) (set! /fl_flag1 1))
                       (#t
                        (set! /b (car //a/s))
                        (set! //a/s (cdr //a/s))
                        (set! /a (car //a/s))
                        (set! //a/s (cdr //a/s))
                        (set! /fl_flag1 0))))
               (while-loop))
              (#t #t)))
      (cond ((> /k 1)
             (begin
               (display "Final insertion sort... ")
               (begin
                 (display (@runtime))
                 (newline)
                 (force-output)))
             (set! //a (@insertion_sort //n /k //a))))
      (set! /i /i-save)
      (set! /j /j-save)
      (set! /v /v-save))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@quick_sort2 //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (set! //a (@quick_sort_rec2 /k 1 //n //a))
    (cond ((> /k 1)
           (begin
             (display "Final insertion sort... ")
             (begin
               (display (@runtime))
               (newline)
               (force-output)))
           (set! //a (@insertion_sort //n /k //a))))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@quick_sort_rec2 /k /a /b //a)
  (let ((/i-save /i) (/j-save /j) (/v-save /v))
    (set! /i 0)
    (set! /j 0)
    (set! /v 0)
    (cond ((> (+ (- /b /a) 1) /k)
           (set! /j (quotient (+ /a /b) 2))
           (cond ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /j 1) /tmp-var2)
                      (set! //a (replace-nth //a /j /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1)))))
                 ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /b 1))
                              (list-ref name (- /b 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /b 1) /tmp-var2)
                      (set! //a (replace-nth //a /b /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1))))))
           (set! /i (- /a 1))
           (set! /j (+ /b 1))
           (set! /v
             (let ((name //a))
               (if (vector? name)
                 (vector-ref name (- /a 1))
                 (list-ref name (- /a 1)))))
           (set! /i (+ /i 1))
           (let while-loop ()
             (cond ((< (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /i 1))
                           (list-ref name (- /i 1))))
                       /v)
                    (set! /i (+ /i 1))
                    (while-loop))
                   (#t #t)))
           (set! /j (- /j 1))
           (let while-loop ()
             (cond ((< /v
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /j 1))
                           (list-ref name (- /j 1)))))
                    (set! /j (- /j 1))
                    (while-loop))
                   (#t #t)))
           (let while-loop ()
             (cond ((< /i /j)
                    (begin
                      (let ((/tmp-var2
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                            (/tmp-var1
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /i 1))
                                  (list-ref name (- /i 1))))))
                        (if (vector? //a)
                          (vector-set! //a (- /i 1) /tmp-var2)
                          (set! //a (replace-nth //a /i /tmp-var2)))
                        (if (vector? //a)
                          (vector-set! //a (- /j 1) /tmp-var1)
                          (set! //a (replace-nth //a /j /tmp-var1))))
                      (set! /i (+ /i 1))
                      (let while-loop ()
                        (cond ((< (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /i 1))
                                      (list-ref name (- /i 1))))
                                  /v)
                               (set! /i (+ /i 1))
                               (while-loop))
                              (#t #t)))
                      (set! /j (- /j 1))
                      (let while-loop ()
                        (cond ((< /v
                                  (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /j 1))
                                      (list-ref name (- /j 1)))))
                               (set! /j (- /j 1))
                               (while-loop))
                              (#t #t))))
                    (while-loop))
                   (#t #t)))
           (let ((/tmp-var2
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (/tmp-var1
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /a 1))
                       (list-ref name (- /a 1))))))
             (if (vector? //a)
               (vector-set! //a (- /a 1) /tmp-var2)
               (set! //a (replace-nth //a /a /tmp-var2)))
             (if (vector? //a)
               (vector-set! //a (- /j 1) /tmp-var1)
               (set! //a (replace-nth //a /j /tmp-var1))))
           (cond ((> (- /j /a) (- /b (+ /j 1)))
                  (set! //a (@quick_sort_rec2 /k (+ /j 1) /b //a))
                  (set! //a (@quick_sort_rec2 /k /a /j //a)))
                 (#t
                  (set! //a (@quick_sort_rec2 /k /a /j //a))
                  (set! //a (@quick_sort_rec2 /k (+ /j 1) /b //a))))))
    (set! /i /i-save)
    (set! /j /j-save)
    (set! /v /v-save))
  //a)

(define (@quick_sort3 //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (set! //a (@quick_sort_rec3 /k 1 //n //a))
    (cond ((> /k 1)
           (begin
             (display "Final insertion sort... ")
             (begin
               (display (@runtime))
               (newline)
               (force-output)))
           (set! //a (@insertion_sort //n /k //a))))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@quick_sort_rec3 /k /a /b //a)
  (let ((/i-save /i)
        (/j-save /j)
        (/v-save /v)
        (/swap 0))
    (set! /i 0)
    (set! /j 0)
    (set! /v 0)
    (cond ((> (+ (- /b /a) 1) /k)
           (set! /j (quotient (+ /a /b) 2))
           (cond ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /j 1) /tmp-var2)
                      (set! //a (replace-nth //a /j /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1)))))
                 ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /b 1))
                              (list-ref name (- /b 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /b 1) /tmp-var2)
                      (set! //a (replace-nth //a /b /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1))))))
           (set! /i (- /a 1))
           (set! /j (+ /b 1))
           (set! /v
             (let ((name //a))
               (if (vector? name)
                 (vector-ref name (- /a 1))
                 (list-ref name (- /a 1)))))
           (set! /fl_flag1 0)
           (let while-loop ()
             (cond ((= /fl_flag1 0)
                    (begin
                      (set! /i (+ /i 1))
                      (let while-loop ()
                        (cond ((< (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /i 1))
                                      (list-ref name (- /i 1))))
                                  /v)
                               (set! /i (+ /i 1))
                               (while-loop))
                              (#t #t)))
                      (set! /j (- /j 1))
                      (let while-loop ()
                        (cond ((< /v
                                  (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /j 1))
                                      (list-ref name (- /j 1)))))
                               (set! /j (- /j 1))
                               (while-loop))
                              (#t #t)))
                      (cond ((>= /i /j) (set! /fl_flag1 1))
                            ((not (equal?
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /i 1))
                                        (list-ref name (- /i 1))))
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /j 1))
                                        (list-ref name (- /j 1))))))
                             (set! /swap (+ /swap 1))
                             (let ((/tmp-var2
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- /j 1))
                                         (list-ref name (- /j 1)))))
                                   (/tmp-var1
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- /i 1))
                                         (list-ref name (- /i 1))))))
                               (if (vector? //a)
                                 (vector-set! //a (- /i 1) /tmp-var2)
                                 (set! //a (replace-nth //a /i /tmp-var2)))
                               (if (vector? //a)
                                 (vector-set! //a (- /j 1) /tmp-var1)
                                 (set! //a (replace-nth //a /j /tmp-var1))))
                             (cond ((> /swap 1)
                                    (set! /i (+ /i 1))
                                    (let while-loop ()
                                      (cond ((< (let ((name //a))
                                                  (if (vector? name)
                                                    (vector-ref name (- /i 1))
                                                    (list-ref name (- /i 1))))
                                                /v)
                                             (set! /i (+ /i 1))
                                             (while-loop))
                                            (#t #t)))
                                    (set! /j (- /j 1))
                                    (let while-loop ()
                                      (cond ((< /v
                                                (let ((name //a))
                                                  (if (vector? name)
                                                    (vector-ref name (- /j 1))
                                                    (list-ref name (- /j 1)))))
                                             (set! /j (- /j 1))
                                             (while-loop))
                                            (#t #t)))
                                    (let while-loop ()
                                      (cond ((< /i /j)
                                             (begin
                                               (cond ((not (equal?
                                                             (let ((name //a))
                                                               (if (vector?
                                                                     name)
                                                                 (vector-ref
                                                                   name
                                                                   (- /i 1))
                                                                 (list-ref
                                                                   name
                                                                   (- /i 1))))
                                                             (let ((name //a))
                                                               (if (vector?
                                                                     name)
                                                                 (vector-ref
                                                                   name
                                                                   (- /j 1))
                                                                 (list-ref
                                                                   name
                                                                   (- /j 1))))))
                                                      (set! /swap (+ /swap 1))))
                                               (let ((/tmp-var2
                                                       (let ((name //a))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- /j 1))
                                                           (list-ref
                                                             name
                                                             (- /j 1)))))
                                                     (/tmp-var1
                                                       (let ((name //a))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- /i 1))
                                                           (list-ref
                                                             name
                                                             (- /i 1))))))
                                                 (if (vector? //a)
                                                   (vector-set!
                                                     //a
                                                     (- /i 1)
                                                     /tmp-var2)
                                                   (set! //a
                                                     (replace-nth
                                                       //a
                                                       /i
                                                       /tmp-var2)))
                                                 (if (vector? //a)
                                                   (vector-set!
                                                     //a
                                                     (- /j 1)
                                                     /tmp-var1)
                                                   (set! //a
                                                     (replace-nth
                                                       //a
                                                       /j
                                                       /tmp-var1))))
                                               (set! /i (+ /i 1))
                                               (let while-loop ()
                                                 (cond ((< (let ((name //a))
                                                             (if (vector? name)
                                                               (vector-ref
                                                                 name
                                                                 (- /i 1))
                                                               (list-ref
                                                                 name
                                                                 (- /i 1))))
                                                           /v)
                                                        (set! /i (+ /i 1))
                                                        (while-loop))
                                                       (#t #t)))
                                               (set! /j (- /j 1))
                                               (let while-loop ()
                                                 (cond ((< /v
                                                           (let ((name //a))
                                                             (if (vector? name)
                                                               (vector-ref
                                                                 name
                                                                 (- /j 1))
                                                               (list-ref
                                                                 name
                                                                 (- /j 1)))))
                                                        (set! /j (- /j 1))
                                                        (while-loop))
                                                       (#t #t))))
                                             (while-loop))
                                            (#t #t)))
                                    (set! /fl_flag1 1))
                                   (#t (set! /fl_flag1 0))))
                            (#t (set! /fl_flag1 0))))
                    (while-loop))
                   (#t #t)))
           (let ((/tmp-var2
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (/tmp-var1
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /a 1))
                       (list-ref name (- /a 1))))))
             (if (vector? //a)
               (vector-set! //a (- /a 1) /tmp-var2)
               (set! //a (replace-nth //a /a /tmp-var2)))
             (if (vector? //a)
               (vector-set! //a (- /j 1) /tmp-var1)
               (set! //a (replace-nth //a /j /tmp-var1))))
           (cond ((<= /swap 1) (set! /k (* 10 /k))))
           (cond ((> (- /j /a) (- /b (+ /j 1)))
                  (set! //a (@quick_sort_rec3 /k (+ /j 1) /b //a))
                  (set! //a (@quick_sort_rec3 /k /a /j //a)))
                 (#t
                  (set! //a (@quick_sort_rec3 /k /a /j //a))
                  (set! //a (@quick_sort_rec3 /k (+ /j 1) /b //a))))))
    (set! /i /i-save)
    (set! /j /j-save)
    (set! /v /v-save))
  //a)

(define (@quick_sort4 //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (set! //a (@quick_sort_rec4 /k 1 //n //a))
    (begin
      (display "Final insertion sort... ")
      (begin
        (display (@runtime))
        (newline)
        (force-output)))
    (set! //a (@insertion_sort //n /k //a))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@quick_sort_rec4 /k /a /b //a)
  (let ((/i-save /i)
        (/j-save /j)
        (/v-save /v)
        (/swap 0)
        (/same 0))
    (set! /i 0)
    (set! /j 0)
    (set! /v 0)
    (cond ((> (+ (- /b /a) 1) /k)
           (set! /j (quotient (+ /a /b) 2))
           (cond ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /j 1) /tmp-var2)
                      (set! //a (replace-nth //a /j /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1)))))
                 ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /b 1))
                              (list-ref name (- /b 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /b 1) /tmp-var2)
                      (set! //a (replace-nth //a /b /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1))))))
           (set! /i (- /a 1))
           (set! /j (+ /b 1))
           (set! /v
             (let ((name //a))
               (if (vector? name)
                 (vector-ref name (- /a 1))
                 (list-ref name (- /a 1)))))
           (set! /i (+ /i 1))
           (let while-loop ()
             (cond ((< (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /i 1))
                           (list-ref name (- /i 1))))
                       /v)
                    (set! /i (+ /i 1))
                    (while-loop))
                   (#t #t)))
           (set! /j (- /j 1))
           (let while-loop ()
             (cond ((< /v
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /j 1))
                           (list-ref name (- /j 1)))))
                    (set! /j (- /j 1))
                    (while-loop))
                   (#t #t)))
           (let while-loop ()
             (cond ((< /i /j)
                    (begin
                      (cond ((equal?
                               (let ((name //a))
                                 (if (vector? name)
                                   (vector-ref name (- /i 1))
                                   (list-ref name (- /i 1))))
                               (let ((name //a))
                                 (if (vector? name)
                                   (vector-ref name (- /j 1))
                                   (list-ref name (- /j 1)))))
                             (set! /same (+ /same 1)))
                            (#t
                             (set! /swap (+ /swap 1))
                             (let ((/tmp-var2
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- /j 1))
                                         (list-ref name (- /j 1)))))
                                   (/tmp-var1
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- /i 1))
                                         (list-ref name (- /i 1))))))
                               (if (vector? //a)
                                 (vector-set! //a (- /i 1) /tmp-var2)
                                 (set! //a (replace-nth //a /i /tmp-var2)))
                               (if (vector? //a)
                                 (vector-set! //a (- /j 1) /tmp-var1)
                                 (set! //a (replace-nth //a /j /tmp-var1))))))
                      (set! /i (+ /i 1))
                      (let while-loop ()
                        (cond ((< (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /i 1))
                                      (list-ref name (- /i 1))))
                                  /v)
                               (set! /i (+ /i 1))
                               (while-loop))
                              (#t #t)))
                      (set! /j (- /j 1))
                      (let while-loop ()
                        (cond ((< /v
                                  (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /j 1))
                                      (list-ref name (- /j 1)))))
                               (set! /j (- /j 1))
                               (while-loop))
                              (#t #t))))
                    (while-loop))
                   (#t #t)))
           (let ((/tmp-var2
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (/tmp-var1
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /a 1))
                       (list-ref name (- /a 1))))))
             (if (vector? //a)
               (vector-set! //a (- /a 1) /tmp-var2)
               (set! //a (replace-nth //a /a /tmp-var2)))
             (if (vector? //a)
               (vector-set! //a (- /j 1) /tmp-var1)
               (set! //a (replace-nth //a /j /tmp-var1))))
           (cond ((<= /swap 1) (set! /k (* 10 /k))))
           (cond ((equal? /same (quotient (+ (- /b /a) 1) 2)))
                 ((> (- /j /a) (- /b (+ /j 1)))
                  (set! //a (@quick_sort_rec4 /k (+ /j 1) /b //a))
                  (set! //a (@quick_sort_rec4 /k /a /j //a)))
                 (#t
                  (set! //a (@quick_sort_rec4 /k /a /j //a))
                  (set! //a (@quick_sort_rec4 /k (+ /j 1) /b //a))))))
    (set! /i /i-save)
    (set! /j /j-save)
    (set! /v /v-save))
  //a)

(define (@quick_sort5 //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (set! //a (@quick_sort_rec5 /k 1 //n //a))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@quick_sort_rec5 /k /a /b //a)
  (let ((/i-save /i)
        (/j-save /j)
        (/v-save /v)
        (/swap 0)
        (/same 1))
    (set! /i 0)
    (set! /j 0)
    (set! /v 0)
    (cond ((<= (+ (- /b /a) 1) /k)
           (let ((var-save /i) (for-step 1) (for-end /b))
             (set! /i (+ /a 1))
             (let for-loop ()
               (cond ((or (and (> 1 0) (<= /i for-end))
                          (and (< 1 0) (>= /i for-end)))
                      (begin
                        (set! /v
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /i 1))
                              (list-ref name (- /i 1)))))
                        (set! /j /i)
                        (let while-loop ()
                          (cond ((and (> /j /a)
                                      (> (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- (- /j 1) 1))
                                             (list-ref name (- (- /j 1) 1))))
                                         /v))
                                 (begin
                                   (if (vector? //a)
                                     (vector-set!
                                       //a
                                       (- /j 1)
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- (- /j 1) 1))
                                           (list-ref name (- (- /j 1) 1)))))
                                     (set! //a
                                       (replace-nth
                                         //a
                                         /j
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- (- /j 1) 1))
                                             (list-ref name (- (- /j 1) 1)))))))
                                   (set! /j (- /j 1)))
                                 (while-loop))
                                (#t #t)))
                        (if (vector? //a)
                          (vector-set! //a (- /j 1) /v)
                          (set! //a (replace-nth //a /j /v))))
                      (set! /i (+ /i for-step))
                      (for-loop))
                     (#t #t)))
             (set! /i var-save)))
          (#t
           (set! /j (quotient (+ /a /b) 2))
           (cond ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /j 1) /tmp-var2)
                      (set! //a (replace-nth //a /j /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1)))))
                 ((or (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))))
                      (and (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1)))))
                           (< (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /b 1))
                                  (list-ref name (- /b 1))))
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /a 1))
                                  (list-ref name (- /a 1)))))))
                  (let ((/tmp-var2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /a 1))
                              (list-ref name (- /a 1)))))
                        (/tmp-var1
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /b 1))
                              (list-ref name (- /b 1))))))
                    (if (vector? //a)
                      (vector-set! //a (- /b 1) /tmp-var2)
                      (set! //a (replace-nth //a /b /tmp-var2)))
                    (if (vector? //a)
                      (vector-set! //a (- /a 1) /tmp-var1)
                      (set! //a (replace-nth //a /a /tmp-var1))))))
           (set! /i (- /a 1))
           (set! /j (+ /b 1))
           (set! /v
             (let ((name //a))
               (if (vector? name)
                 (vector-ref name (- /a 1))
                 (list-ref name (- /a 1)))))
           (set! /fl_flag2 0)
           (let while-loop ()
             (cond ((= /fl_flag2 0)
                    (begin
                      (set! /fl_flag1 0)
                      (let while-loop ()
                        (cond ((= /fl_flag1 0)
                               (begin
                                 (set! /i (+ /i 1))
                                 (cond ((>= (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- /i 1))
                                                (list-ref name (- /i 1))))
                                            /v)
                                        (set! /fl_flag1 1))
                                       (#t
                                        (set! /same 0)
                                        (set! /i (+ /i 1))
                                        (let while-loop ()
                                          (cond ((< (let ((name //a))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- /i 1))
                                                        (list-ref
                                                          name
                                                          (- /i 1))))
                                                    /v)
                                                 (set! /i (+ /i 1))
                                                 (while-loop))
                                                (#t #t)))
                                        (cond ((>= (let ((name //a))
                                                     (if (vector? name)
                                                       (vector-ref
                                                         name
                                                         (- /i 1))
                                                       (list-ref
                                                         name
                                                         (- /i 1))))
                                                   /v)
                                               (set! /fl_flag1 1))
                                              (#t (set! /fl_flag1 0))))))
                               (while-loop))
                              (#t #t)))
                      (set! /fl_flag1 0)
                      (let while-loop ()
                        (cond ((= /fl_flag1 0)
                               (begin
                                 (set! /j (- /j 1))
                                 (cond ((<= (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- /j 1))
                                                (list-ref name (- /j 1))))
                                            /v)
                                        (set! /fl_flag1 1))
                                       (#t
                                        (set! /same 0)
                                        (set! /j (- /j 1))
                                        (let while-loop ()
                                          (cond ((< /v
                                                    (let ((name //a))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- /j 1))
                                                        (list-ref
                                                          name
                                                          (- /j 1)))))
                                                 (set! /j (- /j 1))
                                                 (while-loop))
                                                (#t #t)))
                                        (cond ((<= (let ((name //a))
                                                     (if (vector? name)
                                                       (vector-ref
                                                         name
                                                         (- /j 1))
                                                       (list-ref
                                                         name
                                                         (- /j 1))))
                                                   /v)
                                               (set! /fl_flag1 1))
                                              (#t (set! /fl_flag1 0))))))
                               (while-loop))
                              (#t #t)))
                      (cond ((>= /i /j) (set! /fl_flag2 1))
                            (#t
                             (cond ((not (equal?
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /i 1))
                                               (list-ref name (- /i 1))))
                                           (let ((name //a))
                                             (if (vector? name)
                                               (vector-ref name (- /j 1))
                                               (list-ref name (- /j 1))))))
                                    (set! /swap (+ /swap 1))
                                    (set! /same 0)
                                    (let ((/tmp-var2
                                            (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- /j 1))
                                                (list-ref name (- /j 1)))))
                                          (/tmp-var1
                                            (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- /i 1))
                                                (list-ref name (- /i 1))))))
                                      (if (vector? //a)
                                        (vector-set! //a (- /i 1) /tmp-var2)
                                        (set! //a
                                          (replace-nth //a /i /tmp-var2)))
                                      (if (vector? //a)
                                        (vector-set! //a (- /j 1) /tmp-var1)
                                        (set! //a
                                          (replace-nth //a /j /tmp-var1))))))
                             (cond ((> /swap 1)
                                    (set! /i (+ /i 1))
                                    (let while-loop ()
                                      (cond ((< (let ((name //a))
                                                  (if (vector? name)
                                                    (vector-ref name (- /i 1))
                                                    (list-ref name (- /i 1))))
                                                /v)
                                             (set! /i (+ /i 1))
                                             (while-loop))
                                            (#t #t)))
                                    (set! /j (- /j 1))
                                    (let while-loop ()
                                      (cond ((< /v
                                                (let ((name //a))
                                                  (if (vector? name)
                                                    (vector-ref name (- /j 1))
                                                    (list-ref name (- /j 1)))))
                                             (set! /j (- /j 1))
                                             (while-loop))
                                            (#t #t)))
                                    (let while-loop ()
                                      (cond ((< /i /j)
                                             (begin
                                               (let ((/tmp-var2
                                                       (let ((name //a))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- /j 1))
                                                           (list-ref
                                                             name
                                                             (- /j 1)))))
                                                     (/tmp-var1
                                                       (let ((name //a))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- /i 1))
                                                           (list-ref
                                                             name
                                                             (- /i 1))))))
                                                 (if (vector? //a)
                                                   (vector-set!
                                                     //a
                                                     (- /i 1)
                                                     /tmp-var2)
                                                   (set! //a
                                                     (replace-nth
                                                       //a
                                                       /i
                                                       /tmp-var2)))
                                                 (if (vector? //a)
                                                   (vector-set!
                                                     //a
                                                     (- /j 1)
                                                     /tmp-var1)
                                                   (set! //a
                                                     (replace-nth
                                                       //a
                                                       /j
                                                       /tmp-var1))))
                                               (set! /i (+ /i 1))
                                               (let while-loop ()
                                                 (cond ((< (let ((name //a))
                                                             (if (vector? name)
                                                               (vector-ref
                                                                 name
                                                                 (- /i 1))
                                                               (list-ref
                                                                 name
                                                                 (- /i 1))))
                                                           /v)
                                                        (set! /i (+ /i 1))
                                                        (while-loop))
                                                       (#t #t)))
                                               (set! /j (- /j 1))
                                               (let while-loop ()
                                                 (cond ((< /v
                                                           (let ((name //a))
                                                             (if (vector? name)
                                                               (vector-ref
                                                                 name
                                                                 (- /j 1))
                                                               (list-ref
                                                                 name
                                                                 (- /j 1)))))
                                                        (set! /j (- /j 1))
                                                        (while-loop))
                                                       (#t #t))))
                                             (while-loop))
                                            (#t #t)))
                                    (set! /fl_flag2 1))
                                   (#t (set! /fl_flag2 0))))))
                    (while-loop))
                   (#t #t)))
           (let ((/tmp-var2
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (/tmp-var1
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /a 1))
                       (list-ref name (- /a 1))))))
             (if (vector? //a)
               (vector-set! //a (- /a 1) /tmp-var2)
               (set! //a (replace-nth //a /a /tmp-var2)))
             (if (vector? //a)
               (vector-set! //a (- /j 1) /tmp-var1)
               (set! //a (replace-nth //a /j /tmp-var1))))
           (cond ((<= /swap 1) (set! /k (* 10 /k))))
           (cond ((= /same 1))
                 ((> (- /j /a) (- /b (+ /j 1)))
                  (set! //a (@quick_sort_rec5 /k (+ /j 1) /b //a))
                  (set! //a (@quick_sort_rec5 /k /a /j //a)))
                 (#t
                  (set! //a (@quick_sort_rec5 /k /a /j //a))
                  (set! //a (@quick_sort_rec5 /k (+ /j 1) /b //a))))))
    (set! /i /i-save)
    (set! /j /j-save)
    (set! /v /v-save))
  //a)

(define (@shell_sort //n /k //a)
  (let ((/gap 1) (/i 0) (/j 0) (/v 0) (/index 0))
    (let while-loop ()
      (cond ((<= /gap //n)
             (set! /gap (+ (* 3 /gap) 1))
             (while-loop))
            (#t #t)))
    (set! /gap (quotient (- /gap 1) 3))
    (set! /i (+ /gap 1))
    (let while-loop ()
      (cond ((<= /i //n)
             (begin
               (set! /v
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- /i 1))
                     (list-ref name (- /i 1)))))
               (set! /j /i)
               (set! /fl_flag1 0)
               (let while-loop ()
                 (cond ((= /fl_flag1 0)
                        (begin
                          (set! /index (- /j /gap))
                          (cond ((not (> (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- /index 1))
                                             (list-ref name (- /index 1))))
                                         /v))
                                 (set! /fl_flag1 1))
                                (#t
                                 (if (vector? //a)
                                   (vector-set!
                                     //a
                                     (- /j 1)
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- /index 1))
                                         (list-ref name (- /index 1)))))
                                   (set! //a
                                     (replace-nth
                                       //a
                                       /j
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /index 1))
                                           (list-ref name (- /index 1)))))))
                                 (set! /j (- /j /gap))
                                 (cond ((<= /j /gap) (set! /fl_flag1 1))
                                       (#t (set! /fl_flag1 0))))))
                        (while-loop))
                       (#t #t)))
               (if (vector? //a)
                 (vector-set! //a (- /j 1) /v)
                 (set! //a (replace-nth //a /j /v)))
               (set! /i (+ /i 1)))
             (while-loop))
            (#t #t)))
    (let while-loop ()
      (cond ((not (= /gap 1))
             (begin
               (set! /gap (quotient (- /gap 1) 3))
               (set! /i (+ /gap 1))
               (let while-loop ()
                 (cond ((<= /i //n)
                        (begin
                          (set! /v
                            (let ((name //a))
                              (if (vector? name)
                                (vector-ref name (- /i 1))
                                (list-ref name (- /i 1)))))
                          (set! /j /i)
                          (set! /fl_flag1 0)
                          (let while-loop ()
                            (cond ((= /fl_flag1 0)
                                   (begin
                                     (set! /index (- /j /gap))
                                     (cond ((not (> (let ((name //a))
                                                      (if (vector? name)
                                                        (vector-ref
                                                          name
                                                          (- /index 1))
                                                        (list-ref
                                                          name
                                                          (- /index 1))))
                                                    /v))
                                            (set! /fl_flag1 1))
                                           (#t
                                            (if (vector? //a)
                                              (vector-set!
                                                //a
                                                (- /j 1)
                                                (let ((name //a))
                                                  (if (vector? name)
                                                    (vector-ref
                                                      name
                                                      (- /index 1))
                                                    (list-ref
                                                      name
                                                      (- /index 1)))))
                                              (set! //a
                                                (replace-nth
                                                  //a
                                                  /j
                                                  (let ((name //a))
                                                    (if (vector? name)
                                                      (vector-ref
                                                        name
                                                        (- /index 1))
                                                      (list-ref
                                                        name
                                                        (- /index 1)))))))
                                            (set! /j (- /j /gap))
                                            (cond ((<= /j /gap)
                                                   (set! /fl_flag1 1))
                                                  (#t (set! /fl_flag1 0))))))
                                   (while-loop))
                                  (#t #t)))
                          (if (vector? //a)
                            (vector-set! //a (- /j 1) /v)
                            (set! //a (replace-nth //a /j /v)))
                          (set! /i (+ /i 1)))
                        (while-loop))
                       (#t #t))))
             (while-loop))
            (#t #t))))
  //a)

(define (@insertion_sort //n /k //a)
  (let ((var-save /i) (for-step 1) (for-end //n))
    (set! /i 2)
    (let for-loop ()
      (cond ((or (and (> 1 0) (<= /i for-end))
                 (and (< 1 0) (>= /i for-end)))
             (begin
               (set! /v
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- /i 1))
                     (list-ref name (- /i 1)))))
               (set! /j /i)
               (let while-loop ()
                 (cond ((and (> /j 1)
                             (> (let ((name //a))
                                  (if (vector? name)
                                    (vector-ref name (- (- /j 1) 1))
                                    (list-ref name (- (- /j 1) 1))))
                                /v))
                        (begin
                          (if (vector? //a)
                            (vector-set!
                              //a
                              (- /j 1)
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- (- /j 1) 1))
                                  (list-ref name (- (- /j 1) 1)))))
                            (set! //a
                              (replace-nth
                                //a
                                /j
                                (let ((name //a))
                                  (if (vector? name)
                                    (vector-ref name (- (- /j 1) 1))
                                    (list-ref name (- (- /j 1) 1)))))))
                          (set! /j (- /j 1)))
                        (while-loop))
                       (#t #t)))
               (if (vector? //a)
                 (vector-set! //a (- /j 1) /v)
                 (set! //a (replace-nth //a /j /v))))
             (set! /i (+ /i for-step))
             (for-loop))
            (#t #t)))
    (set! /i var-save))
  //a)

(define (@bubble_sort1 //n /k //a)
  (let ((var-save /i) (for-step (- 1)) (for-end 1))
    (set! /i //n)
    (let for-loop ()
      (cond ((or (and (> (- 1) 0) (<= /i for-end))
                 (and (< (- 1) 0) (>= /i for-end)))
             (let ((var-save /j) (for-step 1) (for-end /i))
               (set! /j 2)
               (let for-loop ()
                 (cond ((or (and (> 1 0) (<= /j for-end))
                            (and (< 1 0) (>= /j for-end)))
                        (cond ((> (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- (- /j 1) 1))
                                      (list-ref name (- (- /j 1) 1))))
                                  (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- /j 1))
                                      (list-ref name (- /j 1)))))
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- /j 1))
                                           (list-ref name (- /j 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- (- /j 1) 1))
                                           (list-ref name (- (- /j 1) 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- (- /j 1) 1) /tmp-var2)
                                   (set! //a
                                     (replace-nth //a (- /j 1) /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- /j 1) /tmp-var1)
                                   (set! //a (replace-nth //a /j /tmp-var1))))))
                        (set! /j (+ /j for-step))
                        (for-loop))
                       (#t #t)))
               (set! /j var-save))
             (set! /i (+ /i for-step))
             (for-loop))
            (#t #t)))
    (set! /i var-save))
  //a)

(define (@bubble_sort //n /k //a)
  (let ((/swap 0))
    (set! /swap 0)
    (let ((var-save /j) (for-step 1) (for-end //n))
      (set! /j 2)
      (let for-loop ()
        (cond ((or (and (> 1 0) (<= /j for-end))
                   (and (< 1 0) (>= /j for-end)))
               (cond ((> (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- (- /j 1) 1))
                             (list-ref name (- (- /j 1) 1))))
                         (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /j 1))
                             (list-ref name (- /j 1)))))
                      (let ((/tmp-var2
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- /j 1))
                                  (list-ref name (- /j 1)))))
                            (/tmp-var1
                              (let ((name //a))
                                (if (vector? name)
                                  (vector-ref name (- (- /j 1) 1))
                                  (list-ref name (- (- /j 1) 1))))))
                        (if (vector? //a)
                          (vector-set! //a (- (- /j 1) 1) /tmp-var2)
                          (set! //a (replace-nth //a (- /j 1) /tmp-var2)))
                        (if (vector? //a)
                          (vector-set! //a (- /j 1) /tmp-var1)
                          (set! //a (replace-nth //a /j /tmp-var1))))
                      (set! /swap 1)))
               (set! /j (+ /j for-step))
               (for-loop))
              (#t #t)))
      (set! /j var-save))
    (let while-loop ()
      (cond ((not (= /swap 0))
             (begin
               (set! /swap 0)
               (let ((var-save /j) (for-step 1) (for-end //n))
                 (set! /j 2)
                 (let for-loop ()
                   (cond ((or (and (> 1 0) (<= /j for-end))
                              (and (< 1 0) (>= /j for-end)))
                          (cond ((> (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- (- /j 1) 1))
                                        (list-ref name (- (- /j 1) 1))))
                                    (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- /j 1))
                                        (list-ref name (- /j 1)))))
                                 (let ((/tmp-var2
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- /j 1))
                                             (list-ref name (- /j 1)))))
                                       (/tmp-var1
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- (- /j 1) 1))
                                             (list-ref name (- (- /j 1) 1))))))
                                   (if (vector? //a)
                                     (vector-set! //a (- (- /j 1) 1) /tmp-var2)
                                     (set! //a
                                       (replace-nth //a (- /j 1) /tmp-var2)))
                                   (if (vector? //a)
                                     (vector-set! //a (- /j 1) /tmp-var1)
                                     (set! //a (replace-nth //a /j /tmp-var1))))
                                 (set! /swap 1)))
                          (set! /j (+ /j for-step))
                          (for-loop))
                         (#t #t)))
                 (set! /j var-save)))
             (while-loop))
            (#t #t))))
  //a)

(define (@dpq_sort //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (cond ((<= //n 1000)
           (begin
             (display "Start  = ")
             (begin (display //a) (newline) (force-output)))))
    (set! //a (@dpq_sort_iter /k 1 //n //a))
    (cond ((<= //n 1000)
           (begin
             (display "Result = ")
             (begin (display //a) (newline) (force-output)))))
    (cond ((> /k 1)
           (begin
             (display "Final insertion sort... ")
             (begin
               (display (@runtime))
               (newline)
               (force-output)))
           (set! //a (@insertion_sort //n /k //a))))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@dpq2_sort //n-par /k-par //a-par)
  (let ((//a-save //a)
        (/k-save /k)
        (//n-save //n)
        (funct-result '()))
    (set! //a //a-par)
    (set! /k /k-par)
    (set! //n //n-par)
    (cond ((<= //n 1000)
           (begin
             (display "Start  = ")
             (begin (display //a) (newline) (force-output)))))
    (set! //a (@dpq_sort_test /k 1 //n //a))
    (cond ((<= //n 1000)
           (begin
             (display "Result = ")
             (begin (display //a) (newline) (force-output)))))
    (cond ((> /k 1)
           (begin
             (display "Final insertion sort... ")
             (begin
               (display (@runtime))
               (newline)
               (force-output)))
           (set! //a (@insertion_sort //n /k //a))))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /k /k-save)
    (set! //n //n-save)
    funct-result))

(define (@dpq_sort_test /k-par /i-par /j-par //a-par)
  (let ((//a-save //a)
        (/j-save /j)
        (/i-save /i)
        (/k-save /k)
        (funct-result '()))
    (set! //a //a-par)
    (set! /j /j-par)
    (set! /i /i-par)
    (set! /k /k-par)
    (let ((//p1 0)
          (//p2 0)
          (//l 0)
          (//k 0)
          (//g 0)
          (/e2 0)
          (/e4 0)
          (//a2 0)
          (//a4 0)
          (/e1 0)
          (/e3 0)
          (/e5 0)
          (//a1 0)
          (//a3 0)
          (//a5 0)
          (/sixth 0)
          (/swap 0))
      (cond ((> (+ (- /j /i) 1) /k)
             (set! /sixth (quotient (+ (- /j /i) 1) 6))
             (set! /e1 (+ /i /sixth))
             (set! /e3 (quotient (+ /i /j) 2))
             (set! /e2 (- /e3 /sixth))
             (set! /e4 (+ /e3 /sixth))
             (set! /e5 (- /j /sixth))
             (set! //a1
               (let ((name //a))
                 (if (vector? name)
                   (vector-ref name (- /e1 1))
                   (list-ref name (- /e1 1)))))
             (set! //a2
               (let ((name //a))
                 (if (vector? name)
                   (vector-ref name (- /e2 1))
                   (list-ref name (- /e2 1)))))
             (set! //a3
               (let ((name //a))
                 (if (vector? name)
                   (vector-ref name (- /e3 1))
                   (list-ref name (- /e3 1)))))
             (set! //a4
               (let ((name //a))
                 (if (vector? name)
                   (vector-ref name (- /e4 1))
                   (list-ref name (- /e4 1)))))
             (set! //a5
               (let ((name //a))
                 (if (vector? name)
                   (vector-ref name (- /e5 1))
                   (list-ref name (- /e5 1)))))
             (cond ((> //a1 //a2)
                    (let ((/tmp-var2 //a2) (/tmp-var1 //a1))
                      (set! //a1 /tmp-var2)
                      (set! //a2 /tmp-var1))))
             (cond ((> //a4 //a5)
                    (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                      (set! //a4 /tmp-var2)
                      (set! //a5 /tmp-var1))))
             (cond ((> //a1 //a3)
                    (let ((/tmp-var2 //a3) (/tmp-var1 //a1))
                      (set! //a1 /tmp-var2)
                      (set! //a3 /tmp-var1))))
             (cond ((> //a2 //a3)
                    (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                      (set! //a2 /tmp-var2)
                      (set! //a3 /tmp-var1))))
             (cond ((> //a1 //a4)
                    (let ((/tmp-var2 //a4) (/tmp-var1 //a1))
                      (set! //a1 /tmp-var2)
                      (set! //a4 /tmp-var1))))
             (cond ((> //a3 //a4)
                    (let ((/tmp-var2 //a4) (/tmp-var1 //a3))
                      (set! //a3 /tmp-var2)
                      (set! //a4 /tmp-var1))))
             (cond ((> //a2 //a5)
                    (let ((/tmp-var2 //a5) (/tmp-var1 //a2))
                      (set! //a2 /tmp-var2)
                      (set! //a5 /tmp-var1))))
             (cond ((> //a2 //a3)
                    (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                      (set! //a2 /tmp-var2)
                      (set! //a3 /tmp-var1))))
             (cond ((> //a4 //a5)
                    (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                      (set! //a4 /tmp-var2)
                      (set! //a5 /tmp-var1))))
             (if (vector? //a)
               (vector-set! //a (- /e1 1) //a1)
               (set! //a (replace-nth //a /e1 //a1)))
             (if (vector? //a)
               (vector-set! //a (- /e3 1) //a3)
               (set! //a (replace-nth //a /e3 //a3)))
             (if (vector? //a)
               (vector-set! //a (- /e5 1) //a5)
               (set! //a (replace-nth //a /e5 //a5)))
             (set! //p1 //a2)
             (if (vector? //a)
               (vector-set!
                 //a
                 (- /e2 1)
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- /i 1))
                     (list-ref name (- /i 1)))))
               (set! //a
                 (replace-nth
                   //a
                   /e2
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /i 1))
                       (list-ref name (- /i 1)))))))
             (set! //p2 //a4)
             (if (vector? //a)
               (vector-set!
                 //a
                 (- /e4 1)
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- /j 1))
                     (list-ref name (- /j 1)))))
               (set! //a
                 (replace-nth
                   //a
                   /e4
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))))
             (set! //l (+ /i 1))
             (set! //g (- /j 1))
             (set! //k //l)
             (let while-loop ()
               (cond ((<= //k //g)
                      (begin
                        (set! //a/k
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- //k 1))
                              (list-ref name (- //k 1)))))
                        (cond ((< //a/k //p1)
                               (if (vector? //a)
                                 (vector-set!
                                   //a
                                   (- //k 1)
                                   (let ((name //a))
                                     (if (vector? name)
                                       (vector-ref name (- //l 1))
                                       (list-ref name (- //l 1)))))
                                 (set! //a
                                   (replace-nth
                                     //a
                                     //k
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- //l 1))
                                         (list-ref name (- //l 1)))))))
                               (if (vector? //a)
                                 (vector-set! //a (- //l 1) //a/k)
                                 (set! //a (replace-nth //a //l //a/k)))
                               (set! //l (+ //l 1))
                               (set! //k (+ //k 1)))
                              ((> //a/k //p2)
                               (if (vector? //a)
                                 (vector-set!
                                   //a
                                   (- //k 1)
                                   (let ((name //a))
                                     (if (vector? name)
                                       (vector-ref name (- //g 1))
                                       (list-ref name (- //g 1)))))
                                 (set! //a
                                   (replace-nth
                                     //a
                                     //k
                                     (let ((name //a))
                                       (if (vector? name)
                                         (vector-ref name (- //g 1))
                                         (list-ref name (- //g 1)))))))
                               (if (vector? //a)
                                 (vector-set! //a (- //g 1) //a/k)
                                 (set! //a (replace-nth //a //g //a/k)))
                               (set! //g (- //g 1)))
                              (#t (set! //k (+ //k 1)))))
                      (while-loop))
                     (#t #t)))
             (if (vector? //a)
               (vector-set! //a (- /i 1) //p1)
               (set! //a (replace-nth //a /i //p1)))
             (if (vector? //a)
               (vector-set! //a (- /j 1) //p2)
               (set! //a (replace-nth //a /j //p2)))
             (if (vector? //a)
               (vector-set!
                 //a
                 (- /i 1)
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- (- //l 1) 1))
                     (list-ref name (- (- //l 1) 1)))))
               (set! //a
                 (replace-nth
                   //a
                   /i
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (- //l 1) 1))
                       (list-ref name (- (- //l 1) 1)))))))
             (if (vector? //a)
               (vector-set! //a (- (- //l 1) 1) //p1)
               (set! //a (replace-nth //a (- //l 1) //p1)))
             (if (vector? //a)
               (vector-set!
                 //a
                 (- /j 1)
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- (+ //g 1) 1))
                     (list-ref name (- (+ //g 1) 1)))))
               (set! //a
                 (replace-nth
                   //a
                   /j
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (+ //g 1) 1))
                       (list-ref name (- (+ //g 1) 1)))))))
             (if (vector? //a)
               (vector-set! //a (- (+ //g 1) 1) //p2)
               (set! //a (replace-nth //a (+ //g 1) //p2)))
             (cond ((<= //n 1000)
                    (begin
                      (display "pivots = A[")
                      (begin
                        (display /e2)
                        (begin
                          (display "] = ")
                          (begin
                            (display //p1)
                            (begin
                              (display " A[")
                              (begin
                                (display /e4)
                                (begin
                                  (display "] = ")
                                  (begin
                                    (display //p2)
                                    (newline)
                                    (force-output)))))))))
                    (begin
                      (display "partition = ")
                      (begin
                        (display /i)
                        (begin
                          (display " -- ")
                          (begin
                            (display (- //l 2))
                            (begin
                              (display " -- ")
                              (begin
                                (display (+ //g 2))
                                (begin
                                  (display " -- ")
                                  (begin
                                    (display /j)
                                    (newline)
                                    (force-output)))))))))
                    (let ((/i-save /i) (/part '()))
                      (set! /i (+ //g 2))
                      (set! /sixth (quotient (+ (- /j /i) 1) 6))
                      (set! /e1 (+ /i /sixth))
                      (set! /e3 (quotient (+ /i /j) 2))
                      (set! /e2 (- /e3 /sixth))
                      (set! /e4 (+ /e3 /sixth))
                      (set! /e5 (- /j /sixth))
                      (set! /part
                        (list (list /i /e1)
                              (list /e1 /e2)
                              (list /e2 /e3)
                              (list /e3 /e4)
                              (list /e4 /e5)
                              (list /e5 /j)))
                      (let ((var-save /pair) (seq-save /part))
                        (if (vector? seq-save)
                          (set! seq-save (vector-elts seq-save)))
                        (let for-in-loop ((for-tmp seq-save))
                          (cond ((not (null? for-tmp))
                                 (set! /pair (car for-tmp))
                                 (@print_ar
                                   "== "
                                   //a
                                   (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 1 1))
                                       (list-ref name (- 1 1))))
                                   (let ((name /pair))
                                     (if (vector? name)
                                       (vector-ref name (- 2 1))
                                       (list-ref name (- 2 1)))))
                                 (for-in-loop (cdr for-tmp)))
                                (#t #t)))
                        (set! /pair var-save))
                      (set! /i /i-save))))
             (set! //a (@dpq_sort_test /k (+ //g 2) /j //a))
             (cond ((not (equal? //p1 //p2))
                    (set! //a (@dpq_sort_test /k //l //g //a))))
             (set! //a (@dpq_sort_test /k /i (- //l 2) //a))
             #t)))
    (set! funct-result //a)
    (set! //a //a-save)
    (set! /j /j-save)
    (set! /i /i-save)
    (set! /k /k-save)
    funct-result))

(define (@dpq_sort_iter /k /i /j //a)
  (let ((//a/s '())
        (//p1 0)
        (//p2 0)
        (//l 0)
        (//k 0)
        (//g 0)
        (/e2 0)
        (/e4 0)
        (//a2 0)
        (//a4 0)
        (/e1 0)
        (/e3 0)
        (/e5 0)
        (//a1 0)
        (//a3 0)
        (//a5 0)
        (/sixth 0))
    (set! /fl_flag1 0)
    (let while-loop ()
      (cond ((= /fl_flag1 0)
             (cond ((> (+ (- /j /i) 1) /k)
                    (set! /sixth (quotient (+ (- /j /i) 1) 6))
                    (set! /e1 (+ /i /sixth))
                    (set! /e3 (quotient (+ /i /j) 2))
                    (set! /e2 (- /e3 /sixth))
                    (set! /e4 (+ /e3 /sixth))
                    (set! /e5 (- /j /sixth))
                    (set! //a1
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e1 1))
                          (list-ref name (- /e1 1)))))
                    (set! //a2
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e2 1))
                          (list-ref name (- /e2 1)))))
                    (set! //a3
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e3 1))
                          (list-ref name (- /e3 1)))))
                    (set! //a4
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e4 1))
                          (list-ref name (- /e4 1)))))
                    (set! //a5
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e5 1))
                          (list-ref name (- /e5 1)))))
                    (cond ((> //a1 //a2)
                           (let ((/tmp-var2 //a2) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a2 /tmp-var1))))
                    (cond ((> //a4 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                             (set! //a4 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (cond ((> //a1 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a2 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a1 //a4)
                           (let ((/tmp-var2 //a4) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a4 /tmp-var1))))
                    (cond ((> //a3 //a4)
                           (let ((/tmp-var2 //a4) (/tmp-var1 //a3))
                             (set! //a3 /tmp-var2)
                             (set! //a4 /tmp-var1))))
                    (cond ((> //a2 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (cond ((> //a2 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a4 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                             (set! //a4 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (if (vector? //a)
                      (vector-set! //a (- /e1 1) //a1)
                      (set! //a (replace-nth //a /e1 //a1)))
                    (if (vector? //a)
                      (vector-set! //a (- /e3 1) //a3)
                      (set! //a (replace-nth //a /e3 //a3)))
                    (if (vector? //a)
                      (vector-set! //a (- /e5 1) //a5)
                      (set! //a (replace-nth //a /e5 //a5)))
                    (set! //p1 //a2)
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /e2 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- /i 1))
                            (list-ref name (- /i 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /e2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /i 1))
                              (list-ref name (- /i 1)))))))
                    (set! //p2 //a4)
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /e4 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- /j 1))
                            (list-ref name (- /j 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /e4
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1)))))))
                    (set! //l (+ /i 1))
                    (set! //g (- /j 1))
                    (set! //k //l)
                    (let while-loop ()
                      (cond ((<= //k //g)
                             (begin
                               (set! //a/k
                                 (let ((name //a))
                                   (if (vector? name)
                                     (vector-ref name (- //k 1))
                                     (list-ref name (- //k 1)))))
                               (cond ((< //a/k //p1)
                                      (if (vector? //a)
                                        (vector-set!
                                          //a
                                          (- //k 1)
                                          (let ((name //a))
                                            (if (vector? name)
                                              (vector-ref name (- //l 1))
                                              (list-ref name (- //l 1)))))
                                        (set! //a
                                          (replace-nth
                                            //a
                                            //k
                                            (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- //l 1))
                                                (list-ref name (- //l 1)))))))
                                      (if (vector? //a)
                                        (vector-set! //a (- //l 1) //a/k)
                                        (set! //a (replace-nth //a //l //a/k)))
                                      (set! //l (+ //l 1))
                                      (set! //k (+ //k 1)))
                                     ((> //a/k //p2)
                                      (if (vector? //a)
                                        (vector-set!
                                          //a
                                          (- //k 1)
                                          (let ((name //a))
                                            (if (vector? name)
                                              (vector-ref name (- //g 1))
                                              (list-ref name (- //g 1)))))
                                        (set! //a
                                          (replace-nth
                                            //a
                                            //k
                                            (let ((name //a))
                                              (if (vector? name)
                                                (vector-ref name (- //g 1))
                                                (list-ref name (- //g 1)))))))
                                      (if (vector? //a)
                                        (vector-set! //a (- //g 1) //a/k)
                                        (set! //a (replace-nth //a //g //a/k)))
                                      (set! //g (- //g 1)))
                                     (#t (set! //k (+ //k 1)))))
                             (while-loop))
                            (#t #t)))
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /i 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- (- //l 1) 1))
                            (list-ref name (- (- //l 1) 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /i
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- (- //l 1) 1))
                              (list-ref name (- (- //l 1) 1)))))))
                    (if (vector? //a)
                      (vector-set! //a (- (- //l 1) 1) //p1)
                      (set! //a (replace-nth //a (- //l 1) //p1)))
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /j 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- (+ //g 1) 1))
                            (list-ref name (- (+ //g 1) 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /j
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- (+ //g 1) 1))
                              (list-ref name (- (+ //g 1) 1)))))))
                    (if (vector? //a)
                      (vector-set! //a (- (+ //g 1) 1) //p2)
                      (set! //a (replace-nth //a (+ //g 1) //p2)))
                    (set! //a/s (cons /i //a/s))
                    (set! //a/s (cons (- //l 2) //a/s))
                    (cond ((not (equal? //p1 //p2))
                           (set! //a/s (cons //l //a/s))
                           (set! //a/s (cons //g //a/s))))
                    (set! /i (+ //g 2))
                    (set! /fl_flag1 0))
                   ((equal? //a/s '()) (set! /fl_flag1 1))
                   (#t
                    (set! /j (car //a/s))
                    (set! //a/s (cdr //a/s))
                    (set! /i (car //a/s))
                    (set! //a/s (cdr //a/s))
                    (set! /fl_flag1 0)))
             (while-loop))
            (#t #t))))
  //a)

(define (@dpq_sort_opt /k /i /j //a)
  (let ((//a/s '())
        (//p1 0)
        (//p2 0)
        (//l 0)
        (//k 0)
        (//g 0)
        (/e1 0)
        (/e2 0)
        (/e3 0)
        (/e4 0)
        (/e5 0)
        (//a1 0)
        (//a2 0)
        (//a3 0)
        (//a4 0)
        (//a5 0)
        (//a/k 0)
        (/sixth 0))
    (set! /fl_flag3 0)
    (let while-loop ()
      (cond ((= /fl_flag3 0)
             (cond ((> (+ (- /j /i) 1) /k)
                    (set! /sixth (quotient (+ (- /j /i) 1) 6))
                    (set! /e1 (+ /i /sixth))
                    (set! /e3 (quotient (+ /i /j) 2))
                    (set! /e2 (- /e3 /sixth))
                    (set! /e4 (+ /e3 /sixth))
                    (set! /e5 (- /j /sixth))
                    (set! //a1
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e1 1))
                          (list-ref name (- /e1 1)))))
                    (set! //a2
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e2 1))
                          (list-ref name (- /e2 1)))))
                    (set! //a3
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e3 1))
                          (list-ref name (- /e3 1)))))
                    (set! //a4
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e4 1))
                          (list-ref name (- /e4 1)))))
                    (set! //a5
                      (let ((name //a))
                        (if (vector? name)
                          (vector-ref name (- /e5 1))
                          (list-ref name (- /e5 1)))))
                    (cond ((> //a1 //a2)
                           (let ((/tmp-var2 //a2) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a2 /tmp-var1))))
                    (cond ((> //a4 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                             (set! //a4 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (cond ((> //a1 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a2 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a1 //a4)
                           (let ((/tmp-var2 //a4) (/tmp-var1 //a1))
                             (set! //a1 /tmp-var2)
                             (set! //a4 /tmp-var1))))
                    (cond ((> //a3 //a4)
                           (let ((/tmp-var2 //a4) (/tmp-var1 //a3))
                             (set! //a3 /tmp-var2)
                             (set! //a4 /tmp-var1))))
                    (cond ((> //a2 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (cond ((> //a2 //a3)
                           (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                             (set! //a2 /tmp-var2)
                             (set! //a3 /tmp-var1))))
                    (cond ((> //a4 //a5)
                           (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                             (set! //a4 /tmp-var2)
                             (set! //a5 /tmp-var1))))
                    (if (vector? //a)
                      (vector-set! //a (- /e1 1) //a1)
                      (set! //a (replace-nth //a /e1 //a1)))
                    (if (vector? //a)
                      (vector-set! //a (- /e3 1) //a3)
                      (set! //a (replace-nth //a /e3 //a3)))
                    (if (vector? //a)
                      (vector-set! //a (- /e5 1) //a5)
                      (set! //a (replace-nth //a /e5 //a5)))
                    (set! //p1 //a2)
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /e2 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- /i 1))
                            (list-ref name (- /i 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /e2
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /i 1))
                              (list-ref name (- /i 1)))))))
                    (set! //p2 //a4)
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /e4 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- /j 1))
                            (list-ref name (- /j 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /e4
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- /j 1))
                              (list-ref name (- /j 1)))))))
                    (set! //l (+ /i 1))
                    (set! //g (- /j 1))
                    (set! //k //l)
                    (set! /fl_flag2 0)
                    (let while-loop ()
                      (cond ((= /fl_flag2 0)
                             (begin
                               (cond ((> //k //g) (set! /fl_flag2 1))
                                     (#t (set! /fl_flag2 0)))
                               (cond ((= /fl_flag2 0)
                                      (set! //a/k
                                        (let ((name //a))
                                          (if (vector? name)
                                            (vector-ref name (- //k 1))
                                            (list-ref name (- //k 1)))))
                                      (cond ((< //a/k //p1)
                                             (cond ((not (equal? //k //l))
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //k 1)
                                                        (let ((name //a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- //l 1))
                                                            (list-ref
                                                              name
                                                              (- //l 1)))))
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //k
                                                          (let ((name //a))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- //l 1))
                                                              (list-ref
                                                                name
                                                                (- //l 1)))))))
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //l 1)
                                                        //a/k)
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //l
                                                          //a/k)))))
                                             (set! //l (+ //l 1))
                                             (set! /fl_flag2 0))
                                            ((> //a/k //p2)
                                             (set! /fl_flag1 0)
                                             (let while-loop ()
                                               (cond ((= /fl_flag1 0)
                                                      (cond ((<= (let ((name //a))
                                                                   (if (vector?
                                                                         name)
                                                                     (vector-ref
                                                                       name
                                                                       (- //g
                                                                          1))
                                                                     (list-ref
                                                                       name
                                                                       (- //g
                                                                          1))))
                                                                 //p2)
                                                             (set! /fl_flag1 1))
                                                            (#t
                                                             (set! //g
                                                               (- //g 1))
                                                             (cond ((= (+ //g 1)
                                                                       //k)
                                                                    (set! /fl_flag1
                                                                      2))
                                                                   (#t
                                                                    (set! /fl_flag1
                                                                      0)))))
                                                      (while-loop))
                                                     (#t #t)))
                                             (cond ((= /fl_flag1 2)
                                                    (set! /fl_flag2 1))
                                                   ((< (let ((name //a))
                                                         (if (vector? name)
                                                           (vector-ref
                                                             name
                                                             (- //g 1))
                                                           (list-ref
                                                             name
                                                             (- //g 1))))
                                                       //p1)
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //k 1)
                                                        (let ((name //a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- //l 1))
                                                            (list-ref
                                                              name
                                                              (- //l 1)))))
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //k
                                                          (let ((name //a))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- //l 1))
                                                              (list-ref
                                                                name
                                                                (- //l 1)))))))
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //l 1)
                                                        (let ((name //a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- //g 1))
                                                            (list-ref
                                                              name
                                                              (- //g 1)))))
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //l
                                                          (let ((name //a))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- //g 1))
                                                              (list-ref
                                                                name
                                                                (- //g 1)))))))
                                                    (set! //l (+ //l 1))
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //g 1)
                                                        //a/k)
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //g
                                                          //a/k)))
                                                    (set! //g (- //g 1))
                                                    (set! /fl_flag2 0))
                                                   (#t
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //k 1)
                                                        (let ((name //a))
                                                          (if (vector? name)
                                                            (vector-ref
                                                              name
                                                              (- //g 1))
                                                            (list-ref
                                                              name
                                                              (- //g 1)))))
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //k
                                                          (let ((name //a))
                                                            (if (vector? name)
                                                              (vector-ref
                                                                name
                                                                (- //g 1))
                                                              (list-ref
                                                                name
                                                                (- //g 1)))))))
                                                    (if (vector? //a)
                                                      (vector-set!
                                                        //a
                                                        (- //g 1)
                                                        //a/k)
                                                      (set! //a
                                                        (replace-nth
                                                          //a
                                                          //g
                                                          //a/k)))
                                                    (set! //g (- //g 1))
                                                    (set! /fl_flag2 0))))
                                            (#t (set! /fl_flag2 0)))
                                      (cond ((= /fl_flag2 0)
                                             (set! //k (+ //k 1))
                                             (set! /fl_flag2 0))))))
                             (while-loop))
                            (#t #t)))
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /i 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- (- //l 1) 1))
                            (list-ref name (- (- //l 1) 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /i
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- (- //l 1) 1))
                              (list-ref name (- (- //l 1) 1)))))))
                    (if (vector? //a)
                      (vector-set! //a (- (- //l 1) 1) //p1)
                      (set! //a (replace-nth //a (- //l 1) //p1)))
                    (if (vector? //a)
                      (vector-set!
                        //a
                        (- /j 1)
                        (let ((name //a))
                          (if (vector? name)
                            (vector-ref name (- (+ //g 1) 1))
                            (list-ref name (- (+ //g 1) 1)))))
                      (set! //a
                        (replace-nth
                          //a
                          /j
                          (let ((name //a))
                            (if (vector? name)
                              (vector-ref name (- (+ //g 1) 1))
                              (list-ref name (- (+ //g 1) 1)))))))
                    (if (vector? //a)
                      (vector-set! //a (- (+ //g 1) 1) //p2)
                      (set! //a (replace-nth //a (+ //g 1) //p2)))
                    (set! //a/s (cons /i //a/s))
                    (set! //a/s (cons (- //l 2) //a/s))
                    (cond ((not (equal? //p1 //p2))
                           (set! //a/s (cons //l //a/s))
                           (set! //a/s (cons //g //a/s))))
                    (set! /i (+ //g 2))
                    (set! /fl_flag3 0))
                   ((equal? //a/s '()) (set! /fl_flag3 1))
                   (#t
                    (set! /j (car //a/s))
                    (set! //a/s (cdr //a/s))
                    (set! /i (car //a/s))
                    (set! //a/s (cdr //a/s))
                    (set! /fl_flag3 0)))
             (while-loop))
            (#t #t))))
  //a)

(define (@dpq_sort_rec /k /i /j //a)
  (let while-loop ()
    (cond ((> (+ (- /j /i) 1) /k)
           (let ((//p1 0)
                 (//p2 0)
                 (//l 0)
                 (//k 0)
                 (//g 0)
                 (/sixth (quotient (+ (- /j /i) 1) 6))
                 (/e3 (quotient (+ /i /j) 2)))
             (let ((/e2 /i) (/e4 /j))
               (let ((//a2 (let ((name //a))
                             (if (vector? name)
                               (vector-ref name (- /e2 1))
                               (list-ref name (- /e2 1)))))
                     (//a4 (let ((name //a))
                             (if (vector? name)
                               (vector-ref name (- /e4 1))
                               (list-ref name (- /e4 1))))))
                 (cond ((> //a2 //a4)
                        (let ((/tmp-var2 //a4) (/tmp-var1 //a2))
                          (set! //a2 /tmp-var2)
                          (set! //a4 /tmp-var1))))
                 (set! //p1 //a2)
                 (if (vector? //a)
                   (vector-set!
                     //a
                     (- /e2 1)
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /i 1))
                         (list-ref name (- /i 1)))))
                   (set! //a
                     (replace-nth
                       //a
                       /e2
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /i 1))
                           (list-ref name (- /i 1)))))))
                 (set! //p2 //a4)
                 (if (vector? //a)
                   (vector-set!
                     //a
                     (- /e4 1)
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /j 1))
                         (list-ref name (- /j 1)))))
                   (set! //a
                     (replace-nth
                       //a
                       /e4
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- /j 1))
                           (list-ref name (- /j 1)))))))
                 (set! //l (+ /i 1))
                 (set! //g (- /j 1))
                 (set! //k //l)
                 (let while-loop ()
                   (cond ((<= //k //g)
                          (cond ((< (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- //k 1))
                                        (list-ref name (- //k 1))))
                                    //p1)
                                 (let ((/tmp-var2
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- //k 1))
                                             (list-ref name (- //k 1)))))
                                       (/tmp-var1
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- //l 1))
                                             (list-ref name (- //l 1))))))
                                   (if (vector? //a)
                                     (vector-set! //a (- //l 1) /tmp-var2)
                                     (set! //a (replace-nth //a //l /tmp-var2)))
                                   (if (vector? //a)
                                     (vector-set! //a (- //k 1) /tmp-var1)
                                     (set! //a
                                       (replace-nth //a //k /tmp-var1))))
                                 (set! //l (+ //l 1))
                                 (set! //k (+ //k 1)))
                                ((> (let ((name //a))
                                      (if (vector? name)
                                        (vector-ref name (- //k 1))
                                        (list-ref name (- //k 1))))
                                    //p2)
                                 (let ((/tmp-var2
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- //g 1))
                                             (list-ref name (- //g 1)))))
                                       (/tmp-var1
                                         (let ((name //a))
                                           (if (vector? name)
                                             (vector-ref name (- //k 1))
                                             (list-ref name (- //k 1))))))
                                   (if (vector? //a)
                                     (vector-set! //a (- //k 1) /tmp-var2)
                                     (set! //a (replace-nth //a //k /tmp-var2)))
                                   (if (vector? //a)
                                     (vector-set! //a (- //g 1) /tmp-var1)
                                     (set! //a
                                       (replace-nth //a //g /tmp-var1))))
                                 (set! //g (- //g 1)))
                                (#t (set! //k (+ //k 1))))
                          (while-loop))
                         (#t #t)))
                 (if (vector? //a)
                   (vector-set!
                     //a
                     (- /i 1)
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (- //l 1) 1))
                         (list-ref name (- (- //l 1) 1)))))
                   (set! //a
                     (replace-nth
                       //a
                       /i
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- (- //l 1) 1))
                           (list-ref name (- (- //l 1) 1)))))))
                 (if (vector? //a)
                   (vector-set! //a (- (- //l 1) 1) //p1)
                   (set! //a (replace-nth //a (- //l 1) //p1)))
                 (if (vector? //a)
                   (vector-set!
                     //a
                     (- /j 1)
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (+ //g 1) 1))
                         (list-ref name (- (+ //g 1) 1)))))
                   (set! //a
                     (replace-nth
                       //a
                       /j
                       (let ((name //a))
                         (if (vector? name)
                           (vector-ref name (- (+ //g 1) 1))
                           (list-ref name (- (+ //g 1) 1)))))))
                 (if (vector? //a)
                   (vector-set! //a (- (+ //g 1) 1) //p2)
                   (set! //a (replace-nth //a (+ //g 1) //p2)))
                 (set! //a (@dpq_sort_rec /k /i (- //l 2) //a))
                 (cond ((not (equal? //p1 //p2))
                        (set! //a (@dpq_sort_rec /k //l //g //a))))
                 (set! /i (+ //g 2)))))
           (while-loop))
          (#t #t)))
  //a)

(define (@print_ar /str //a /i /j)
  (begin (display /str) (force-output))
  (let ((var-save /k) (for-step 1) (for-end /j))
    (set! /k /i)
    (let for-loop ()
      (cond ((or (and (> 1 0) (<= /k for-end))
                 (and (< 1 0) (>= /k for-end)))
             (begin
               (display
                 (let ((name //a))
                   (if (vector? name)
                     (vector-ref name (- /k 1))
                     (list-ref name (- /k 1)))))
               (begin (display " ") (force-output)))
             (set! /k (+ /k for-step))
             (for-loop))
            (#t #t)))
    (set! /k var-save))
  (begin (display "") (newline) (force-output)))

(define (@dpq_sort_rec_dumb_pivot /k /i /j //a)
  (cond ((> (+ (- /j /i) 1) /k)
         (let ((//p1 0)
               (//p2 0)
               (//l 0)
               (//k 0)
               (//g 0)
               (/sixth (quotient (+ (- /j /i) 1) 6))
               (/e3 (quotient (+ /i /j) 2)))
           (let ((/e2 /i) (/e4 /j))
             (let ((//a2 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e2 1))
                             (list-ref name (- /e2 1)))))
                   (//a4 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e4 1))
                             (list-ref name (- /e4 1))))))
               (cond ((> //a2 //a4)
                      (let ((/tmp-var2 //a4) (/tmp-var1 //a2))
                        (set! //a2 /tmp-var2)
                        (set! //a4 /tmp-var1))))
               (set! //p1 //a2)
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /e2 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /i 1))
                       (list-ref name (- /i 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /e2
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /i 1))
                         (list-ref name (- /i 1)))))))
               (set! //p2 //a4)
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /e4 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /e4
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /j 1))
                         (list-ref name (- /j 1)))))))
               (set! //l (+ /i 1))
               (set! //g (- /j 1))
               (set! //k //l)
               (let while-loop ()
                 (cond ((<= //k //g)
                        (cond ((< (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- //k 1))
                                      (list-ref name (- //k 1))))
                                  //p1)
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //k 1))
                                           (list-ref name (- //k 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //l 1))
                                           (list-ref name (- //l 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- //l 1) /tmp-var2)
                                   (set! //a (replace-nth //a //l /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- //k 1) /tmp-var1)
                                   (set! //a (replace-nth //a //k /tmp-var1))))
                               (set! //l (+ //l 1))
                               (set! //k (+ //k 1)))
                              ((> (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- //k 1))
                                      (list-ref name (- //k 1))))
                                  //p2)
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //g 1))
                                           (list-ref name (- //g 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //k 1))
                                           (list-ref name (- //k 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- //k 1) /tmp-var2)
                                   (set! //a (replace-nth //a //k /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- //g 1) /tmp-var1)
                                   (set! //a (replace-nth //a //g /tmp-var1))))
                               (set! //g (- //g 1)))
                              (#t (set! //k (+ //k 1))))
                        (while-loop))
                       (#t #t)))
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /i 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (- //l 1) 1))
                       (list-ref name (- (- //l 1) 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /i
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (- //l 1) 1))
                         (list-ref name (- (- //l 1) 1)))))))
               (if (vector? //a)
                 (vector-set! //a (- (- //l 1) 1) //p1)
                 (set! //a (replace-nth //a (- //l 1) //p1)))
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /j 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (+ //g 1) 1))
                       (list-ref name (- (+ //g 1) 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /j
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (+ //g 1) 1))
                         (list-ref name (- (+ //g 1) 1)))))))
               (if (vector? //a)
                 (vector-set! //a (- (+ //g 1) 1) //p2)
                 (set! //a (replace-nth //a (+ //g 1) //p2)))
               (set! //a
                 (@dpq_sort_rec_dumb_pivot /k /i (- //l 2) //a))
               (cond ((not (equal? //p1 //p2))
                      (set! //a
                        (@dpq_sort_rec_dumb_pivot /k //l //g //a))))
               (set! //a
                 (@dpq_sort_rec_dumb_pivot /k (+ //g 2) /j //a)))))))
  //a)

(define (@dpq_sort_rec_mine /k /i /j //a)
  (cond ((> (+ (- /j /i) 1) /k)
         (let ((//p1 0)
               (//p2 0)
               (//l 0)
               (//k 0)
               (//g 0)
               (/sixth (quotient (+ (- /j /i) 1) 6))
               (/e3 (quotient (+ /i /j) 2)))
           (let ((/e1 (+ /i /sixth))
                 (/e2 (- /e3 /sixth))
                 (/e4 (+ /e3 /sixth))
                 (/e5 (- /j /sixth)))
             (let ((//a1 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e1 1))
                             (list-ref name (- /e1 1)))))
                   (//a2 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e2 1))
                             (list-ref name (- /e2 1)))))
                   (//a3 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e3 1))
                             (list-ref name (- /e3 1)))))
                   (//a4 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e4 1))
                             (list-ref name (- /e4 1)))))
                   (//a5 (let ((name //a))
                           (if (vector? name)
                             (vector-ref name (- /e5 1))
                             (list-ref name (- /e5 1))))))
               (cond ((> //a1 //a2)
                      (let ((/tmp-var2 //a2) (/tmp-var1 //a1))
                        (set! //a1 /tmp-var2)
                        (set! //a2 /tmp-var1))))
               (cond ((> //a4 //a5)
                      (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                        (set! //a4 /tmp-var2)
                        (set! //a5 /tmp-var1))))
               (cond ((> //a1 //a3)
                      (let ((/tmp-var2 //a3) (/tmp-var1 //a1))
                        (set! //a1 /tmp-var2)
                        (set! //a3 /tmp-var1))))
               (cond ((> //a2 //a3)
                      (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                        (set! //a2 /tmp-var2)
                        (set! //a3 /tmp-var1))))
               (cond ((> //a1 //a4)
                      (let ((/tmp-var2 //a4) (/tmp-var1 //a1))
                        (set! //a1 /tmp-var2)
                        (set! //a4 /tmp-var1))))
               (cond ((> //a3 //a4)
                      (let ((/tmp-var2 //a4) (/tmp-var1 //a3))
                        (set! //a3 /tmp-var2)
                        (set! //a4 /tmp-var1))))
               (cond ((> //a2 //a5)
                      (let ((/tmp-var2 //a5) (/tmp-var1 //a2))
                        (set! //a2 /tmp-var2)
                        (set! //a5 /tmp-var1))))
               (cond ((> //a2 //a3)
                      (let ((/tmp-var2 //a3) (/tmp-var1 //a2))
                        (set! //a2 /tmp-var2)
                        (set! //a3 /tmp-var1))))
               (cond ((> //a4 //a5)
                      (let ((/tmp-var2 //a5) (/tmp-var1 //a4))
                        (set! //a4 /tmp-var2)
                        (set! //a5 /tmp-var1))))
               (if (vector? //a)
                 (vector-set! //a (- /e1 1) //a1)
                 (set! //a (replace-nth //a /e1 //a1)))
               (if (vector? //a)
                 (vector-set! //a (- /e3 1) //a3)
                 (set! //a (replace-nth //a /e3 //a3)))
               (if (vector? //a)
                 (vector-set! //a (- /e5 1) //a5)
                 (set! //a (replace-nth //a /e5 //a5)))
               (set! //p1 //a2)
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /e2 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /i 1))
                       (list-ref name (- /i 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /e2
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /i 1))
                         (list-ref name (- /i 1)))))))
               (set! //p2 //a4)
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /e4 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- /j 1))
                       (list-ref name (- /j 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /e4
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- /j 1))
                         (list-ref name (- /j 1)))))))
               (set! //l (+ /i 1))
               (set! //g (- /j 1))
               (set! //k //l)
               (let while-loop ()
                 (cond ((<= //k //g)
                        (cond ((< (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- //k 1))
                                      (list-ref name (- //k 1))))
                                  //p1)
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //k 1))
                                           (list-ref name (- //k 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //l 1))
                                           (list-ref name (- //l 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- //l 1) /tmp-var2)
                                   (set! //a (replace-nth //a //l /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- //k 1) /tmp-var1)
                                   (set! //a (replace-nth //a //k /tmp-var1))))
                               (set! //l (+ //l 1))
                               (set! //k (+ //k 1)))
                              ((> (let ((name //a))
                                    (if (vector? name)
                                      (vector-ref name (- //k 1))
                                      (list-ref name (- //k 1))))
                                  //p2)
                               (let ((/tmp-var2
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //g 1))
                                           (list-ref name (- //g 1)))))
                                     (/tmp-var1
                                       (let ((name //a))
                                         (if (vector? name)
                                           (vector-ref name (- //k 1))
                                           (list-ref name (- //k 1))))))
                                 (if (vector? //a)
                                   (vector-set! //a (- //k 1) /tmp-var2)
                                   (set! //a (replace-nth //a //k /tmp-var2)))
                                 (if (vector? //a)
                                   (vector-set! //a (- //g 1) /tmp-var1)
                                   (set! //a (replace-nth //a //g /tmp-var1))))
                               (set! //g (- //g 1)))
                              (#t (set! //k (+ //k 1))))
                        (while-loop))
                       (#t #t)))
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /i 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (- //l 1) 1))
                       (list-ref name (- (- //l 1) 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /i
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (- //l 1) 1))
                         (list-ref name (- (- //l 1) 1)))))))
               (if (vector? //a)
                 (vector-set! //a (- (- //l 1) 1) //p1)
                 (set! //a (replace-nth //a (- //l 1) //p1)))
               (if (vector? //a)
                 (vector-set!
                   //a
                   (- /j 1)
                   (let ((name //a))
                     (if (vector? name)
                       (vector-ref name (- (+ //g 1) 1))
                       (list-ref name (- (+ //g 1) 1)))))
                 (set! //a
                   (replace-nth
                     //a
                     /j
                     (let ((name //a))
                       (if (vector? name)
                         (vector-ref name (- (+ //g 1) 1))
                         (list-ref name (- (+ //g 1) 1)))))))
               (if (vector? //a)
                 (vector-set! //a (- (+ //g 1) 1) //p2)
                 (set! //a (replace-nth //a (+ //g 1) //p2)))
               (set! //a
                 (@dpq_sort_rec_mine /k /i (- //l 2) //a))
               (cond ((not (equal? //p1 //p2))
                      (set! //a (@dpq_sort_rec_mine /k //l //g //a))))
               (set! //a
                 (@dpq_sort_rec_mine /k (+ //g 2) /j //a)))))))
  //a)

(define (@powerset /set)
  (let ((//r '()) (/x '()) (/s1 '()) (/y '()))
    (cond ((null? /set) (set! //r (list '())))
          (#t
           (set! /x (car /set))
           (set! /s1 (@powerset (cdr /set)))
           (let ((var-save /y) (seq-save /s1))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /y (car for-tmp))
                      (set! //r (cons (cons /x /y) //r))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /y var-save))
           (set! //r (concat /s1 //r))))
    //r))

(define (@fib /n)
  (if (<= /n 1)
    1
    (+ (@fib (- /n 1)) (@fib (- /n 2)))))

(set! //e/b/c/d/i/c
  (string-append
    (string-append
      (string-append
        (string-append
          (string-append
            (string-append
              (string-append
                (string-append
                  (string-append
                    (string-append
                      (string-append
                        (string-append
                          (string-append
                            (string-append
                              (string-append
                                "00010203372d2e2f1605250b0c0d0e0f"
                                "101112133c3d322618193f271c1d1e1f")
                              "405a7f7b5b6c507d4d5d5c4e6b604b61")
                            "f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f")
                          "7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6")
                        "d7d8d9e2e3e4e5e6e7e8e94ae0bb5f6d")
                      "79818283848586878889919293949596")
                    "979899a2a3a4a5a6a7a8a9c04fd0a107")
                  "202122232415061728292a2b2c090a1b")
                "30311a333435360838393a3b04143ee1")
              "4142434445466a484951525354555657")
            "58596263646566676869707172737475")
          "767778808a8b8c8d8e8f909a9b9c9d9e")
        "9fa0aaabacadaeafb0b1b2b3b4b5b6b7")
      "b8b9ba47bcbdbebfcacbcccdcecfdadb")
    "dcdddedfeaebecedeeeffafbfcfdfeff"))

(set! //a/s/c/i/i
  (string-append
    (string-append
      (string-append
        (string-append
          (string-append
            (string-append
              (string-append
                (string-append
                  (string-append
                    (string-append
                      (string-append
                        (string-append
                          (string-append
                            (string-append
                              (string-append
                                "000102039C09867F978D8E0B0C0D0E0F"
                                "101112139D8508871819928F1C1D1E1F")
                              "80818283840A171B88898A8B8C050607")
                            "909116939495960498999A9B14159E1A")
                          "20A0A1A2A3A4A5E3A7A85B2E3C282B7C")
                        "26A9AAABACADAEAFB0B121242A293B5E")
                      "2D2FB2B3B4B5B6B7B8B9A62C255F3E3F")
                    "BABBBCBDBEBFC0C1C2603A2340273D22")
                  "C3616263646566676869C4C5C6C7C8C9")
                "CA6A6B6C6D6E6F707172CBCCCDCECFD0")
              "D17E737475767778797AD2D3D4D5D6D7")
            "D8D9DADBDCDDDEDFE0E1E25DE4E5E6E7")
          "7B414243444546474849E8E9EAEBECED")
        "7D4A4B4C4D4E4F505152EEEFF0F1F2F3")
      "5C9F535455565758595AF4F5F6F7F8F9")
    "30313233343536373839FAFBFCFDFEFF"))

(define (@ebcdic_hex_to_char /hex)
  (@list_to_string
    (list (@hex_to_num
            (let ((f (* 2 (@hex_to_num /hex))))
              (substring //a/s/c/i/i f (+ f 2)))))))

