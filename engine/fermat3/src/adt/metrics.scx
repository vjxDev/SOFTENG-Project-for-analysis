(define (/foreach-metrics-1 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/where)
         (@down_to 2)
         (@down)
         (set! /fl_flag1 0)
         (let while-loop ()
           (cond ((= /fl_flag1 0)
                  (begin
                    (cond ((= (@st (@i)) //t_/proc)
                           (set! //name (@v (list-ref (@i) (+ 1 1))))
                           (cond ((> (@stat_count (@i)) /bignum)
                                  (set! /bignum (@stat_count (@i)))
                                  (set! /bigname //name)))))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-metrics-2 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/a_/s)
         (set! /size (@size (list-ref (@i) (+ 1 2))))
         (set! /total (+ /total /size))
         (set! //r
           (+ //r (* (@effective_size (@i)) /size))))
        ((= (@st (@i)) //t_/where)
         (set! /size (@size (list-ref (@i) (+ 1 2))))
         (set! /total (+ /total /size))
         (set! //r
           (+ //r (* (@effective_size (@i)) /size))))))

(define (/foreach-metrics-3 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (@down)
         (set! /fl_flag1 0)
         (let while-loop ()
           (cond ((= /fl_flag1 0)
                  (begin
                    (set! /total (+ /total 1))
                    (cond ((@set_subset?
                             (@used (list-ref (@i) (+ 1 2)))
                             //constants)
                           (set! /c1 (+ /c1 1))))
                    (cond ((null? (@set_intersect
                                    (@used (list-ref (@i) (+ 1 2)))
                                    //assigned))
                           (set! /c2 (+ /c2 1))))
                    (cond ((not (@right?)) (set! /fl_flag1 1))
                          (#t (@right) (set! /fl_flag1 0))))
                  (while-loop))
                 (#t #t))))))

(define (/foreach-metrics-4 //depth //a/s_/type)
  (cond ((member (@st (@i)) //mth_/rels)
         (set! /p1 (@tpf_fields (list-ref (@i) (+ 1 1))))
         (cond ((= (if (vector? /p1)
                     (vector-length /p1)
                     (length /p1))
                   1)
                (set! /p2 (@tpf_fields (list-ref (@i) (+ 1 2))))
                (cond ((= (if (vector? /p2)
                            (vector-length /p2)
                            (length /p2))
                          1)
                       (set! //pairs
                         (@tpf_add_pair (car /p1) (car /p2) //pairs)))))))))

(define (/foreach-metrics-5 //depth //a/s_/type)
  (cond ((= (@st (@i)) //t_/assignment)
         (set! /p1
           (@tpf_fields
             (@lvalue_to_expn
               (list-ref (list-ref (@i) (+ 1 1)) (+ 1 1)))))
         (cond ((= (if (vector? /p1)
                     (vector-length /p1)
                     (length /p1))
                   1)
                (set! /p2
                  (@tpf_fields
                    (list-ref (list-ref (@i) (+ 1 1)) (+ 1 2))))
                (cond ((= (if (vector? /p2)
                            (vector-length /p2)
                            (length /p2))
                          1)
                       (set! //pairs
                         (@tpf_add_pair (car /p1) (car /p2) //pairs)))))))))

(set! //qry_/statements
  (@make_name "Qry_Statements"))

(set! //qry_/total_/size
  (@make_name "Qry_Total_Size"))

(set! //qry_/stat_/count
  (@make_name "Qry_Stat_Count"))

(set! //qry_/stat_/count_/n/c
  (@make_name "Qry_Stat_Count_NC"))

(set! //qry_/mc/cabe_/metric
  (@make_name "Qry_McCabe_Metric"))

(set! //qry_/c/f/d/f_/metric
  (@make_name "Qry_CFDF_Metric"))

(set! //qry_/b/l_/metric
  (@make_name "Qry_BL_Metric"))

(set! //qry_/struct_/metric
  (@make_name "Qry_Struct_Metric"))

(set! //qry_/spec_/types
  (@make_name "Qry_Spec_Types"))

(set! //b/u/g/f/i/x
  "                                                             ")

(define (@stat_types //i)
  (let ((//result '()))
    (cond ((and (@has_statements_type? (@gt //i))
                (@cs? //i))
           (let ((//prev (@dtable_get //i //qry_/statements))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (cond ((= (@gt //i) //t_/statement)
                           (set! //result (list (@st //i)))))
                    (set! //result
                      (@set_union
                        //result
                        (let ((l (let ((l //comps) (map-result '()))
                                   (let while-loop ()
                                     (cond ((not (null? l))
                                            (set! map-result
                                              (cons (@stat_types (car l))
                                                    map-result))
                                            (set! l (cdr l))
                                            (while-loop))
                                           (#t #t)))
                                   (reverse map-result)))
                              (reduce-result '()))
                          (cond ((null? l) '())
                                (#t
                                 (set! reduce-result (car l))
                                 (set! l (cdr l))
                                 (let while-loop ()
                                   (cond ((not (null? l))
                                          (set! reduce-result
                                            (@set_union reduce-result (car l)))
                                          (set! l (cdr l))
                                          (while-loop))
                                         (#t #t)))
                                 reduce-result)))))
                    (@dtable_put //i //qry_/statements //result))
                   (#t (set! //result (@dtable_value_part //prev))))))
          (#t
           (set! //result
             (if (= (@gt //i) //t_/statement)
               (list (@st //i))
               '()))))
    //result))

(define (@spec_types //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r '())
    (cond ((@cs? //i)
           (let ((//prev (@dtable_get //i //qry_/spec_/types)))
             (cond ((null? //prev)
                    (set! //r
                      (@set_union
                        (list (@st //i))
                        (let ((l (let ((l (@cs //i)) (map-result '()))
                                   (let while-loop ()
                                     (cond ((not (null? l))
                                            (set! map-result
                                              (cons (@spec_types (car l))
                                                    map-result))
                                            (set! l (cdr l))
                                            (while-loop))
                                           (#t #t)))
                                   (reverse map-result)))
                              (reduce-result '()))
                          (cond ((null? l) '())
                                (#t
                                 (set! reduce-result (car l))
                                 (set! l (cdr l))
                                 (let while-loop ()
                                   (cond ((not (null? l))
                                          (set! reduce-result
                                            (@set_union reduce-result (car l)))
                                          (set! l (cdr l))
                                          (while-loop))
                                         (#t #t)))
                                 reduce-result)))))
                    (@dtable_put //i //qry_/spec_/types //r))
                   (#t (set! //r (@dtable_value_part //prev))))))
          (#t (set! //r (list (@st //i)))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@total_size //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 1)
    (cond ((@cs? //i)
           (let ((//prev (@dtable_get //i //qry_/total_/size))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (+ //r
                         (let ((l (let ((l //comps) (map-result '()))
                                    (let while-loop ()
                                      (cond ((not (null? l))
                                             (set! map-result
                                               (cons (@total_size (car l))
                                                     map-result))
                                             (set! l (cdr l))
                                             (while-loop))
                                            (#t #t)))
                                    (reverse map-result)))
                               (reduce-result '()))
                           (cond ((null? l) '())
                                 (#t
                                  (set! reduce-result (car l))
                                  (set! l (cdr l))
                                  (let while-loop ()
                                    (cond ((not (null? l))
                                           (set! reduce-result
                                             (+ reduce-result (car l)))
                                           (set! l (cdr l))
                                           (while-loop))
                                          (#t #t)))
                                  reduce-result)))))
                    (@dtable_put //i //qry_/total_/size //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@stat_count //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r (if (= (@gt //i) //t_/statement) 1 0))
    (cond ((and (@has_statements_type? (@gt //i))
                (@cs? //i))
           (let ((//prev (@dtable_get //i //qry_/stat_/count))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (+ //r
                         (let ((l (let ((l //comps) (map-result '()))
                                    (let while-loop ()
                                      (cond ((not (null? l))
                                             (set! map-result
                                               (cons (@stat_count (car l))
                                                     map-result))
                                             (set! l (cdr l))
                                             (while-loop))
                                            (#t #t)))
                                    (reverse map-result)))
                               (reduce-result '()))
                           (cond ((null? l) '())
                                 (#t
                                  (set! reduce-result (car l))
                                  (set! l (cdr l))
                                  (let while-loop ()
                                    (cond ((not (null? l))
                                           (set! reduce-result
                                             (+ reduce-result (car l)))
                                           (set! l (cdr l))
                                           (while-loop))
                                          (#t #t)))
                                  reduce-result)))))
                    (@dtable_put //i //qry_/stat_/count //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@stat_count_nc //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r
      (if (and (= (@gt //i) //t_/statement)
               (not (= (@st //i) //t_/comment)))
        1
        0))
    (cond ((and (@has_statements_type? (@gt //i))
                (@cs? //i))
           (let ((//prev
                   (@dtable_get //i //qry_/stat_/count_/n/c))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (+ //r
                         (let ((l (let ((l //comps) (map-result '()))
                                    (let while-loop ()
                                      (cond ((not (null? l))
                                             (set! map-result
                                               (cons (@stat_count_nc (car l))
                                                     map-result))
                                             (set! l (cdr l))
                                             (while-loop))
                                            (#t #t)))
                                    (reverse map-result)))
                               (reduce-result '()))
                           (cond ((null? l) '())
                                 (#t
                                  (set! reduce-result (car l))
                                  (set! l (cdr l))
                                  (let while-loop ()
                                    (cond ((not (null? l))
                                           (set! reduce-result
                                             (+ reduce-result (car l)))
                                           (set! l (cdr l))
                                           (while-loop))
                                          (#t #t)))
                                  reduce-result)))))
                    (@dtable_put //i //qry_/stat_/count_/n/c //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@gen_type_count //type //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r (if (= (@gt //i) //type) 1 0))
    (cond ((@cs? //i)
           (let ((//comps (@cs //i)))
             (let while-loop ()
               (cond ((not (null? //comps))
                      (begin
                        (set! //r
                          (+ //r (@gen_type_count //type (car //comps))))
                        (set! //comps (cdr //comps)))
                      (while-loop))
                     (#t #t))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@spec_type_count //type //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r (if (= (@st //i) //type) 1 0))
    (cond ((@cs? //i)
           (let ((//comps (@cs //i)))
             (let while-loop ()
               (cond ((not (null? //comps))
                      (begin
                        (set! //r
                          (+ //r (@spec_type_count //type (car //comps))))
                        (set! //comps (cdr //comps)))
                      (while-loop))
                     (#t #t))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@mccabe //i) (+ (@mccabe_sub //i) 1))

(define (@mccabe_sub //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 0)
    (cond ((= (@st //i) //t_/for) (set! //r 1))
          ((or (= (@st //i) //t_/proc)
               (= (@st //i) //t_/funct)
               (= (@st //i) //t_/b/funct)
               (= (@st //i) //t_/m/w_/proc)
               (= (@st //i) //t_/m/w_/funct)
               (= (@st //i) //t_/m/w_/b/funct))
           (set! //r 1))
          ((= (@st //i) //t_/d_/if) (set! //r (- 1))))
    (cond ((= (@gt //i) //t_/condition)
           (cond ((or (= (@st //i) //t_/true)
                      (= (@st //i) //t_/false))
                  (set! //r 0))
                 (#t (set! //r 1))))
          ((= (@gt //i) //t_/expression) (set! //r 0))
          ((or (= (@st //i) //t_/assert)
               (= (@st //i) //t_/spec))
           (set! //r 0))
          ((@cs? //i)
           (let ((//prev (@dtable_get //i //qry_/mc/cabe_/metric))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (+ //r
                         (let ((l (let ((l //comps) (map-result '()))
                                    (let while-loop ()
                                      (cond ((not (null? l))
                                             (set! map-result
                                               (cons (@mccabe_sub (car l))
                                                     map-result))
                                             (set! l (cdr l))
                                             (while-loop))
                                            (#t #t)))
                                    (reverse map-result)))
                               (reduce-result '()))
                           (cond ((null? l) '())
                                 (#t
                                  (set! reduce-result (car l))
                                  (set! l (cdr l))
                                  (let while-loop ()
                                    (cond ((not (null? l))
                                           (set! reduce-result
                                             (+ reduce-result (car l)))
                                           (set! l (cdr l))
                                           (while-loop))
                                          (#t #t)))
                                  reduce-result)))))
                    (@dtable_put //i //qry_/mc/cabe_/metric //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@essential //i)
  (let ((/block_file "tmp_ess.bb")
        (/ess_file "tmp_ess.ess")
        (/result "tmp_ess.txt")
        (/prefix (@string (@random //omega)))
        (/port '())
        (/line "")
        (/p 0)
        (//r-save //r)
        (funct-result '()))
    (set! //r 0)
    (set! /block_file
      (concat (string-append /prefix "_") /block_file))
    (set! /ess_file
      (concat (string-append /prefix "_") /ess_file))
    (set! /result
      (concat (string-append /prefix "_") /result))
    (@basic_blocks //i /block_file)
    (perlscript
      "bbtoess"
      (concat
        (string-append /block_file " ")
        /ess_file))
    (perlscript
      "bbmccabe"
      (concat (string-append /ess_file " ") /result))
    (set! /port (@open_input_file /result))
    (let ((/-result- (@read_line_proc /line /port)))
      (set! /line (car /-result-))
      (set! /-result- (cdr /-result-))
      (set! /port (car /-result-))
      (set! /-result- (cdr /-result-)))
    (@close_input_port /port)
    (cond ((< (string-length /line) 22)
           (error (string-append "@Essential: failed: " /line))))
    (@delete_file /block_file)
    (@delete_file /ess_file)
    (@delete_file /result)
    (set! /p (- (string-length /line) 1))
    (let while-loop ()
      (cond ((@digit?
               (let ((f /p)) (substring /line f (+ f 1))))
             (set! /p (- /p 1))
             (while-loop))
            (#t #t)))
    (set! //r
      (@string_to_num
        (let ((s /line))
          (substring s (+ /p 1) (string-length s)))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@cfdf_metric //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 0)
    (cond ((or (or (= (@st //i) //t_/variable)
                   (= (@st //i) //t_/aref))
               (= (@gt //i) //t_/lvalue))
           (set! //r 1))
          ((or (= (@st //i) //t_/a_/proc_/call)
               (= (@st //i) //t_/m/w_/proc_/call)
               (= (@st //i) //t_/x_/proc_/call)
               (= (@st //i) //t_/call)
               (= (@st //i) //t_/proc_/call))
           (set! //r 1))
          ((@cs? //i)
           (let ((//prev (@dtable_get //i //qry_/c/f/d/f_/metric))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (let ((l (let ((l //comps) (map-result '()))
                                 (let while-loop ()
                                   (cond ((not (null? l))
                                          (set! map-result
                                            (cons (@cfdf_metric (car l))
                                                  map-result))
                                          (set! l (cdr l))
                                          (while-loop))
                                         (#t #t)))
                                 (reverse map-result)))
                            (reduce-result '()))
                        (cond ((null? l) '())
                              (#t
                               (set! reduce-result (car l))
                               (set! l (cdr l))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! reduce-result
                                          (+ reduce-result (car l)))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               reduce-result))))
                    (@dtable_put //i //qry_/c/f/d/f_/metric //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@bl_metric //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 0)
    (cond ((or (= (@st //i) //t_/floop)
               (= (@st //i) //t_/while)
               (= (@st //i) //t_/for)
               (= (@st //i) //t_/d_/do))
           (set! //r 1))
          ((or (= (@st //i) //t_/a_/proc_/call)
               (= (@st //i) //t_/m/w_/proc_/call)
               (= (@st //i) //t_/x_/proc_/call)
               (= (@st //i) //t_/call)
               (= (@st //i) //t_/proc_/call))
           (set! //r 1))
          ((@cs? //i)
           (let ((//prev (@dtable_get //i //qry_/b/l_/metric))
                 (//comps (@cs //i)))
             (cond ((null? //prev)
                    (set! //r
                      (let ((l (let ((l //comps) (map-result '()))
                                 (let while-loop ()
                                   (cond ((not (null? l))
                                          (set! map-result
                                            (cons (@bl_metric (car l))
                                                  map-result))
                                          (set! l (cdr l))
                                          (while-loop))
                                         (#t #t)))
                                 (reverse map-result)))
                            (reduce-result '()))
                        (cond ((null? l) '())
                              (#t
                               (set! reduce-result (car l))
                               (set! l (cdr l))
                               (let while-loop ()
                                 (cond ((not (null? l))
                                        (set! reduce-result
                                          (+ reduce-result (car l)))
                                        (set! l (cdr l))
                                        (while-loop))
                                       (#t #t)))
                               reduce-result))))
                    (@dtable_put //i //qry_/b/l_/metric //r))
                   (#t (set! //r (@dtable_value_part //prev)))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@struct_metric //i)
  (let ((//r-save //r)
        (//prev (@dtable_get //i //qry_/struct_/metric))
        (funct-result '()))
    (set! //r 0)
    (cond ((null? //prev)
           (cond ((or (= (@st //i) //t_/plus)
                      (= (@st //i) //t_/times)
                      (= (@st //i) //t_/variable)
                      (= (@st //i) //t_/var_/lvalue))
                  (set! //r 1))
                 ((or (= (@st //i) //t_/minus)
                      (= (@st //i) //t_/divide)
                      (= (@st //i) //t_/exponent)
                      (= (@st //i) //t_/div)
                      (= (@st //i) //t_/mod)
                      (= (@st //i) //t_/abs)
                      (= (@st //i) //t_/sgn)
                      (= (@st //i) //t_/frac)
                      (= (@st //i) //t_/int)
                      (= (@st //i) //t_/and)
                      (= (@st //i) //t_/or))
                  (set! //r 2))
                 ((= (@gt //i) //t_/expression) (set! //r 4))
                 ((= (@gt //i) //t_/assign) (set! //r 4))
                 ((and (= (@st //i) //t_/cond)
                       (= (@size (list-ref
                                   (list-ref //i (+ 1 (@size //i)))
                                   (+ 1 2)))
                          1)
                       (= (@st (list-ref
                                 (list-ref
                                   (list-ref //i (+ 1 (@size //i)))
                                   (+ 1 2))
                                 (+ 1 1)))
                          //t_/skip))
                  (set! //r (* 5 (- (@size //i) 1))))
                 ((or (= (@st //i) //t_/cond)
                      (= (@st //i) //t_/d_/if)
                      (= (@st //i) //t_/d_/do))
                  (set! //r (* 5 (@size //i))))
                 ((= (@st //i) //t_/call) (set! //r 20))
                 ((= (@st //i) //t_/a_/proc_/call) (set! //r 17))
                 ((= (@st //i) //t_/proc_/call) (set! //r 17))
                 ((= (@st //i) //t_/exit)
                  (set! //r (* (+ 8 (@v //i)) (@v //i))))
                 ((= (@st //i) //t_/skip) (set! //r 1))
                 ((= (@st //i) //t_/var)
                  (set! //r (+ 8 (@size (list-ref //i (+ 1 2))))))
                 ((and (= (@gt //i) //t_/statements)
                       (= (@st (list-ref //i (+ 1 (@size //i))))
                          //t_/exit))
                  (set! //r (@size //i)))
                 ((= (@gt //i) //t_/statement) (set! //r 4)))
           (cond ((@cs? //i)
                  (set! //r
                    (+ //r
                       (let ((l (let ((l (@components //i)) (map-result '()))
                                  (let while-loop ()
                                    (cond ((not (null? l))
                                           (set! map-result
                                             (cons (@struct_metric (car l))
                                                   map-result))
                                           (set! l (cdr l))
                                           (while-loop))
                                          (#t #t)))
                                  (reverse map-result)))
                             (reduce-result '()))
                         (cond ((null? l) '())
                               (#t
                                (set! reduce-result (car l))
                                (set! l (cdr l))
                                (let while-loop ()
                                  (cond ((not (null? l))
                                         (set! reduce-result
                                           (+ reduce-result (car l)))
                                         (set! l (cdr l))
                                         (while-loop))
                                        (#t #t)))
                                reduce-result)))))))
           (@dtable_put //i //qry_/struct_/metric //r))
          (#t (set! //r (@dtable_value_part //prev))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@if_nest //i)
  (if (not (and (@has_statements_type? (@gt //i))
                (@cs? //i)))
    0
    (if (= (@st //i) //t_/cond)
      (+ 1
         (let ((l (let ((l (@cs //i)) (map-result '()))
                    (let while-loop ()
                      (cond ((not (null? l))
                             (set! map-result
                               (cons (@if_nest (car l)) map-result))
                             (set! l (cdr l))
                             (while-loop))
                            (#t #t)))
                    (reverse map-result)))
               (reduce-result '()))
           (cond ((null? l) '())
                 (#t
                  (set! reduce-result (car l))
                  (set! l (cdr l))
                  (let while-loop ()
                    (cond ((not (null? l))
                           (set! reduce-result (max reduce-result (car l)))
                           (set! l (cdr l))
                           (while-loop))
                          (#t #t)))
                  reduce-result))))
      (+ 0
         (let ((l (let ((l (@cs //i)) (map-result '()))
                    (let while-loop ()
                      (cond ((not (null? l))
                             (set! map-result
                               (cons (@if_nest (car l)) map-result))
                             (set! l (cdr l))
                             (while-loop))
                            (#t #t)))
                    (reverse map-result)))
               (reduce-result '()))
           (cond ((null? l) '())
                 (#t
                  (set! reduce-result (car l))
                  (set! l (cdr l))
                  (let while-loop ()
                    (cond ((not (null? l))
                           (set! reduce-result (max reduce-result (car l)))
                           (set! l (cdr l))
                           (while-loop))
                          (#t #t)))
                  reduce-result)))))))

(define (@big_proc //data)
  (let ((/bignum-save /bignum)
        (/bigname-save /bigname)
        (funct-result '()))
    (set! /bignum 0)
    (set! /bigname "None")
    (let while-loop ()
      (cond ((@up?) (@up) (while-loop)) (#t #t)))
    (@foreach_statement
      /foreach-metrics-1
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (set! funct-result (list /bignum /bigname))
    (set! /bignum /bignum-save)
    (set! /bigname /bigname-save)
    funct-result))

(define (@effective_size //i)
  (let ((//r-save //r) (funct-result '()))
    (set! //r 0)
    (cond ((= (@st //i) //t_/a_/s)
           (let ((/call_graph-save /call_graph)
                 (/effective_size-save /effective_size)
                 (//m-save //m)
                 (//msize 0)
                 (/root (@v (list-ref //i (+ 1 1))))
                 (/actions (@cs (list-ref //i (+ 1 2)))))
             (set! /call_graph (my-make-hash-table 16))
             (set! /effective_size (my-make-hash-table 16))
             (set! //m (my-make-hash-table 16))
             (let while-loop ()
               (cond ((not (null? /actions))
                      (begin
                        (puthash
                          //m
                          (@v (list-ref (car /actions) (+ 1 1)))
                          1)
                        (set! //msize (+ //msize 1))
                        (puthash
                          /call_graph
                          (@v (list-ref (car /actions) (+ 1 1)))
                          (@calls (car /actions)))
                        (set! /actions (cdr /actions)))
                      (while-loop))
                     (#t #t)))
             (cond ((= //msize 0) (set! //r 0))
                   (#t
                    (puthash //m /root 0)
                    (set! //r (/ (@esm /root) //msize))))
             (set! /call_graph /call_graph-save)
             (set! /effective_size /effective_size-save)
             (set! //m //m-save)))
          ((= (@st //i) //t_/where)
           (let ((/call_graph-save /call_graph)
                 (/effective_size-save /effective_size)
                 (//m-save //m)
                 (//msize 1)
                 (/root "main")
                 (/defns (@cs (list-ref //i (+ 1 2)))))
             (set! /call_graph (my-make-hash-table 16))
             (set! /effective_size (my-make-hash-table 16))
             (set! //m (my-make-hash-table 16))
             (puthash //m "main" 1)
             (puthash
               /call_graph
               "main"
               (concat
                 (@proc_calls (list-ref //i (+ 1 1)))
                 (@funct_calls (list-ref //i (+ 1 1)))))
             (let while-loop ()
               (cond ((not (null? /defns))
                      (begin
                        (puthash
                          //m
                          (@v (list-ref (car /defns) (+ 1 1)))
                          1)
                        (set! //msize (+ //msize 1))
                        (puthash
                          /call_graph
                          (@v (list-ref (car /defns) (+ 1 1)))
                          (concat
                            (@proc_calls (list-ref (car /defns) (+ 1 4)))
                            (@funct_calls (list-ref (car /defns) (+ 1 4)))))
                        (set! /defns (cdr /defns)))
                      (while-loop))
                     (#t #t)))
             (puthash //m /root 0)
             (set! //r (/ (@esm /root) //msize))
             (set! /call_graph /call_graph-save)
             (set! /effective_size /effective_size-save)
             (set! //m //m-save)))
          (#t
           (cond ((null? (@set_intersect
                           (list //t_/a_/s //t_/where)
                           (@stat_types //i)))
                  (set! //r 1))
                 (#t
                  (set! //r 0)
                  (let ((/total-save /total) (/size-save /size))
                    (set! /total 0)
                    (set! /size 0)
                    (@edit)
                    (@new_program //i)
                    (@foreach_statement
                      /foreach-metrics-2
                      0
                      (@as_type)
                      0)
                    (cond ((null? (@program)) (@new_program (@skips))))
                    (@undo_edit)
                    (cond ((> /total 0) (set! //r (/ //r /total))))
                    (set! /total /total-save)
                    (set! /size /size-save))))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

(define (@esm /x)
  (let ((//r (gethash /effective_size /x)) (/y '()))
    (cond ((null? //r)
           (let ((/pairs (gethash /call_graph /x)) (/y '()))
             (set! //r 1)
             (let while-loop ()
               (cond ((not (null? /pairs))
                      (begin
                        (set! /y (car (car /pairs)))
                        (cond ((and (not (null? (gethash //m /y)))
                                    (= (gethash //m /y) 1))
                               (puthash //m /y 0)
                               (set! //r (+ //r (@esm /y)))
                               (puthash //m /y 1))
                              (#t (set! //r (+ //r 1))))
                        (set! /pairs (cdr /pairs)))
                      (while-loop))
                     (#t #t)))
             (puthash /effective_size /x //r))))
    //r))

(define (@call_graph //i //filename)
  (let ((/port '())
        (/main_list
          (let ((l (list "MAIN" "Main" "main"))
                (map-result '()))
            (let while-loop ()
              (cond ((not (null? l))
                     (set! map-result
                       (cons (@make_name (car l)) map-result))
                     (set! l (cdr l))
                     (while-loop))
                    (#t #t)))
            (reverse map-result)))
        (/main '())
        (/calls '())
        (/n 1)
        (/action '())
        (/defn '()))
    (cond ((equal? //filename "")
           (set! /port //standard_/output_/port))
          (#t (set! /port (@open_output_file //filename))))
    (cond ((= (@st //i) //t_/a_/s)
           (let ((var-save /action)
                 (seq-save (@cs (list-ref //i (+ 1 2)))))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /action (car for-tmp))
                      (@write_cg_line
                        (@v (list-ref /action (+ 1 1)))
                        (@calls /action)
                        /port)
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /action var-save)))
          ((= (@st //i) //t_/where)
           (set! /calls
             (@set_union
               (let ((l (@proc_calls (list-ref //i (+ 1 1))))
                     (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result (cons (car (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result))
               (let ((l (@funct_calls (list-ref //i (+ 1 1))))
                     (map-result '()))
                 (let while-loop ()
                   (cond ((not (null? l))
                          (set! map-result (cons (car (car l)) map-result))
                          (set! l (cdr l))
                          (while-loop))
                         (#t #t)))
                 (reverse map-result))))
           (set! /main_list
             (@set_difference /main_list /calls))
           (cond ((null? /main_list)
                  (set! /main
                    (@make_name (string-append "main_" (@string /n))))
                  (let while-loop ()
                    (cond ((member /main /calls)
                           (begin
                             (set! /n (+ /n 1))
                             (set! /main
                               (@make_name
                                 (string-append "main_" (@string /n)))))
                           (while-loop))
                          (#t #t))))
                 (#t (set! /main (car /main_list))))
           (@write_cg_line
             /main
             (concat
               (@proc_calls (list-ref //i (+ 1 1)))
               (@funct_calls (list-ref //i (+ 1 1))))
             /port)
           (let ((var-save /defn)
                 (seq-save (@cs (list-ref //i (+ 1 2)))))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /defn (car for-tmp))
                      (@write_cg_line
                        (@v (list-ref /defn (+ 1 1)))
                        (concat (@proc_calls /defn) (@funct_calls /defn))
                        /port)
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /defn var-save))))
    (@close_output_port /port)))

(define (@write_cg_line /name /calls /port)
  (let ((/call '()))
    (@write (@n_string /name) /port)
    (@write ": " /port)
    (let ((var-save /call) (seq-save /calls))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /call (car for-tmp))
               (begin
                 (@write
                   (@n_string
                     (let ((name /call))
                       (if (vector? name)
                         (vector-ref name (- 1 1))
                         (list-ref name (- 1 1)))))
                   /port)
                 (@write " " /port)
                 (@write
                   (@string
                     (let ((name /call))
                       (if (vector? name)
                         (vector-ref name (- 2 1))
                         (list-ref name (- 2 1)))))
                   /port)
                 (@write " " /port))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /call var-save))
    (@write_line "" /port)))

(define (@assignment_stats //i)
  (let ((/total-save /total)
        (/c1-save /c1)
        (/c2-save /c2)
        (//constants-save //constants)
        (//assigned-save //assigned)
        (funct-result '()))
    (set! /total 0)
    (set! /c1 0)
    (set! /c2 0)
    (set! //constants
      (@set_difference (@used //i) (@assigned //i)))
    (set! //assigned (@assigned //i))
    (@edit)
    (@new_program //i)
    (@foreach_statement
      /foreach-metrics-3
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@undo_edit)
    (set! funct-result (list /c1 /c2 /total))
    (set! /total /total-save)
    (set! /c1 /c1-save)
    (set! /c2 /c2-save)
    (set! //constants //constants-save)
    (set! //assigned //assigned-save)
    funct-result))

(define (@tpf_pairs)
  (let ((/p1-save /p1)
        (/p2-save /p2)
        (//pairs-save //pairs))
    (set! /p1 '())
    (set! /p2 '())
    (set! //pairs (my-make-hash-table 16))
    (@foreach_cond /foreach-metrics-4 0 (@as_type) 0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (@foreach_statement
      /foreach-metrics-5
      0
      (@as_type)
      0)
    (cond ((null? (@program)) (@new_program (@skips))))
    (let ((var-save /pair)
          (seq-save (@sort_list (@hash_keys //pairs))))
      (if (vector? seq-save)
        (set! seq-save (vector-elts seq-save)))
      (let for-in-loop ((for-tmp seq-save))
        (cond ((not (null? for-tmp))
               (set! /pair (car for-tmp))
               (begin
                 (display
                   (let ((name /pair))
                     (if (vector? name)
                       (vector-ref name (- 1 1))
                       (list-ref name (- 1 1)))))
                 (begin
                   (display ", ")
                   (begin
                     (display
                       (let ((name /pair))
                         (if (vector? name)
                           (vector-ref name (- 2 1))
                           (list-ref name (- 2 1)))))
                     (newline)
                     (force-output))))
               (for-in-loop (cdr for-tmp)))
              (#t #t)))
      (set! /pair var-save))
    #t
    (set! /p1 /p1-save)
    (set! /p2 /p2-save)
    (set! //pairs //pairs-save)))

(define (@tpf_add_pair /v1 /v2 //pairs-par)
  (let ((//pairs-save //pairs) (funct-result '()))
    (set! //pairs //pairs-par)
    (cond ((@sort_less? /v1 /v2)
           (puthash //pairs (list /v1 /v2) 1))
          (#t (puthash //pairs (list /v2 /v1) 1)))
    (set! funct-result //pairs)
    (set! //pairs //pairs-save)
    funct-result))

(set! //t/p/f_/generic
  (@make_set
    (let ((l (list "EB0EB" "MI0MI" "UI0OM"))
          (map-result '()))
      (let while-loop ()
        (cond ((not (null? l))
               (set! map-result
                 (cons (@make_name (car l)) map-result))
               (set! l (cdr l))
               (while-loop))
              (#t #t)))
      (reverse map-result))))

(define (@tpf_fields //i)
  (let ((//r-save //r) (/elt '()) (funct-result '()))
    (set! //r '())
    (cond ((= (@st //i) //t_/struct)
           (set! /elt (@struct_elts //i))
           (cond ((and (> (if (vector? /elt)
                            (vector-length /elt)
                            (length /elt))
                          2)
                       (equal? (car /elt) /a_name)
                       (not (member
                              (let ((name /elt))
                                (if (vector? name)
                                  (vector-ref name (- 2 1))
                                  (list-ref name (- 2 1))))
                              //t/p/f_/generic)))
                  (set! //r
                    (list (concat
                            (string-append
                              (@n_string
                                (let ((name /elt))
                                  (if (vector? name)
                                    (vector-ref name (- 2 1))
                                    (list-ref name (- 2 1)))))
                              ".")
                            (@n_string (last-1 /elt))))))))
          ((@cs? //i)
           (let ((var-save /comp) (seq-save (@cs //i)))
             (if (vector? seq-save)
               (set! seq-save (vector-elts seq-save)))
             (let for-in-loop ((for-tmp seq-save))
               (cond ((not (null? for-tmp))
                      (set! /comp (car for-tmp))
                      (set! //r (@set_union //r (@tpf_fields /comp)))
                      (for-in-loop (cdr for-tmp)))
                     (#t #t)))
             (set! /comp var-save))))
    (set! funct-result //r)
    (set! //r //r-save)
    funct-result))

